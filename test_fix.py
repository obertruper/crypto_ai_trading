#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
"""

import sys
import ast
import inspect

def test_duplicate_methods():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ –Ω–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤"""
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open('run_interactive.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ò—â–µ–º –≤—Å–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è launch_gpu_training
    lines = content.split('\n')
    launch_gpu_training_lines = []
    
    for i, line in enumerate(lines, 1):
        if 'def launch_gpu_training(' in line:
            launch_gpu_training_lines.append(i)
    
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π launch_gpu_training(): {len(launch_gpu_training_lines)}")
    
    if len(launch_gpu_training_lines) > 1:
        print(f"‚ùå –û–®–ò–ë–ö–ê: –ù–∞–π–¥–µ–Ω–æ {len(launch_gpu_training_lines)} –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –Ω–∞ —Å—Ç—Ä–æ–∫–∞—Ö: {launch_gpu_training_lines}")
        return False
    elif len(launch_gpu_training_lines) == 1:
        print(f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ù–∞–π–¥–µ–Ω 1 –º–µ—Ç–æ–¥ launch_gpu_training() –Ω–∞ —Å—Ç—Ä–æ–∫–µ {launch_gpu_training_lines[0]}")
        return True
    else:
        print("‚ùå –û–®–ò–ë–ö–ê: –ú–µ—Ç–æ–¥ launch_gpu_training() –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False

def test_syntax():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —Ñ–∞–π–ª–∞"""
    try:
        with open('run_interactive.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
        ast.parse(content)
        print("‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        return True
    except SyntaxError as e:
        print(f"‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"   –°—Ç—Ä–æ–∫–∞ {e.lineno}: {e.text}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞: {e}")
        return False

def main():
    print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    duplicates_ok = test_duplicate_methods()
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
    syntax_ok = test_syntax()
    print()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if duplicates_ok and syntax_ok:
        print("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã —É–¥–∞–ª–µ–Ω—ã")
        print("‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        print("‚úÖ –§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    else:
        print("‚ö†Ô∏è  –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –†–ê–ë–û–¢–ê")
        if not duplicates_ok:
            print("‚ùå –í—Å–µ –µ—â–µ –µ—Å—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã")
        if not syntax_ok:
            print("‚ùå –ï—Å—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏")

if __name__ == "__main__":
    main()

#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—ç—à–∞ –¥–∞–Ω–Ω—ã—Ö
"""

import yaml
from data.data_loader import CryptoDataLoader
from utils.logger import get_logger

def main():
    logger = get_logger("CacheCreation")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    with open('config/config.yaml', 'r') as f:
        config = yaml.safe_load(f)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö
    loader = CryptoDataLoader(config)
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∫—ç—à–∞ –¥–∞–Ω–Ω—ã—Ö...")
    logger.info("üìä –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 10-15 –º–∏–Ω—É—Ç...")
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫—ç—à–∞
    train_data, val_data, test_data = loader.prepare_trading_data(
        force_recreate=True,  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ
        use_cache=False       # –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–π –∫—ç—à
    )
    
    logger.info("\n‚úÖ –ö—ç—à —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
    logger.info(f"üìà –†–∞–∑–º–µ—Ä—ã –¥–∞—Ç–∞—Å–µ—Ç–æ–≤:")
    logger.info(f"   - Train: {len(train_data):,} –∑–∞–ø–∏—Å–µ–π")
    logger.info(f"   - Val: {len(val_data):,} –∑–∞–ø–∏—Å–µ–π")
    logger.info(f"   - Test: {len(test_data):,} –∑–∞–ø–∏—Å–µ–π")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ close_vwap_ratio
    if 'close_vwap_ratio' in train_data.columns:
        stats = train_data['close_vwap_ratio'].describe()
        logger.info(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ close_vwap_ratio:")
        logger.info(f"   - Min: {stats['min']:.4f}")
        logger.info(f"   - Max: {stats['max']:.4f}")
        logger.info(f"   - Mean: {stats['mean']:.4f}")
        
        if stats['max'] > 10:
            logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ feature_engineering.py")
        else:
            logger.info("‚úÖ –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –Ω–æ—Ä–º–µ!")

if __name__ == "__main__":
    main()
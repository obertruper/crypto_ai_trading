#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–ª–æ–Ω–æ–∫ –º–µ–∂–¥—É –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
"""

import pandas as pd
from pathlib import Path
from data.constants import (
    TRADING_TARGET_VARIABLES, ADDITIONAL_TARGET_VARIABLES,
    ALL_TARGET_VARIABLES, SERVICE_COLUMNS,
    get_feature_columns, get_target_columns, validate_data_structure
)

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
USER_STRUCTURE = {
    'total_columns': 203,
    'features': 144,
    'targets': 49,
    'service': 4,
    'ohlcv': 6
}

# –¶–µ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (49)
USER_TARGETS = {
    # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–≤—Ä–∞—Ç—ã (8)
    'returns': ['future_return_1', 'future_return_2', 'future_return_3', 'future_return_4',
                'future_high_1', 'future_high_2', 'future_high_3', 'future_high_4',
                'future_low_1', 'future_low_2', 'future_low_3', 'future_low_4'],
    
    # LONG (15)
    'long': ['long_tp1_hit', 'long_tp1_reached', 'long_tp1_time',
             'long_tp2_hit', 'long_tp2_reached', 'long_tp2_time',
             'long_tp3_hit', 'long_tp3_reached', 'long_tp3_time',
             'long_sl_hit', 'long_sl_reached', 'long_sl_time',
             'long_optimal_entry_time', 'long_optimal_entry_price', 'long_optimal_entry_improvement'],
    
    # SHORT (15)
    'short': ['short_tp1_hit', 'short_tp1_reached', 'short_tp1_time',
              'short_tp2_hit', 'short_tp2_reached', 'short_tp2_time',
              'short_tp3_hit', 'short_tp3_reached', 'short_tp3_time',
              'short_sl_hit', 'short_sl_reached', 'short_sl_time',
              'short_optimal_entry_time', 'short_optimal_entry_price', 'short_optimal_entry_improvement'],
    
    # –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–µ (7)
    'results': ['long_expected_value', 'short_expected_value',
                'long_final_result', 'short_final_result',
                'best_direction', 'signal_strength', 'target_return_1h']
}

# –í—Å–µ —Ü–µ–ª–µ–≤—ã–µ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
ALL_USER_TARGETS = []
for category, targets in USER_TARGETS.items():
    ALL_USER_TARGETS.extend(targets)

def check_targets_consistency():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ü–µ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
    print("üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:")
    print(f"\n–û–∂–∏–¥–∞–µ—Ç—Å—è –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è: {len(ALL_USER_TARGETS)} –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
    print(f"–í constants.py –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: {len(ALL_TARGET_VARIABLES)} –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –≤ constants.py –Ω–æ –Ω–µ—Ç –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
    missing_in_user = set(ALL_TARGET_VARIABLES) - set(ALL_USER_TARGETS)
    if missing_in_user:
        print(f"\n‚ùå –í constants.py –µ—Å—Ç—å, –Ω–æ –Ω–µ—Ç –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        for var in sorted(missing_in_user):
            print(f"   - {var}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –Ω–æ –Ω–µ—Ç –≤ constants.py
    missing_in_constants = set(ALL_USER_TARGETS) - set(ALL_TARGET_VARIABLES)
    if missing_in_constants:
        print(f"\n‚ùå –í –æ–ø–∏—Å–∞–Ω–∏–∏ –µ—Å—Ç—å, –Ω–æ –Ω–µ—Ç –≤ constants.py:")
        for var in sorted(missing_in_constants):
            print(f"   - {var}")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ 36 –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    print(f"\nüìä –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–µ–ª–µ–≤—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {len(TRADING_TARGET_VARIABLES)}")
    print(f"üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–ª–µ–≤—ã–µ: {len(ADDITIONAL_TARGET_VARIABLES)}")
    
    if len(missing_in_user) == 0 and len(missing_in_constants) == 0:
        print("\n‚úÖ –í—Å–µ —Ü–µ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç!")
    
    return len(missing_in_user) == 0 and len(missing_in_constants) == 0

def check_cache_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫—ç—à–∞"""
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫—ç—à–∞:")
    
    cache_dir = Path("data/processed")
    if not cache_dir.exists():
        print("‚ùå –ö—ç—à –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º train_data.parquet
    train_file = cache_dir / "train_data.parquet"
    if train_file.exists():
        df = pd.read_parquet(train_file, nrows=100)  # –ß–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ 100 —Å—Ç—Ä–æ–∫ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        
        print(f"\nüìä –†–µ–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ train_data.parquet:")
        print(f"   - –í—Å–µ–≥–æ –∫–æ–ª–æ–Ω–æ–∫: {len(df.columns)}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ constants.py
        feature_cols = get_feature_columns(df.columns)
        target_cols = get_target_columns(df.columns, use_extended=True)  # –í—Å–µ 49
        target_cols_training = get_target_columns(df.columns, use_extended=False)  # –¢–æ–ª—å–∫–æ 36
        
        print(f"   - –ü—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(feature_cols)}")
        print(f"   - –¶–µ–ª–µ–≤—ã—Ö (–≤—Å–µ–≥–æ): {len(target_cols)}")
        print(f"   - –¶–µ–ª–µ–≤—ã—Ö (–¥–ª—è –æ–±—É—á–µ–Ω–∏—è): {len(target_cols_training)}")
        
        # –°–ª—É–∂–µ–±–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        service_in_df = [col for col in df.columns if col in SERVICE_COLUMNS]
        print(f"   - –°–ª—É–∂–µ–±–Ω—ã—Ö: {len(service_in_df)} {service_in_df}")
        
        # OHLCV
        ohlcv_cols = ['open', 'high', 'low', 'close', 'volume', 'turnover']
        ohlcv_in_df = [col for col in df.columns if col in ohlcv_cols]
        print(f"   - OHLCV: {len(ohlcv_in_df)}")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ–∂–∏–¥–∞–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print(f"\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        print(f"   –ö–æ–ª–æ–Ω–æ–∫: {len(df.columns)} vs {USER_STRUCTURE['total_columns']} –æ–∂–∏–¥–∞–ª–æ—Å—å")
        print(f"   –ü—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(feature_cols)} vs {USER_STRUCTURE['features']} –æ–∂–∏–¥–∞–ª–æ—Å—å")
        print(f"   –¶–µ–ª–µ–≤—ã—Ö: {len(target_cols)} vs {USER_STRUCTURE['targets']} –æ–∂–∏–¥–∞–ª–æ—Å—å")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–Ω–∏—Ü—ã –≤ –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö:")
        expected_features = USER_STRUCTURE['total_columns'] - USER_STRUCTURE['targets'] - USER_STRUCTURE['service'] - USER_STRUCTURE['ohlcv']
        actual_features = len(df.columns) - len(target_cols) - len(service_in_df) - len(ohlcv_in_df)
        
        print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {expected_features}")
        print(f"   –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {actual_features}")
        
        if actual_features != expected_features:
            print(f"\n   ‚ö†Ô∏è –†–∞–∑–Ω–∏—Ü–∞ –≤ {abs(actual_features - expected_features)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    
    return True

def check_columns_usage_in_main():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –≤ main.py"""
    print("\nüìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ main.py:")
    print("1. load_cached_data_if_exists() –∑–∞–≥—Ä—É–∂–∞–µ—Ç parquet —Ñ–∞–π–ª—ã")
    print("2. validate_data_structure() –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç feature_cols –∏ target_cols")
    print("3. create_unified_data_loaders() –ø–æ–ª—É—á–∞–µ—Ç —ç—Ç–∏ —Å–ø–∏—Å–∫–∏")
    print("4. –î–ª—è task_type='trading' –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤—Å–µ target_cols (36 –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö)")
    print("5. config['model']['target_variables'] –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö\n")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    targets_ok = check_targets_consistency()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞
    cache_ok = check_cache_structure()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    usage_ok = check_columns_usage_in_main()
    
    print("\n" + "="*60)
    if targets_ok and cache_ok and usage_ok:
        print("‚úÖ –°–¢–†–£–ö–¢–£–†–ê –î–ê–ù–ù–´–• –°–û–ì–õ–ê–°–û–í–ê–ù–ê!")
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("1. –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∫—ç—à –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è VWAP:")
        print("   python prepare_trading_data.py")
        print("\n2. –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ:")
        print("   python main.py --mode train")
    else:
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ!")

if __name__ == "__main__":
    main()
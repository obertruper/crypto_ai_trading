#!/usr/bin/env python3

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent))

def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
    print("üß™ –¢–ï–°–¢ –ò–ú–ü–û–†–¢–û–í –ú–û–î–£–õ–ï–ô")
    print("=" * 40)
    
    imports_to_test = [
        ("yaml", "import yaml"),
        ("torch", "import torch"),
        ("pandas", "import pandas as pd"),
        ("numpy", "import numpy as np"),
        ("data.data_loader", "from data.data_loader import CryptoDataLoader"),
        ("data.feature_engineering", "from data.feature_engineering import FeatureEngineer"),
        ("models.patchtst", "from models.patchtst import PatchTSTForPrediction"),
        ("training.trainer", "from training.trainer import Trainer"),
        ("utils.logger", "from utils.logger import get_logger"),
    ]
    
    success_count = 0
    
    for name, import_str in imports_to_test:
        try:
            exec(import_str)
            print(f"‚úÖ {name}")
            success_count += 1
        except Exception as e:
            print(f"‚ùå {name}: {e}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{len(imports_to_test)} –∏–º–ø–æ—Ä—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ")
    
    return success_count == len(imports_to_test)

def test_config():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\n‚öôÔ∏è –¢–ï–°–¢ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
    print("=" * 40)
    
    try:
        import yaml
        config_path = Path("config/config.yaml")
        
        if not config_path.exists():
            print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
            return False
        
        with open(config_path, 'r') as f:
            config = yaml.safe_load(f)
        
        required_sections = ['data', 'model', 'database', 'features']
        missing_sections = []
        
        for section in required_sections:
            if section in config:
                print(f"‚úÖ –°–µ–∫—Ü–∏—è '{section}' –Ω–∞–π–¥–µ–Ω–∞")
            else:
                print(f"‚ùå –°–µ–∫—Ü–∏—è '{section}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                missing_sections.append(section)
        
        if not missing_sections:
            print("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return True
        else:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–µ–∫—Ü–∏–∏: {missing_sections}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_database():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
    print("\nüóÑÔ∏è –¢–ï–°–¢ –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 40)
    
    try:
        import yaml
        import os
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open("config/config.yaml", 'r') as f:
            config = yaml.safe_load(f)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        db_config = config['database']
        print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        
        env_vars = {
            'DB_HOST': os.getenv('DB_HOST', 'localhost'),
            'DB_PORT': os.getenv('DB_PORT', '5555'),  
            'DB_NAME': os.getenv('DB_NAME', 'crypto_trading'),
            'DB_USER': os.getenv('DB_USER', 'ruslan'),
            'DB_PASSWORD': os.getenv('DB_PASSWORD', 'ruslan')
        }
        
        for var, value in env_vars.items():
            if value:
                print(f"‚úÖ {var}: {value}")
            else:
                print(f"‚ùå {var}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        try:
            import psycopg2
            conn = psycopg2.connect(
                host=env_vars['DB_HOST'],
                port=int(env_vars['DB_PORT']),
                database=env_vars['DB_NAME'],
                user=env_vars['DB_USER'],
                password=env_vars['DB_PASSWORD']
            )
            cursor = conn.cursor()
            cursor.execute("SELECT 1")
            cursor.fetchone()
            cursor.close()
            conn.close()
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ë–î: {e}")
        return False

def main():
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    
    test1 = test_imports()
    test2 = test_config()
    test3 = test_database()
    
    print("\n" + "=" * 60)
    print("üìä –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    
    if test1 and test2 and test3:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.")
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        if not test1:
            print("  - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        if not test2:
            print("  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª config/config.yaml")
        if not test3:
            print("  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)

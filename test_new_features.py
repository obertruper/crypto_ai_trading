#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
"""

import torch
import numpy as np
from pathlib import Path

def test_direction_metrics():
    """–¢–µ—Å—Ç –º–µ—Ç—Ä–∏–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ direction_metrics...")
    
    from utils.direction_metrics import DirectionMetricsCalculator, quick_direction_evaluation
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    batch_size = 1000
    n_timeframes = 4
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    predictions = torch.randint(0, 3, (batch_size, n_timeframes)).float()
    targets = torch.randint(0, 3, (batch_size, n_timeframes)).float()
    returns = torch.randn(batch_size, n_timeframes) * 2  # ¬±2% –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
    
    # –ë—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞
    quick_results = quick_direction_evaluation(predictions, targets, returns)
    
    print(f"üìä Direction Accuracy: {quick_results['direction_accuracy']:.3f}")
    print(f"üí∞ Win Rate: {quick_results['win_rate']:.3f}")
    print(f"üìà Profit Factor: {quick_results['profit_factor']:.2f}")
    print(f"üî¢ Total Trades: {quick_results['total_trades']}")
    
    print("‚úÖ Direction metrics —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω!")
    return True

def test_directional_trading_loss():
    """–¢–µ—Å—Ç DirectionalTradingLoss"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DirectionalTradingLoss...")
    
    from models.patchtst_unified import DirectionalTradingLoss
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    batch_size = 32
    
    # –°–ª–æ–≤–∞—Ä–∏ —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏ –∏ —Ü–µ–ª—è–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
    predictions = {
        'direction_15m': torch.randn(batch_size, 3),  # –õ–æ–≥–∏—Ç—ã –¥–ª—è 3 –∫–ª–∞—Å—Å–æ–≤
        'direction_1h': torch.randn(batch_size, 3),
        'direction_4h': torch.randn(batch_size, 3),
        'direction_12h': torch.randn(batch_size, 3)
    }
    
    targets = {
        'direction_15m': torch.randint(0, 3, (batch_size,)),
        'direction_1h': torch.randint(0, 3, (batch_size,)),
        'direction_4h': torch.randint(0, 3, (batch_size,)),
        'direction_12h': torch.randint(0, 3, (batch_size,))
    }
    
    price_changes = {
        '15m': torch.randn(batch_size) * 0.02,  # ¬±2% –∏–∑–º–µ–Ω–µ–Ω–∏—è
        '1h': torch.randn(batch_size) * 0.03,
        '4h': torch.randn(batch_size) * 0.05,
        '12h': torch.randn(batch_size) * 0.08
    }
    
    # –°–æ–∑–¥–∞–µ–º loss —Ñ—É–Ω–∫—Ü–∏—é
    loss_fn = DirectionalTradingLoss(commission=0.001, profit_focus_weight=5.0)
    
    # –í—ã—á–∏—Å–ª—è–µ–º loss
    loss = loss_fn(predictions, targets, price_changes)
    
    print(f"üìâ DirectionalTradingLoss: {loss.item():.4f}")
    print(f"üîß Loss –∏–º–µ–µ—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã: {loss.requires_grad}")
    
    print("‚úÖ DirectionalTradingLoss —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω!")
    return True

def test_optimized_trainer_metrics():
    """–¢–µ—Å—Ç –Ω–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –≤ OptimizedTrainer"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ OptimizedTrainer...")
    
    from training.optimized_trainer import OptimizedTrainer
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–∏–º–∏—Ç–∏—Ä—É–µ–º –≤—ã—Ö–æ–¥—ã –º–æ–¥–µ–ª–∏)
    batch_size = 100
    n_outputs = 20  # 20 –≤—ã—Ö–æ–¥–æ–≤ –º–æ–¥–µ–ª–∏
    
    outputs = torch.randn(batch_size, n_outputs)
    targets = torch.randn(batch_size, n_outputs)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º direction targets –∫–∞–∫ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ [0, 1, 2]
    targets[:, 4:8] = torch.randint(0, 3, (batch_size, 4)).float()
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç—Ä–µ–π–Ω–µ—Ä –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ—Ç–æ–¥–∞–º
    import yaml
    config = {
        'model': {'epochs': 1, 'learning_rate': 1e-4},
        'performance': {'mixed_precision': False, 'gradient_accumulation_steps': 1},
        'loss': {}
    }
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    import torch.nn as nn
    test_model = nn.Linear(10, n_outputs)
    
    trainer = OptimizedTrainer(test_model, config, device=torch.device('cpu'))
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
    direction_metrics = trainer.compute_direction_metrics(outputs, targets)
    trading_metrics = trainer.compute_trading_metrics(outputs, targets)
    
    print("üìä Direction Metrics:")
    for key, value in direction_metrics.items():
        if isinstance(value, float):
            print(f"   {key}: {value:.3f}")
    
    print("\nüí∞ Trading Metrics:")
    for key, value in trading_metrics.items():
        if isinstance(value, float):
            print(f"   {key}: {value:.3f}")
    
    print("‚úÖ OptimizedTrainer –º–µ—Ç—Ä–∏–∫–∏ —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω!")
    return True

def test_converted_data():
    """–¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö direction –º–µ—Ç–æ–∫"""
    print("\nüß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    import pandas as pd
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–¥–∏–Ω –∏–∑ —Ñ–∞–π–ª–æ–≤
    data_file = Path("data/processed/train_data.parquet")
    
    if not data_file.exists():
        print("‚ö†Ô∏è –§–∞–π–ª train_data.parquet –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
        return True
    
    df = pd.read_parquet(data_file)
    
    direction_cols = ['direction_15m', 'direction_1h', 'direction_4h', 'direction_12h']
    
    print(f"üìä –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {len(df):,} –∑–∞–ø–∏—Å–µ–π")
    
    for col in direction_cols:
        if col in df.columns:
            unique_values = sorted(df[col].dropna().unique())
            value_counts = df[col].value_counts()
            
            print(f"   {col}: {unique_values}")
            print(f"     –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {dict(value_counts)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0, 1, 2]
            if all(v in [0, 1, 2] for v in unique_values):
                print(f"     ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
            else:
                print(f"     ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!")
                return False
    
    print("‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã!")
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=" * 60)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–´–• –§–£–ù–ö–¶–ò–ô –£–õ–£–ß–®–ï–ù–ò–Ø –ö–ê–ß–ï–°–¢–í–ê")
    print("=" * 60)
    
    tests = [
        test_direction_metrics,
        test_directional_trading_loss, 
        test_optimized_trainer_metrics,
        test_converted_data
    ]
    
    passed = 0
    total = len(tests)
    
    for test_func in tests:
        try:
            if test_func():
                passed += 1
        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç {test_func.__name__} –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
            import traceback
            traceback.print_exc()
    
    print("\n" + "=" * 60)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –æ–±—É—á–µ–Ω–∏—é —Å –Ω–æ–≤—ã–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏:")
        print("   python main.py --mode train --direction-focus --loss-type directional")
        print("   python main.py --mode train --target-focus directions --ensemble-count 3")
        print("   python main.py --mode train --large-movement-weight 5.0 --min-movement-threshold 0.01")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ")
    
    print("=" * 60)

if __name__ == "__main__":
    main()
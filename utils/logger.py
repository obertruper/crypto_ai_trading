"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è AI —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
"""

import logging
import logging.handlers
import os
import sys
from datetime import datetime
from pathlib import Path
from typing import Optional, Dict, Any
import json
import colorlog
from pythonjsonlogger import jsonlogger

class TradingLogger:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self, name: str, config_path: str = "config/config.yaml", is_subprocess: bool = False):
        self.name = name
        self.config = self._load_config(config_path)
        self.is_subprocess = is_subprocess  # –§–ª–∞–≥ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ –ø–æ–¥–ø—Ä–æ—Ü–µ—Å—Å–∞—Ö
        self.logger = self._setup_logger()
        self.stage_timers = {}
        
    def _load_config(self, config_path: str) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        import yaml
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                return yaml.safe_load(f)
        except FileNotFoundError:
            # Fallback –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            return {
                'logging': {
                    'level': 'INFO',
                    'handlers': ['console', 'file'],
                    'log_dir': 'experiments/logs'
                }
            }
    
    def _setup_logger(self) -> logging.Logger:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏"""
        logger = logging.getLogger(self.name)
        logger.setLevel(self.config['logging']['level'])
        logger.handlers = []
        
        log_dir = Path(self.config['logging']['log_dir'])
        log_dir.mkdir(parents=True, exist_ok=True)
        
        # –í –ø–æ–¥–ø—Ä–æ—Ü–µ—Å—Å–∞—Ö –æ—Ç–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        if 'console' in self.config['logging']['handlers'] and not self.is_subprocess:
            console_handler = self._create_console_handler()
            logger.addHandler(console_handler)
        
        if 'file' in self.config['logging']['handlers']:
            file_handler = self._create_file_handler(log_dir)
            logger.addHandler(file_handler)
        
        # JSON –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
        if not self.is_subprocess:
            json_handler = self._create_json_handler(log_dir)
            logger.addHandler(json_handler)
        
        return logger
    
    def _create_console_handler(self) -> logging.Handler:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ü–≤–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        console_handler = colorlog.StreamHandler(sys.stdout)
        
        console_format = colorlog.ColoredFormatter(
            '%(log_color)s%(asctime)s | %(name)-20s | %(levelname)-8s | %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S',
            log_colors={
                'DEBUG': 'cyan',
                'INFO': 'green',
                'WARNING': 'yellow',
                'ERROR': 'red',
                'CRITICAL': 'red,bg_white',
            }
        )
        
        console_handler.setFormatter(console_format)
        return console_handler
    
    def _create_file_handler(self, log_dir: Path) -> logging.Handler:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π"""
        log_file = log_dir / f"{self.name}_{datetime.now().strftime('%Y%m%d')}.log"
        
        file_handler = logging.handlers.RotatingFileHandler(
            log_file,
            maxBytes=10 * 1024 * 1024,  # 10MB
            backupCount=10,
            encoding='utf-8'
        )
        
        file_format = logging.Formatter(
            '%(asctime)s | %(name)s | %(levelname)s | %(funcName)s:%(lineno)d | %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        
        file_handler.setFormatter(file_format)
        return file_handler
    
    def _create_json_handler(self, log_dir: Path) -> logging.Handler:
        """–°–æ–∑–¥–∞–Ω–∏–µ JSON –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤"""
        json_file = log_dir / f"{self.name}_structured_{datetime.now().strftime('%Y%m%d')}.json"
        
        json_handler = logging.handlers.RotatingFileHandler(
            json_file,
            maxBytes=20 * 1024 * 1024,  # 20MB
            backupCount=5,
            encoding='utf-8'
        )
        
        json_formatter = jsonlogger.JsonFormatter(
            '%(timestamp)s %(level)s %(name)s %(message)s',
            rename_fields={'timestamp': '@timestamp', 'level': 'level'}
        )
        
        json_handler.setFormatter(json_formatter)
        return json_handler
    
    def start_stage(self, stage_name: str, **kwargs):
        """–ù–∞—á–∞–ª–æ —ç—Ç–∞–ø–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        self.stage_timers[stage_name] = datetime.now()
        
        self.logger.info(
            f"üöÄ –ù–∞—á–∞–ª–æ —ç—Ç–∞–ø–∞: {stage_name}",
            extra={
                'stage': stage_name,
                'stage_type': 'start',
                'parameters': kwargs
            }
        )
    
    def end_stage(self, stage_name: str, **results):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if stage_name in self.stage_timers:
            duration = (datetime.now() - self.stage_timers[stage_name]).total_seconds()
            
            self.logger.info(
                f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç—Ç–∞–ø–∞: {stage_name} (–≤—Ä–µ–º—è: {duration:.2f}—Å)",
                extra={
                    'stage': stage_name,
                    'stage_type': 'end',
                    'duration': duration,
                    'results': results
                }
            )
            
            del self.stage_timers[stage_name]
    
    def log_model_metrics(self, epoch: int, metrics: Dict[str, float]):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –º–æ–¥–µ–ª–∏"""
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        formatted_metrics = []
        for k, v in metrics.items():
            if k == 'learning_rate':
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—É—á–Ω—É—é –Ω–æ—Ç–∞—Ü–∏—é –¥–ª—è –º–∞–ª—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π LR
                formatted_metrics.append(f"{k}: {v:.2e}")
            elif k == 'epoch_time':
                # –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö —Å 2 –∑–Ω–∞–∫–∞–º–∏
                formatted_metrics.append(f"{k}: {v:.2f}s")
            else:
                # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å 4 –∑–Ω–∞–∫–∞–º–∏
                formatted_metrics.append(f"{k}: {v:.4f}")
        
        metrics_str = " | ".join(formatted_metrics)
        
        self.logger.info(
            f"üìä –≠–ø–æ—Ö–∞ {epoch} | {metrics_str}",
            extra={
                'epoch': epoch,
                'metrics': metrics,
                'log_type': 'model_metrics'
            }
        )
    
    def log_trade(self, symbol: str, action: str, price: float, 
                  stop_loss: float, take_profit: float, confidence: float):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        risk_reward = (take_profit - price) / (price - stop_loss)
        
        self.logger.info(
            f"üí∞ {action.upper()} {symbol} @ {price:.4f} | "
            f"SL: {stop_loss:.4f} | TP: {take_profit:.4f} | "
            f"RR: {risk_reward:.2f} | Conf: {confidence:.2%}",
            extra={
                'trade_type': 'signal',
                'symbol': symbol,
                'action': action,
                'price': price,
                'stop_loss': stop_loss,
                'take_profit': take_profit,
                'risk_reward': risk_reward,
                'confidence': confidence
            }
        )
    
    def log_backtest_results(self, results: Dict[str, Any]):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–∞"""
        self.logger.info(
            f"üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞:\n"
            f"   - –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {results.get('total_return', 0):.2%}\n"
            f"   - –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞: {results.get('sharpe_ratio', 0):.2f}\n"
            f"   - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {results.get('max_drawdown', 0):.2%}\n"
            f"   - Win Rate: {results.get('win_rate', 0):.2%}\n"
            f"   - Profit Factor: {results.get('profit_factor', 0):.2f}",
            extra={
                'log_type': 'backtest_results',
                'results': results
            }
        )
    
    def log_error(self, error: Exception, context: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        self.logger.error(
            f"‚ùå –û—à–∏–±–∫–∞ –≤ {context}: {type(error).__name__}: {str(error)}",
            exc_info=True,
            extra={
                'error_type': type(error).__name__,
                'error_context': context
            }
        )
    
    def log_data_info(self, symbol: str, records: int, date_range: tuple):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞–Ω–Ω—ã—Ö"""
        self.logger.info(
            f"üìä –î–∞–Ω–Ω—ã–µ {symbol}: {records:,} –∑–∞–ø–∏—Å–µ–π | "
            f"–ü–µ—Ä–∏–æ–¥: {date_range[0]} - {date_range[1]}",
            extra={
                'log_type': 'data_info',
                'symbol': symbol,
                'records': records,
                'start_date': str(date_range[0]),
                'end_date': str(date_range[1])
            }
        )
    
    def log_feature_importance(self, features: Dict[str, float], top_n: int = 10):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        sorted_features = sorted(features.items(), key=lambda x: x[1], reverse=True)[:top_n]
        
        features_str = "\n".join([f"     {i+1}. {name}: {score:.4f}" 
                                  for i, (name, score) in enumerate(sorted_features)])
        
        self.logger.info(
            f"üîç –¢–æ–ø-{top_n} –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:\n{features_str}",
            extra={
                'log_type': 'feature_importance',
                'features': dict(sorted_features)
            }
        )
    
    def debug(self, message: str, **kwargs):
        """Debug —É—Ä–æ–≤–µ–Ω—å"""
        self.logger.debug(message, extra=kwargs)
    
    def info(self, message: str, **kwargs):
        """Info —É—Ä–æ–≤–µ–Ω—å"""
        self.logger.info(message, extra=kwargs)
    
    def warning(self, message: str, **kwargs):
        """Warning —É—Ä–æ–≤–µ–Ω—å"""
        self.logger.warning(message, extra=kwargs)
    
    def error(self, message: str, exc_info=None, **kwargs):
        """Error —É—Ä–æ–≤–µ–Ω—å"""
        if exc_info is not None:
            self.logger.error(message, exc_info=exc_info, extra=kwargs)
        else:
            self.logger.error(message, extra=kwargs)
    
    def critical(self, message: str, **kwargs):
        """Critical —É—Ä–æ–≤–µ–Ω—å"""
        self.logger.critical(message, extra=kwargs)


def get_logger(name: str, is_subprocess: bool = False) -> TradingLogger:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞"""
    return TradingLogger(name, is_subprocess=is_subprocess)


def setup_logging(config: Dict[str, Any] = None) -> None:
    """–ì–ª–æ–±–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if config is None:
        config = {
            'logging': {
                'level': 'INFO',
                'handlers': ['console', 'file'],
                'log_dir': 'experiments/logs'
            }
        }
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
    log_dir = Path(config['logging']['log_dir'])
    log_dir.mkdir(parents=True, exist_ok=True)
    
    # –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=config['logging']['level'],
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )


def log_execution_time(logger: TradingLogger):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    def decorator(func):
        def wrapper(*args, **kwargs):
            start_time = datetime.now()
            logger.debug(f"–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {func.__name__}")
            
            try:
                result = func(*args, **kwargs)
                duration = (datetime.now() - start_time).total_seconds()
                logger.debug(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ {func.__name__} –∑–∞ {duration:.2f}—Å")
                return result
            except Exception as e:
                logger.log_error(e, context=func.__name__)
                raise
        
        return wrapper
    return decorator
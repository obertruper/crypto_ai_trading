"""
–í–∞–ª–∏–¥–∞—Ç–æ—Ä —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
"""

import pandas as pd
import numpy as np
from typing import Dict, List, Tuple, Optional
from utils.logger import get_logger

class IndicatorValidator:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    
    def __init__(self):
        self.logger = get_logger("IndicatorValidator")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        self.critical_ranges = {
            # –û—Å—Ü–∏–ª–ª—è—Ç–æ—Ä—ã [0, 100]
            'rsi': (0, 100, "RSI –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0, 100]"),
            'stoch_k': (0, 100, "Stochastic %K –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0, 100]"),
            'stoch_d': (0, 100, "Stochastic %D –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0, 100]"),
            'adx': (0, 100, "ADX –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0, 100]"),
            'adx_pos': (0, 100, "ADX +DI –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0, 100]"),
            'adx_neg': (0, 100, "ADX -DI –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0, 100]"),
            
            # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∏ –ø–æ–∑–∏—Ü–∏–∏ [0, 1]
            'toxicity': (0, 1, "Toxicity –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0, 1]"),
            'bb_position': (0, 1, "BB Position –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0, 1]"),
            'close_position': (0, 1, "Close Position –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0, 1]"),
            'psar_trend': (0, 1, "PSAR Trend –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0, 1]"),
            
            # –ë–∏–Ω–∞—Ä–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã [0, 1]
            'rsi_oversold': (0, 1, "RSI Oversold –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0, 1]"),
            'rsi_overbought': (0, 1, "RSI Overbought –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0, 1]"),
        }
        
        # –î–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π (–æ–±—ã—á–Ω–æ –±–ª–∏–∑–∫–æ –∫ 1.0)
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        self.ratio_ranges = {
            'close_vwap_ratio': (0.5, 2.0, "Close/VWAP ratio –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0.5, 2.0]"),
            'close_open_ratio': (0.7, 1.3, "Close/Open ratio –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0.7, 1.3]"),  # ¬±30% –¥–≤–∏–∂–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ
            'high_low_ratio': (1.0, 2.0, "High/Low ratio –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [1.0, 2.0]"),  # –í–æ–ª–∞—Ç–∏–ª—å–Ω—ã–µ –¥–Ω–∏ –º–æ–≥—É—Ç –∏–º–µ—Ç—å –±–æ–ª—å—à–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
        }
        
        # –†–∞–∑—É–º–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π (%)
        self.return_ranges = {
            'returns': (-50, 50, "Returns –Ω–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–µ–≤—ã—à–∞—Ç—å ¬±50% –¥–ª—è 15-–º–∏–Ω—É—Ç–Ω—ã—Ö —Å–≤–µ—á–µ–π"),
        }
    
    def validate_dataframe(self, df: pd.DataFrame, strict: bool = True) -> Dict[str, List[str]]:
        """
        –ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è DataFrame —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
        
        Args:
            df: DataFrame –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            strict: –°—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º (–æ—à–∏–±–∫–∏ –ø—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        results = {
            'errors': [],
            'warnings': [],
            'info': [],
            'statistics': {}
        }
        
        self.logger.info("üîç –ù–∞—á–∞–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        for indicator, (min_val, max_val, message) in self.critical_ranges.items():
            if indicator in df.columns:
                result = self._check_range(df, indicator, min_val, max_val, message)
                if result['status'] == 'error':
                    results['errors'].extend(result['messages'])
                elif result['status'] == 'warning':
                    results['warnings'].extend(result['messages'])
                else:
                    results['info'].extend(result['messages'])
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                results['statistics'][indicator] = result['stats']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π
        for ratio, (min_val, max_val, message) in self.ratio_ranges.items():
            if ratio in df.columns:
                result = self._check_range(df, ratio, min_val, max_val, message, tolerance=0.1)
                if result['status'] == 'warning':
                    results['warnings'].extend(result['messages'])
                else:
                    results['info'].extend(result['messages'])
                
                results['statistics'][ratio] = result['stats']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π
        for return_col, (min_val, max_val, message) in self.return_ranges.items():
            if return_col in df.columns:
                result = self._check_range(df, return_col, min_val, max_val, message, tolerance=0.05)
                if result['status'] == 'warning':
                    results['warnings'].extend(result['messages'])
                else:
                    results['info'].extend(result['messages'])
                
                results['statistics'][return_col] = result['stats']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        self._check_normalization_signs(df, results)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        self._check_extreme_values(df, results)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self._log_results(results)
        
        # –í —Å—Ç—Ä–æ–≥–æ–º —Ä–µ–∂–∏–º–µ –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        if strict and results['errors']:
            raise ValueError(f"–ù–∞–π–¥–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞—Ö: {results['errors']}")
        
        return results
    
    def _check_range(self, df: pd.DataFrame, column: str, min_val: float, max_val: float, 
                    message: str, tolerance: float = 0.01) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞"""
        
        stats = df[column].describe()
        actual_min = stats['min']
        actual_max = stats['max']
        actual_mean = stats['mean']
        actual_std = stats['std']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        status = 'ok'
        messages = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
        if actual_min < min_val - tolerance or actual_max > max_val + tolerance:
            status = 'error'
            messages.append(f"‚ùå {column}: –ó–Ω–∞—á–µ–Ω–∏—è –≤—ã—Ö–æ–¥—è—Ç –∑–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω!")
            messages.append(f"   –û–∂–∏–¥–∞–µ—Ç—Å—è: [{min_val}, {max_val}], –§–∞–∫—Ç–∏—á–µ—Å–∫–∏: [{actual_min:.4f}, {actual_max:.4f}]")
            messages.append(f"   {message}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ (–¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤)
        elif column in self.critical_ranges:
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            if column == 'toxicity':
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: Toxicity = exp(-price_impact*20), —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç 0.3 –¥–æ 1.0
                if actual_mean < 0.3 or actual_mean > 1.0:
                    status = 'error'
                    messages.append(f"‚ùå {column}: –ó–Ω–∞—á–µ–Ω–∏–µ –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
                elif actual_mean < 0.6 or actual_mean > 0.9:
                    status = 'warning'
                    messages.append(f"‚ö†Ô∏è {column}: –ù–µ–æ–±—ã—á–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
                    messages.append(f"   Mean={actual_mean:.4f} (–æ–∂–∏–¥–∞–µ—Ç—Å—è ‚âà0.7-0.85)")
            elif column in ['rsi_oversold', 'rsi_overbought']:
                # –ë–∏–Ω–∞—Ä–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã - —Ä–µ–¥–∫–æ –∞–∫—Ç–∏–≤–Ω—ã, mean –æ–±—ã—á–Ω–æ –Ω–∏–∑–∫–∏–π
                if actual_mean > 0.3:  # –ï—Å–ª–∏ –±–æ–ª–µ–µ 30% –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–µ–Ω - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
                    status = 'warning'
                    messages.append(f"‚ö†Ô∏è {column}: –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –∞–∫—Ç–∏–≤–µ–Ω")
                    messages.append(f"   Mean={actual_mean:.4f} (–æ–∂–∏–¥–∞–µ—Ç—Å—è <0.3)")
            elif column == 'psar_trend':
                # –ë–∏–Ω–∞—Ä–Ω—ã–π —Ç—Ä–µ–Ω–¥, –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω
                if actual_mean < 0.3 or actual_mean > 0.7:
                    status = 'warning'
                    messages.append(f"‚ö†Ô∏è {column}: –ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–µ–Ω–¥")
                    messages.append(f"   Mean={actual_mean:.4f} (–æ–∂–∏–¥–∞–µ—Ç—Å—è 0.3-0.7)")
            elif column in ['bb_position', 'close_position']:
                # –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã, –æ–±—ã—á–Ω–æ –æ–∫–æ–ª–æ 0.5
                if actual_mean < 0.3 or actual_mean > 0.7:
                    status = 'warning'
                    messages.append(f"‚ö†Ô∏è {column}: –°–º–µ—â–µ–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è")
                    messages.append(f"   Mean={actual_mean:.4f} (–æ–∂–∏–¥–∞–µ—Ç—Å—è 0.3-0.7)")
            else:
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (RSI, Stochastic, ADX)
                expected_mean = (min_val + max_val) / 2
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ z-score –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é (mean‚âà0, std‚âà1)
                if abs(actual_mean) < 1.0 and 0.8 < actual_std < 1.2:
                    status = 'error'
                    messages.append(f"‚ùå {column}: –ü–û–î–û–ó–†–ï–ù–ò–ï –ù–ê Z-SCORE –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Æ!")
                    messages.append(f"   Mean={actual_mean:.4f}, Std={actual_std:.4f}")
                    messages.append(f"   –û–∂–∏–¥–∞–ª—Å—è mean‚âà{expected_mean:.1f} –¥–ª—è {column}")
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ min-max –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é (–≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ [0,1] –∫–æ–≥–¥–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ [0,100])
                elif column in ['rsi', 'stoch_k', 'stoch_d', 'adx', 'adx_pos', 'adx_neg']:
                    if actual_max < 2.0 and actual_min > -0.1:
                        status = 'error'
                        messages.append(f"‚ùå {column}: –ü–û–î–û–ó–†–ï–ù–ò–ï –ù–ê MIN-MAX –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Æ!")
                        messages.append(f"   Range=[{actual_min:.4f}, {actual_max:.4f}] –≤–º–µ—Å—Ç–æ [0, 100]")
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        elif actual_min < min_val or actual_max > max_val:
            status = 'warning'
            messages.append(f"‚ö†Ô∏è {column}: –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã")
            messages.append(f"   –î–∏–∞–ø–∞–∑–æ–Ω: [{actual_min:.4f}, {actual_max:.4f}], –û–∂–∏–¥–∞–µ—Ç—Å—è: [{min_val}, {max_val}]")
        
        else:
            messages.append(f"‚úÖ {column}: –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω [{actual_min:.4f}, {actual_max:.4f}]")
        
        return {
            'status': status,
            'messages': messages,
            'stats': {
                'min': actual_min,
                'max': actual_max, 
                'mean': actual_mean,
                'std': actual_std,
                'count': len(df[column])
            }
        }
    
    def _check_normalization_signs(self, df: pd.DataFrame, results: Dict):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –¥–∞–Ω–Ω—ã—Ö"""

        # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞–º–∏
        suspicious_cols = []

        ignore_cols = {
            'price_direction', 'volume_zscore', 'momentum_1h',
            'trend_1h_strength', 'future_return_3', 'future_return_4',
            'target_return_1h'
        }

        for col in df.select_dtypes(include=[np.number]).columns:
            if col in ['id', 'timestamp', 'datetime', 'open', 'high', 'low', 'close', 'volume']:
                continue
            if col in ignore_cols:
                continue

            stats = df[col].describe()
            
            # –ü—Ä–∏–∑–Ω–∞–∫–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏: mean‚âà0, std‚âà1
            if abs(stats['mean']) < 0.1 and 0.8 < stats['std'] < 1.2:
                suspicious_cols.append(f"{col} (mean={stats['mean']:.3f}, std={stats['std']:.3f})")
        
        if suspicious_cols:
            results['warnings'].append("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö:")
            for col in suspicious_cols[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                results['warnings'].append(f"   - {col}")
            
            if len(suspicious_cols) > 10:
                results['warnings'].append(f"   ... –∏ –µ—â–µ {len(suspicious_cols) - 10} –∫–æ–ª–æ–Ω–æ–∫")
    
    def _check_extreme_values(self, df: pd.DataFrame, results: Dict):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        
        # –ö–æ–ª–æ–Ω–∫–∏, –≥–¥–µ –±–æ–ª—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ø—É—Å—Ç–∏–º—ã
        price_cols = ['open', 'high', 'low', 'close', 'vwap', 'psar', 
                      'sma_', 'ema_', 'bb_high', 'bb_low', 'bb_middle',
                      'local_high_', 'local_low_', 'daily_high', 'daily_low',
                      'long_liquidation_price', 'short_liquidation_price', 
                      'long_optimal_entry_price', 'short_optimal_entry_price',
                      'btc_close', 'future_high_', 'future_low_']
        
        volume_cols = ['volume', 'turnover', 'directed_volume', 'obv', 'obv_ema',
                       'volume_cumsum_', 'liquidity_score']
        
        # –ö–æ–ª–æ–Ω–∫–∏ —Å ID –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
        system_cols = ['id', 'timestamp']
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏
        limited_indicators = {
            'rsi': 100, 'stoch_k': 100, 'stoch_d': 100, 'adx': 100,
            'toxicity': 1, 'bb_position': 1, 'close_position': 1
        }
        
        extreme_cols = []
        context_errors = []
        
        for col in df.select_dtypes(include=[np.number]).columns:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            if col in system_cols:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ —Ü–µ–Ω–æ–≤–æ–π
            is_price_col = any(price_prefix in col for price_prefix in price_cols)
            is_volume_col = any(volume_prefix in col for volume_prefix in volume_cols)
            
            max_abs = df[col].abs().max()
            
            # –î–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
            if col in limited_indicators:
                if max_abs > limited_indicators[col] * 1.1:  # 10% —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å
                    context_errors.append(f"{col}: max={max_abs:.2f}, –Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å <= {limited_indicators[col]}")
            
            # –î–ª—è —Ü–µ–Ω–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å
            elif is_price_col:
                # BTC –º–æ–∂–µ—Ç –±—ã—Ç—å 100k+, –¥—Ä—É–≥–∏–µ –º–æ–Ω–µ—Ç—ã –æ–±—ã—á–Ω–æ –º–µ–Ω—å—à–µ
                if 'btc' in col.lower() or df['symbol'].str.contains('BTC').any():
                    if max_abs > 200000:  # –ü—Ä–µ–¥–µ–ª –¥–ª—è BTC
                        extreme_cols.append(f"{col} (max_abs={max_abs:.2e}) - —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ –¥–∞–∂–µ –¥–ª—è BTC")
                else:
                    if max_abs > 100000:  # –ü—Ä–µ–¥–µ–ª –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–Ω–µ—Ç
                        extreme_cols.append(f"{col} (max_abs={max_abs:.2e}) - –Ω–µ—Ä–µ–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞")
            
            # –î–ª—è –æ–±—ä–µ–º–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ - –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ø—É—Å—Ç–∏–º—ã
            elif is_volume_col:
                if max_abs > 1e12:  # –¢—Ä–∏–ª–ª–∏–æ–Ω - —É–∂–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
                    extreme_cols.append(f"{col} (max_abs={max_abs:.2e}) - —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –æ–±—ä–µ–º")
            
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ - —Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞
            else:
                if max_abs > 1000:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ trend –∏–ª–∏ –¥—Ä—É–≥–∏–º –¥–æ–ø—É—Å—Ç–∏–º—ã–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
                    if 'trend' in col or 'range' in col or 'width' in col or 'atr' in col or 'macd' in col:
                        # –î–ª—è —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –±–æ–ª—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—ã
                        if max_abs > 10000:
                            extreme_cols.append(f"{col} (max_abs={max_abs:.2e})")
                    else:
                        extreme_cols.append(f"{col} (max_abs={max_abs:.2e})")
        
        # –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
        if context_errors:
            results['errors'].append("‚ùå –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤—ã—Ö–æ–¥—è—Ç –∑–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –ø—Ä–µ–¥–µ–ª—ã:")
            for error in context_errors:
                results['errors'].append(f"   - {error}")
        
        if extreme_cols:
            results['warnings'].append("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –±–æ–ª—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è (—Ç—Ä–µ–±—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏):")
            for col in extreme_cols[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                results['warnings'].append(f"   - {col}")
            if len(extreme_cols) > 10:
                results['warnings'].append(f"   ... –∏ –µ—â–µ {len(extreme_cols) - 10} –∫–æ–ª–æ–Ω–æ–∫")
            results['warnings'].append("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–æ–≤")
    
    def _log_results(self, results: Dict):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        
        total_errors = len(results['errors'])
        total_warnings = len(results['warnings'])
        total_checked = len(results['statistics'])
        
        if total_errors == 0 and total_warnings == 0:
            self.logger.info(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {total_checked} –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
        else:
            self.logger.warning(f"‚ö†Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {total_errors} –æ—à–∏–±–æ–∫, {total_warnings} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
        
        # –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫–∏
        for error in results['errors']:
            self.logger.error(error)
        
        # –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è  
        for warning in results['warnings']:
            self.logger.warning(warning)
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for info in results['info'][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            self.logger.info(info)
        
        if len(results['info']) > 5:
            self.logger.info(f"... –∏ –µ—â–µ {len(results['info']) - 5} –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
    
    def validate_batch(self, batch_data: np.ndarray, indicator_names: List[str]) -> bool:
        """
        –ë—ã—Å—Ç—Ä–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –±–∞—Ç—á–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è
        
        Args:
            batch_data: Numpy array —Å –¥–∞–Ω–Ω—ã–º–∏ –±–∞—Ç—á–∞
            indicator_names: –ù–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –∫–æ–ª–æ–Ω–æ–∫
            
        Returns:
            True –µ—Å–ª–∏ –±–∞—Ç—á –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, False –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
        """
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ NaN/Inf
        if np.isnan(batch_data).any() or np.isinf(batch_data).any():
            self.logger.warning("‚ö†Ô∏è –ë–∞—Ç—á —Å–æ–¥–µ—Ä–∂–∏—Ç NaN –∏–ª–∏ Inf –∑–Ω–∞—á–µ–Ω–∏—è!")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        max_abs = np.abs(batch_data).max()
        if max_abs > 1000:
            self.logger.warning(f"‚ö†Ô∏è –ë–∞—Ç—á —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: max_abs={max_abs:.2e}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ –±–∞—Ç—á–µ)
        for i, name in enumerate(indicator_names):
            if name in self.critical_ranges:
                min_val, max_val, _ = self.critical_ranges[name]
                col_data = batch_data[:, i] if batch_data.ndim > 1 else batch_data
                
                if col_data.min() < min_val - 0.1 or col_data.max() > max_val + 0.1:
                    self.logger.warning(f"‚ö†Ô∏è {name} –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –≤ –±–∞—Ç—á–µ: [{col_data.min():.4f}, {col_data.max():.4f}]")
                    return False
        
        return True
    
    def create_validation_report(self, df: pd.DataFrame) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        
        results = self.validate_dataframe(df, strict=False)
        
        report = []
        report.append("=" * 80)
        report.append("üìä –û–¢–ß–ï–¢ –í–ê–õ–ò–î–ê–¶–ò–ò –¢–ï–•–ù–ò–ß–ï–°–ö–ò–• –ò–ù–î–ò–ö–ê–¢–û–†–û–í")
        report.append("=" * 80)
        report.append(f"–î–∞—Ç–∞: {pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')}")
        report.append(f"–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {len(df):,} –∑–∞–ø–∏—Å–µ–π, {len(df.columns)} –∫–æ–ª–æ–Ω–æ–∫")
        report.append("")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        total_errors = len(results['errors'])
        total_warnings = len(results['warnings'])
        total_checked = len(results['statistics'])
        
        report.append("üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        report.append(f"   - –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {total_checked}")
        report.append(f"   - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏: {total_errors}")
        report.append(f"   - –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {total_warnings}")
        report.append("")
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º
        if results['statistics']:
            report.append("üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ò–ù–î–ò–ö–ê–¢–û–†–ê–ú:")
            for indicator, stats in results['statistics'].items():
                report.append(f"   {indicator}:")
                report.append(f"      Min: {stats['min']:.4f}, Max: {stats['max']:.4f}")
                report.append(f"      Mean: {stats['mean']:.4f}, Std: {stats['std']:.4f}")
                report.append(f"      –ó–∞–ø–∏—Å–µ–π: {stats['count']:,}")
            report.append("")
        
        # –û—à–∏–±–∫–∏
        if results['errors']:
            report.append("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò:")
            for error in results['errors']:
                report.append(f"   {error}")
            report.append("")
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        if results['warnings']:
            report.append("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
            for warning in results['warnings']:
                report.append(f"   {warning}")
            report.append("")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        report.append("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if total_errors > 0:
            report.append("   1. –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π")
            report.append("   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é _normalize_features() –≤ feature_engineering.py")
            report.append("   3. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏")
        elif total_warnings > 0:
            report.append("   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            report.append("   2. –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
        else:
            report.append("   ‚úÖ –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –∫ –æ–±—É—á–µ–Ω–∏—é –º–æ–¥–µ–ª–∏!")
        
        report.append("")
        report.append("=" * 80)
        
        return "\n".join(report)


def validate_indicators_quick(df: pd.DataFrame) -> bool:
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    validator = IndicatorValidator()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    critical_indicators = ['rsi', 'stoch_k', 'stoch_d', 'adx', 'toxicity']
    
    for indicator in critical_indicators:
        if indicator in df.columns:
            stats = df[indicator].describe()
            
            # RSI, Stochastic, ADX –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ [0, 100]
            if indicator in ['rsi', 'stoch_k', 'stoch_d', 'adx']:
                if stats['min'] < -1 or stats['max'] > 101:
                    print(f"‚ùå {indicator}: –≤—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã [0, 100]")
                    return False
                if abs(stats['mean']) < 1 and stats['std'] < 2:
                    print(f"‚ùå {indicator}: –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é (mean‚âà0, std‚âà1)")
                    return False
            
            # Toxicity –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ [0, 1]
            elif indicator == 'toxicity':
                if stats['min'] < -0.1 or stats['max'] > 1.1:
                    print(f"‚ùå {indicator}: –≤—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã [0, 1]")
                    return False
    
    print("‚úÖ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–∞")
    return True
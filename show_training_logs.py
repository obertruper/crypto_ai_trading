#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è
"""

import os
import time
import subprocess
from pathlib import Path
from datetime import datetime
from rich.console import Console
from rich.live import Live
from rich.panel import Panel
from rich.table import Table
from rich.syntax import Syntax

console = Console()

def find_training_logs():
    """–ù–∞–π—Ç–∏ –≤—Å–µ —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ–±—É—á–µ–Ω–∏–µ–º"""
    log_files = []
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤
    log_dirs = [
        Path("logs"),
        Path("experiments/logs"),
        Path("models_saved"),
        Path(".")
    ]
    
    for log_dir in log_dirs:
        if log_dir.exists():
            # –ò—â–µ–º –≤—Å–µ .log —Ñ–∞–π–ª—ã
            for log_file in log_dir.rglob("*.log"):
                if 'venv' not in str(log_file):
                    stat = log_file.stat()
                    log_files.append({
                        'path': log_file,
                        'size': stat.st_size,
                        'modified': datetime.fromtimestamp(stat.st_mtime)
                    })
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    log_files.sort(key=lambda x: x['modified'], reverse=True)
    return log_files

def get_process_info():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö –æ–±—É—á–µ–Ω–∏—è"""
    try:
        result = subprocess.run(
            ["ps", "aux"], 
            capture_output=True, 
            text=True
        )
        
        processes = []
        for line in result.stdout.split('\n'):
            if 'python main.py' in line and 'grep' not in line:
                parts = line.split()
                if len(parts) >= 11:
                    processes.append({
                        'pid': parts[1],
                        'cpu': parts[2],
                        'mem': parts[3],
                        'time': parts[9],
                        'cmd': ' '.join(parts[10:])
                    })
        
        return processes
    except:
        return []

def tail_file(file_path, lines=50):
    """–ß–∏—Ç–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ñ–∞–π–ª–∞"""
    try:
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            content = f.readlines()
            return content[-lines:]
    except:
        return []

def create_logs_table(log_files):
    """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å —Ñ–∞–π–ª–∞–º–∏ –ª–æ–≥–æ–≤"""
    table = Table(title="üìÅ –§–∞–π–ª—ã –ª–æ–≥–æ–≤")
    table.add_column("‚Ññ", style="cyan")
    table.add_column("–§–∞–π–ª", style="green")
    table.add_column("–†–∞–∑–º–µ—Ä", style="yellow")
    table.add_column("–ò–∑–º–µ–Ω–µ–Ω", style="blue")
    
    for i, log in enumerate(log_files[:10]):
        size_mb = log['size'] / 1024 / 1024
        table.add_row(
            str(i + 1),
            str(log['path']),
            f"{size_mb:.2f} MB",
            log['modified'].strftime("%Y-%m-%d %H:%M:%S")
        )
    
    return table

def create_process_table(processes):
    """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
    table = Table(title="‚öôÔ∏è –ü—Ä–æ—Ü–µ—Å—Å—ã –æ–±—É—á–µ–Ω–∏—è")
    table.add_column("PID", style="cyan")
    table.add_column("CPU %", style="green")
    table.add_column("MEM %", style="yellow")
    table.add_column("–í—Ä–µ–º—è", style="blue")
    table.add_column("–ö–æ–º–∞–Ω–¥–∞", style="white")
    
    for proc in processes[:5]:
        table.add_row(
            proc['pid'],
            proc['cpu'],
            proc['mem'],
            proc['time'],
            proc['cmd'][:50] + "..."
        )
    
    return table

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    console.print("[bold green]üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –æ–±—É—á–µ–Ω–∏—è[/bold green]\n")
    
    # –ù–∞—Ö–æ–¥–∏–º –ª–æ–≥–∏
    log_files = find_training_logs()
    if not log_files:
        console.print("[red]‚ùå –§–∞–π–ª—ã –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã[/red]")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ª–æ–≥–æ–≤
    console.print(create_logs_table(log_files))
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
    processes = get_process_info()
    if processes:
        console.print("\n")
        console.print(create_process_table(processes))
    
    # –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    console.print("\n[yellow]–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–∏–ª–∏ Enter –¥–ª—è –∞–≤—Ç–æ-–≤—ã–±–æ—Ä–∞):[/yellow]")
    choice = input("–í—ã–±–æ—Ä: ").strip()
    
    if choice.isdigit() and 1 <= int(choice) <= len(log_files):
        selected_log = log_files[int(choice) - 1]['path']
    else:
        selected_log = log_files[0]['path']
    
    console.print(f"\n[cyan]üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä: {selected_log}[/cyan]")
    
    # Live –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    with Live(refresh_per_second=0.5) as live:
        while True:
            try:
                # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
                lines = tail_file(selected_log, 100)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                content = ''.join(lines)
                
                # –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤–∞–∂–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                highlighted = content
                highlighted = highlighted.replace("ERROR", "[red]ERROR[/red]")
                highlighted = highlighted.replace("WARNING", "[yellow]WARNING[/yellow]")
                highlighted = highlighted.replace("INFO", "[green]INFO[/green]")
                highlighted = highlighted.replace("train_loss", "[cyan]train_loss[/cyan]")
                highlighted = highlighted.replace("val_loss", "[magenta]val_loss[/magenta]")
                highlighted = highlighted.replace("‚úÖ", "[green]‚úÖ[/green]")
                highlighted = highlighted.replace("üìä", "[blue]üìä[/blue]")
                
                panel = Panel(
                    highlighted,
                    title=f"üìú {selected_log} (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫)",
                    border_style="blue"
                )
                
                live.update(panel)
                time.sleep(2)
                
            except KeyboardInterrupt:
                break
    
    console.print("\n[yellow]‚ú® –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω[/yellow]")

if __name__ == "__main__":
    main()
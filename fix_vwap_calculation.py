#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞—Å—á–µ—Ç–æ–º VWAP
"""

import pandas as pd
import numpy as np
from pathlib import Path
import yaml
from sqlalchemy import create_engine, text

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
with open('config/config.yaml', 'r') as f:
    config = yaml.safe_load(f)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
db_config = config['database']
engine = create_engine(
    f"postgresql://{db_config['user']}:{db_config['password']}@"
    f"{db_config['host']}:{db_config['port']}/{db_config['database']}"
)

print("üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã —Å VWAP...")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
query = """
SELECT symbol, datetime, open, high, low, close, volume, turnover
FROM raw_market_data
WHERE symbol IN ('BTCUSDT', 'ETHUSDT', 'SOLUSDT')
ORDER BY symbol, datetime DESC
LIMIT 10000
"""

df = pd.read_sql(query, engine)
print(f"\nüìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")

# –ê–Ω–∞–ª–∏–∑ volume –∏ turnover
print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ volume:")
print(f"Min: {df['volume'].min():.10f}")
print(f"Max: {df['volume'].max():.2f}")
print(f"Median: {df['volume'].median():.2f}")
print(f"–ù—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {(df['volume'] == 0).sum()}")
print(f"–û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏—Ö (< 0.001): {(df['volume'] < 0.001).sum()}")

print("\nüí∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ turnover:")
print(f"Min: {df['turnover'].min():.10f}")
print(f"Max: {df['turnover'].max():.2f}")
print(f"Median: {df['turnover'].median():.2f}")
print(f"–ù—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {(df['turnover'] == 0).sum()}")

# –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ VWAP
print("\nüî¥ –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ VWAP:")

def old_safe_divide(numerator, denominator, fill_value=0.0, max_value=1000.0):
    """–°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ —Å min_denominator=1e-4"""
    min_denominator = 1e-4
    safe_denominator = denominator.copy()
    mask_small = (safe_denominator.abs() < min_denominator)
    safe_denominator[mask_small] = np.sign(safe_denominator[mask_small]) * min_denominator
    safe_denominator[safe_denominator == 0] = min_denominator
    result = numerator / safe_denominator
    result = result.clip(lower=-max_value, upper=max_value)
    if isinstance(fill_value, pd.Series):
        inf_mask = np.isinf(result)
        result.loc[inf_mask] = fill_value.loc[inf_mask]
    else:
        result = result.replace([np.inf, -np.inf], fill_value)
    result = result.fillna(fill_value)
    return result

# –°—Ç–∞—Ä—ã–π —Ä–∞—Å—á–µ—Ç
df['vwap_old'] = old_safe_divide(df['turnover'], df['volume'], fill_value=df['close'])
df['close_vwap_ratio_old'] = old_safe_divide(df['close'], df['vwap_old'], fill_value=1.0)

print(f"VWAP min: {df['vwap_old'].min():.10f}")
print(f"VWAP max: {df['vwap_old'].max():.2f}")
print(f"Close/VWAP ratio min: {df['close_vwap_ratio_old'].min():.2f}")
print(f"Close/VWAP ratio max: {df['close_vwap_ratio_old'].max():.2f}")

# –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–∞–ø–∏—Å–∏
problematic = df[df['close_vwap_ratio_old'] > 10]
print(f"\n–ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π (ratio > 10): {len(problematic)}")
if len(problematic) > 0:
    print("\n–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–±–ª–µ–º–Ω–æ–π –∑–∞–ø–∏—Å–∏:")
    row = problematic.iloc[0]
    print(f"Symbol: {row['symbol']}")
    print(f"Datetime: {row['datetime']}")
    print(f"Close: {row['close']:.2f}")
    print(f"Volume: {row['volume']:.10f}")
    print(f"Turnover: {row['turnover']:.2f}")
    print(f"VWAP: {row['vwap_old']:.10f}")
    print(f"Close/VWAP ratio: {row['close_vwap_ratio_old']:.2f}")

# –ù–æ–≤—ã–π —É–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
print("\n‚úÖ –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ VWAP:")

def new_safe_divide(numerator, denominator, fill_value=0.0, max_value=1000.0):
    """–ù–æ–≤—ã–π –º–µ—Ç–æ–¥ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    # –î–ª—è VWAP –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Ä–∞–∑—É–º–Ω—ã–π –º–∏–Ω–∏–º—É–º
    min_denominator = 0.01  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 1e-4 –¥–æ 0.01
    
    safe_denominator = denominator.copy()
    
    # –ó–∞–º–µ–Ω—è–µ–º –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    mask_small = (safe_denominator.abs() < min_denominator)
    safe_denominator[mask_small] = min_denominator
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–ª–µ–Ω–∏–µ
    result = numerator / safe_denominator
    
    # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
    result = result.clip(lower=-max_value, upper=max_value)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ inf –∏ nan
    if isinstance(fill_value, pd.Series):
        inf_mask = np.isinf(result) | np.isnan(result)
        result.loc[inf_mask] = fill_value.loc[inf_mask]
    else:
        result = result.replace([np.inf, -np.inf, np.nan], fill_value)
    
    return result

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç VWAP —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
def calculate_vwap(df):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç VWAP"""
    # –ë–∞–∑–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç
    vwap = new_safe_divide(df['turnover'], df['volume'], fill_value=df['close'])
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: VWAP –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç close
    # –ï—Å–ª–∏ VWAP —Å–ª–∏—à–∫–æ–º –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç close, –∏—Å–ø–æ–ª—å–∑—É–µ–º close
    mask_invalid = (vwap < df['close'] * 0.5) | (vwap > df['close'] * 2.0)
    vwap[mask_invalid] = df['close'][mask_invalid]
    
    return vwap

# –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç
df['vwap_new'] = calculate_vwap(df)
df['close_vwap_ratio_new'] = new_safe_divide(
    df['close'], 
    df['vwap_new'], 
    fill_value=1.0,
    max_value=2.0  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º ratio –º–∞–∫—Å–∏–º—É–º 2x
)

print(f"VWAP min: {df['vwap_new'].min():.2f}")
print(f"VWAP max: {df['vwap_new'].max():.2f}")
print(f"Close/VWAP ratio min: {df['close_vwap_ratio_new'].min():.2f}")
print(f"Close/VWAP ratio max: {df['close_vwap_ratio_new'].max():.2f}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
problematic_new = df[df['close_vwap_ratio_new'] > 2]
print(f"\n–ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {len(problematic_new)}")

# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
print("\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π close_vwap_ratio:")
print("\n–°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ - –∫–≤–∞–Ω—Ç–∏–ª–∏:")
print(df['close_vwap_ratio_old'].quantile([0.01, 0.25, 0.5, 0.75, 0.99, 0.999]))
print("\n–ù–æ–≤—ã–π –º–µ—Ç–æ–¥ - –∫–≤–∞–Ω—Ç–∏–ª–∏:")
print(df['close_vwap_ratio_new'].quantile([0.01, 0.25, 0.5, 0.75, 0.99, 0.999]))

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
print("1. –û–±–Ω–æ–≤–∏—Ç—å safe_divide –≤ feature_engineering.py - —É–≤–µ–ª–∏—á–∏—Ç—å min_denominator –¥–æ 0.01")
print("2. –î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é calculate_vwap —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏")
print("3. –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å close_vwap_ratio –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º 2.0")
print("4. –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∫—ç—à –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
analysis_results = {
    'old_method': {
        'min': float(df['close_vwap_ratio_old'].min()),
        'max': float(df['close_vwap_ratio_old'].max()),
        'problematic_count': len(problematic)
    },
    'new_method': {
        'min': float(df['close_vwap_ratio_new'].min()),
        'max': float(df['close_vwap_ratio_new'].max()),
        'problematic_count': len(problematic_new)
    }
}

print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
print(f"   –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥: {len(problematic)} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
print(f"   –ù–æ–≤—ã–π –º–µ—Ç–æ–¥: {len(problematic_new)} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
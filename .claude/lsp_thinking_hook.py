#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ö—É–∫ –¥–ª—è Claude Code
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç LSP —Å Sequential Thinking
"""

import sys
import json
from pathlib import Path
from typing import Dict, Any, List

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ LSP —Å–µ—Ä–≤–µ—Ä—É
sys.path.insert(0, str(Path(__file__).parent.parent / "lsp_server"))

from mcp_lsp_bridge import get_bridge
from thinking_lsp_integration import analyze_with_thinking
import asyncio

class ClaudeThinkingHook:
    """–•—É–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å –º—ã—à–ª–µ–Ω–∏–µ–º"""
    
    def __init__(self):
        self.bridge = get_bridge()
        self.last_analyzed_file = None
        self.analysis_cache = {}
        
    def before_file_operation(self, file_path: str, operation: str) -> Dict[str, Any]:
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –ª—é–±–æ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π —Å —Ñ–∞–π–ª–æ–º"""
        print(f"\nüß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –æ–ø–µ—Ä–∞—Ü–∏–µ–π '{operation}': {file_path}\n")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ LSP
        context = self.bridge.get_file_context(file_path)
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –≤–∞–∂–Ω—ã–π, –¥–µ–ª–∞–µ–º –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑
        if self._is_important_file(file_path):
            print("üìä –í—ã–ø–æ–ª–Ω—è—é –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º –º—ã—à–ª–µ–Ω–∏–µ–º...\n")
            analysis = asyncio.run(analyze_with_thinking(file_path))
            self.analysis_cache[file_path] = analysis
            
            # –í—ã–≤–æ–¥–∏–º –∫–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã
            print("üîç –ö–ª—é—á–µ–≤—ã–µ –Ω–∞—Ö–æ–¥–∫–∏:")
            for finding in analysis["final_analysis"]["key_findings"][:3]:
                print(f"  ‚Ä¢ {finding}")
                
            print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            for rec in analysis["final_analysis"]["recommendations"]:
                print(f"  ‚Ä¢ {rec}")
                
            print(f"\n‚ö†Ô∏è  –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {analysis['final_analysis']['risk_level']}")
            
        else:
            print("‚ÑπÔ∏è  –ë–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω")
            
        print("\n" + "="*50 + "\n")
        
        return {
            "context": context,
            "analysis": self.analysis_cache.get(file_path),
            "should_proceed": True
        }
        
    def after_file_operation(self, file_path: str, operation: str, success: bool):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ñ–∞–π–ª–æ–º"""
        if success:
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            change = self.bridge.track_file_change(Path(file_path))
            if change:
                print(f"‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ: {change.change_type}")
                
    def _is_important_file(self, file_path: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –≤–∞–∂–Ω—ã–º –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        path = Path(file_path)
        
        # –í–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
        important_files = [
            "config.yaml",
            "main.py",
            "patchtst.py",
            "trainer.py",
            "data_loader.py"
        ]
        
        # –í–∞–∂–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        important_dirs = ["models", "trading", "training"]
        
        return (
            path.name in important_files or
            any(dir_name in path.parts for dir_name in important_dirs)
        )

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ö—É–∫–∞
_hook = ClaudeThinkingHook()

def claude_before_edit(file_path: str) -> Dict[str, Any]:
    """–•—É–∫ –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ñ–∞–π–ª–∞"""
    return _hook.before_file_operation(file_path, "edit")

def claude_before_read(file_path: str) -> Dict[str, Any]:
    """–•—É–∫ –ø–µ—Ä–µ–¥ —á—Ç–µ–Ω–∏–µ–º —Ñ–∞–π–ª–∞"""
    return _hook.before_file_operation(file_path, "read")

def claude_after_edit(file_path: str, success: bool):
    """–•—É–∫ –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""
    _hook.after_file_operation(file_path, "edit", success)

def claude_get_project_context() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞"""
    summary = _hook.bridge.get_project_summary()
    recent_changes = _hook.bridge.get_recent_changes(5)
    
    return {
        "project_summary": summary,
        "recent_changes": recent_changes,
        "thinking_enabled": True,
        "lsp_active": True
    }

if __name__ == "__main__":
    # –¢–µ—Å—Ç —Ö—É–∫–∞
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö—É–∫–∞ Claude Thinking\n")
    
    test_file = "/Users/ruslan/PycharmProjects/LLM TRANSFORM/crypto_ai_trading/config/config.yaml"
    
    # –¢–µ—Å—Ç –ø–µ—Ä–µ–¥ —á—Ç–µ–Ω–∏–µ–º
    result = claude_before_read(test_file)
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: {result['should_proceed']}")
    
    # –¢–µ—Å—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞
    project = claude_get_project_context()
    print(f"\n–°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞: LSP={project['lsp_active']}, Thinking={project['thinking_enabled']}")
"""
–ü—Ä–æ—Å—Ç–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
"""

import psycopg2
import pandas as pd
import yaml
import os
from pathlib import Path

def get_db_config():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ë–î –∏–∑ config.yaml"""
    config_path = Path(__file__).parent / "config" / "config.yaml"
    with open(config_path, 'r') as f:
        config = yaml.safe_load(f)
    
    db_config = config['database']
    
    # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    return {
        'host': os.getenv('DB_HOST', 'localhost'),
        'port': int(os.getenv('DB_PORT', '5555')),
        'database': os.getenv('DB_NAME', 'crypto_trading'),
        'user': os.getenv('DB_USER', 'ruslan'),
        'password': os.getenv('DB_PASSWORD', 'ruslan')
    }

def test_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
    db_config = get_db_config()
    
    try:
        # –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ psycopg2
        conn = psycopg2.connect(**db_config)
        cursor = conn.cursor()
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ!")
        print(f"   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_config['database']}")
        print(f"   –•–æ—Å—Ç: {db_config['host']}:{db_config['port']}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
            ORDER BY table_name
        """)
        tables = cursor.fetchall()
        
        print("\nüìã –¢–∞–±–ª–∏—Ü—ã –≤ –ë–î:")
        for table in tables:
            print(f"   - {table[0]}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ raw_market_data
        cursor.execute("""
            SELECT 
                COUNT(*) as total,
                COUNT(DISTINCT symbol) as symbols,
                MIN(datetime) as min_date,
                MAX(datetime) as max_date
            FROM raw_market_data
        """)
        stats = cursor.fetchone()
        
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ raw_market_data:")
        print(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {stats[0]:,}")
        print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {stats[1]}")
        print(f"   –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {stats[2]} - {stats[3]}")
        
        # –ü—Ä–∏–º–µ—Ä—ã —Å–∏–º–≤–æ–ª–æ–≤
        cursor.execute("""
            SELECT DISTINCT symbol 
            FROM raw_market_data 
            ORDER BY symbol 
            LIMIT 10
        """)
        symbols = cursor.fetchall()
        
        print("\nü™ô –ü—Ä–∏–º–µ—Ä—ã —Å–∏–º–≤–æ–ª–æ–≤:")
        for sym in symbols:
            print(f"   - {sym[0]}")
        
        cursor.close()
        conn.close()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def load_data_simple(symbols=None, days=30):
    """–ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
    db_config = get_db_config()
    conn = psycopg2.connect(**db_config)
    
    if symbols is None:
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–∏–º–≤–æ–ª–æ–≤
        query = "SELECT DISTINCT symbol FROM raw_market_data ORDER BY symbol LIMIT 5"
        symbols_df = pd.read_sql(query, conn)
        symbols = symbols_df['symbol'].tolist()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    query = f"""
    SELECT * 
    FROM raw_market_data
    WHERE symbol = ANY(ARRAY{symbols})
    AND datetime >= NOW() - INTERVAL '{days} days'
    ORDER BY symbol, datetime
    """
    
    print(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbols} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π...")
    df = pd.read_sql(query, conn)
    conn.close()
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df):,} –∑–∞–ø–∏—Å–µ–π")
    return df

if __name__ == "__main__":
    test_connection()
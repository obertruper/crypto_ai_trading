#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Crypto AI Trading System
"""

import sys
import os
import subprocess
import yaml
import time
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Optional
import warnings
warnings.filterwarnings('ignore')

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é
from rich.console import Console
from rich.table import Table
from rich.prompt import Prompt, Confirm, IntPrompt, FloatPrompt
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich import print as rprint
from rich.markdown import Markdown

console = Console()

class CryptoTradingMenu:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π"""
    
    def __init__(self):
        self.console = Console()
        self.config_path = Path("config/config.yaml")
        self.config = self.load_config()
        
    def load_config(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        with open(self.config_path, 'r', encoding='utf-8') as f:
            return yaml.safe_load(f)
    
    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        with open(self.config_path, 'w', encoding='utf-8') as f:
            yaml.dump(self.config, f, default_flow_style=False, allow_unicode=True)
    
    def display_main_menu(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        self.console.clear()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.console.print(Panel.fit(
            "[bold cyan]üöÄ Crypto AI Trading System[/bold cyan]\n"
            "[dim]–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ[/dim]",
            border_style="blue"
        ))
        
        # –û–ø—Ü–∏–∏ –º–µ–Ω—é
        menu_options = Table(show_header=False, box=None)
        menu_options.add_column("Option", style="cyan", width=3)
        menu_options.add_column("Description", style="white")
        
        menu_options.add_row("1", "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏")
        menu_options.add_row("2", "üß† –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π")
        menu_options.add_row("3", "üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ª–æ–≥–∏")
        menu_options.add_row("4", "‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
        menu_options.add_row("5", "üîß –£—Ç–∏–ª–∏—Ç—ã –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
        menu_options.add_row("6", "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
        menu_options.add_row("7", "üöÄ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫")
        menu_options.add_row("0", "‚ùå –í—ã—Ö–æ–¥")
        
        self.console.print(menu_options)
        
    def data_management_menu(self):
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏"""
        while True:
            self.console.clear()
            self.console.print(Panel("üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏", style="cyan"))
            
            options = Table(show_header=False, box=None)
            options.add_column("Option", style="cyan", width=3)
            options.add_column("Description", style="white")
            
            options.add_row("1", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î")
            options.add_row("2", "–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î")
            options.add_row("3", "–°–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏")
            options.add_row("4", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω—ã–º")
            options.add_row("5", "–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à")
            options.add_row("0", "–ù–∞–∑–∞–¥")
            
            self.console.print(options)
            
            choice = Prompt.ask("\n[bold cyan]–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é[/bold cyan]")
            
            if choice == "1":
                self.check_database_connection()
            elif choice == "2":
                self.load_data_from_db()
            elif choice == "3":
                self.create_features()
            elif choice == "4":
                self.show_data_statistics()
            elif choice == "5":
                self.clear_cache()
            elif choice == "0":
                break
    
    def training_menu(self):
        """–ú–µ–Ω—é –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π"""
        while True:
            self.console.clear()
            self.console.print(Panel("üß† –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π", style="cyan"))
            
            options = Table(show_header=False, box=None)
            options.add_column("Option", style="cyan", width=3)
            options.add_column("Description", style="white")
            
            options.add_row("1", "–ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ (demo)")
            options.add_row("2", "–ü–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ")
            options.add_row("3", "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ")
            options.add_row("4", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è")
            options.add_row("5", "–û–±—É—á–µ–Ω–∏–µ –Ω–∞ GPU (Vast.ai)")
            options.add_row("0", "–ù–∞–∑–∞–¥")
            
            self.console.print(options)
            
            choice = Prompt.ask("\n[bold cyan]–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é[/bold cyan]")
            
            if choice == "1":
                self.run_demo_training()
            elif choice == "2":
                self.run_full_training()
            elif choice == "3":
                self.resume_training()
            elif choice == "4":
                self.configure_training()
            elif choice == "5":
                self.run_gpu_training()
            elif choice == "0":
                break
    
    def monitoring_menu(self):
        """–ú–µ–Ω—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while True:
            self.console.clear()
            self.console.print(Panel("üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ª–æ–≥–∏", style="cyan"))
            
            options = Table(show_header=False, box=None)
            options.add_column("Option", style="cyan", width=3)
            options.add_column("Description", style="white")
            
            options.add_row("1", "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±—É—á–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
            options.add_row("2", "–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤")
            options.add_row("3", "TensorBoard")
            options.add_row("4", "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è")
            options.add_row("5", "–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏")
            options.add_row("0", "–ù–∞–∑–∞–¥")
            
            self.console.print(options)
            
            choice = Prompt.ask("\n[bold cyan]–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é[/bold cyan]")
            
            if choice == "1":
                self.monitor_training()
            elif choice == "2":
                self.view_logs()
            elif choice == "3":
                self.launch_tensorboard()
            elif choice == "4":
                self.show_training_results()
            elif choice == "5":
                self.clear_logs()
            elif choice == "0":
                break
    
    def settings_menu(self):
        """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        while True:
            self.console.clear()
            self.console.print(Panel("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã", style="cyan"))
            
            options = Table(show_header=False, box=None)
            options.add_column("Option", style="cyan", width=3)
            options.add_column("Description", style="white")
            
            options.add_row("1", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏")
            options.add_row("2", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
            options.add_row("3", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞")
            options.add_row("4", "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞")
            options.add_row("5", "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
            options.add_row("6", "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
            options.add_row("0", "–ù–∞–∑–∞–¥")
            
            self.console.print(options)
            
            choice = Prompt.ask("\n[bold cyan]–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é[/bold cyan]")
            
            if choice == "1":
                self.configure_model()
            elif choice == "2":
                self.configure_data()
            elif choice == "3":
                self.configure_risk_management()
            elif choice == "4":
                self.configure_backtesting()
            elif choice == "5":
                self.save_config()
                self.console.print("[green]‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞[/green]")
                time.sleep(1)
            elif choice == "6":
                self.config = self.load_config()
                self.console.print("[green]‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞[/green]")
                time.sleep(1)
            elif choice == "0":
                break
    
    def utilities_menu(self):
        """–ú–µ–Ω—é —É—Ç–∏–ª–∏—Ç"""
        while True:
            self.console.clear()
            self.console.print(Panel("üîß –£—Ç–∏–ª–∏—Ç—ã –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", style="cyan"))
            
            options = Table(show_header=False, box=None)
            options.add_column("Option", style="cyan", width=3)
            options.add_column("Description", style="white")
            
            options.add_row("1", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã")
            options.add_row("2", "–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
            options.add_row("3", "–ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
            options.add_row("4", "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤")
            options.add_row("5", "–≠–∫—Å–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏")
            options.add_row("0", "–ù–∞–∑–∞–¥")
            
            self.console.print(options)
            
            choice = Prompt.ask("\n[bold cyan]–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é[/bold cyan]")
            
            if choice == "1":
                self.check_available_symbols()
            elif choice == "2":
                self.validate_data()
            elif choice == "3":
                self.run_backtesting()
            elif choice == "4":
                self.generate_reports()
            elif choice == "5":
                self.export_model()
            elif choice == "0":
                break
    
    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π
    def check_database_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            transient=True,
        ) as progress:
            progress.add_task(description="–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...", total=None)
            
            try:
                result = subprocess.run(
                    ["python", "-c", """
import psycopg2
conn = psycopg2.connect(
    host='localhost',
    port=5555,
    database='crypto_trading',
    user='ruslan',
    password='ruslan'
)
cursor = conn.cursor()
cursor.execute('SELECT COUNT(*) FROM raw_market_data')
count = cursor.fetchone()[0]
print(f'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ó–∞–ø–∏—Å–µ–π –≤ –ë–î: {count:,}')
conn.close()
                    """],
                    capture_output=True,
                    text=True
                )
                
                if result.returncode == 0:
                    self.console.print(f"\n[green]{result.stdout.strip()}[/green]")
                else:
                    self.console.print(f"\n[red]‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {result.stderr}[/red]")
            except Exception as e:
                self.console.print(f"\n[red]‚ùå –û—à–∏–±–∫–∞: {e}[/red]")
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def load_data_from_db(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î"""
        symbols = self.config['data']['symbols']
        self.console.print(f"\n[cyan]–ë—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤[/cyan]")
        
        if Confirm.ask("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"):
            result = subprocess.run(
                ["python", "run_full_pipeline.py", "--mode", "data"],
                text=True
            )
            if result.returncode == 0:
                self.console.print("[green]‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã[/green]")
            else:
                self.console.print("[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö[/red]")
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def create_features(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        self.console.print("\n[cyan]–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...[/cyan]")
        
        if Confirm.ask("–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∫—ç—à –ø—Ä–∏–∑–Ω–∞–∫–æ–≤?"):
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à
            cache_file = Path("cache/features_cache.pkl")
            if cache_file.exists():
                cache_file.unlink()
                self.console.print("[yellow]–°—Ç–∞—Ä—ã–π –∫—ç—à —É–¥–∞–ª–µ–Ω[/yellow]")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            result = subprocess.run(
                ["python", "run_full_pipeline.py", "--mode", "data"],
                text=True
            )
            if result.returncode == 0:
                self.console.print("[green]‚úÖ –ü—Ä–∏–∑–Ω–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã[/green]")
            else:
                self.console.print("[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤[/red]")
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def show_data_statistics(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∞–Ω–Ω—ã–º"""
        try:
            result = subprocess.run(
                ["python", "-c", """
import pickle
import pandas as pd

try:
    with open('cache/features_cache.pkl', 'rb') as f:
        features = pickle.load(f)
    
    print(f'\\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö:')
    print(f'–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(features):,}')
    print(f'–ü–µ—Ä–∏–æ–¥: {features.datetime.min()} - {features.datetime.max()}')
    print(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(features.columns)}')
    
    print(f'\\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–∏–º–≤–æ–ª–∞–º:')
    for symbol, count in features.groupby('symbol').size().items():
        print(f'  {symbol}: {count:,} –∑–∞–ø–∏—Å–µ–π')
    
    print(f'\\n–¶–µ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:')
    target_cols = [col for col in features.columns if col.startswith('future_return_')]
    for col in target_cols:
        print(f'  {col}: mean={features[col].mean():.4f}, std={features[col].std():.4f}')
except:
    print('‚ùå –ö—ç—à –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏.')
                """],
                capture_output=True,
                text=True
            )
            self.console.print(result.stdout)
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞: {e}[/red]")
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def clear_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"""
        cache_dir = Path("cache")
        if cache_dir.exists():
            files = list(cache_dir.glob("*.pkl"))
            if files:
                self.console.print(f"\n[yellow]–ù–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤ –∫—ç—à–∞[/yellow]")
                if Confirm.ask("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –∫—ç—à–∞?"):
                    for file in files:
                        file.unlink()
                    self.console.print("[green]‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω[/green]")
            else:
                self.console.print("[yellow]–ö—ç—à –ø—É—Å—Ç[/yellow]")
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def run_demo_training(self):
        """–ë—ã—Å—Ç—Ä–æ–µ –¥–µ–º–æ –æ–±—É—á–µ–Ω–∏–µ"""
        self.console.print("\n[cyan]–ó–∞–ø—É—Å–∫ –¥–µ–º–æ –æ–±—É—á–µ–Ω–∏—è (5 —ç–ø–æ—Ö)...[/cyan]")
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ –º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        original_epochs = self.config['model']['epochs']
        self.config['model']['epochs'] = 5
        self.save_config()
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
            process = subprocess.Popen(
                ["python", "run_full_pipeline.py", "--mode", "train"],
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True,
                bufsize=1
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            for line in iter(process.stdout.readline, ''):
                if line:
                    print(line.strip())
            
            process.wait()
            
            if process.returncode == 0:
                self.console.print("\n[green]‚úÖ –î–µ–º–æ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ[/green]")
            else:
                self.console.print("\n[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏[/red]")
        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            self.config['model']['epochs'] = original_epochs
            self.save_config()
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def run_full_training(self):
        """–ü–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"""
        self.console.print(f"\n[cyan]–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è ({self.config['model']['epochs']} —ç–ø–æ—Ö)...[/cyan]")
        
        if Confirm.ask("–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"):
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
            subprocess.Popen(
                ["python", "run_full_pipeline.py", "--mode", "train"],
                stdout=open("logs/training.log", "w"),
                stderr=subprocess.STDOUT
            )
            
            self.console.print("[green]‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ[/green]")
            self.console.print("[yellow]–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±—É—á–µ–Ω–∏—è' –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞[/yellow]")
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def monitor_training(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±—É—á–µ–Ω–∏—è"""
        self.console.print("\n[cyan]–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±—É—á–µ–Ω–∏—è...[/cyan]")
        
        try:
            subprocess.run(["python", "monitor_training.py"])
        except KeyboardInterrupt:
            self.console.print("\n[yellow]–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω[/yellow]")
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞: {e}[/red]")
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def view_logs(self):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"""
        log_dir = Path("experiments/logs")
        if log_dir.exists():
            log_files = sorted(log_dir.glob("*.log"), key=lambda x: x.stat().st_mtime, reverse=True)
            
            if log_files:
                self.console.print("\n[cyan]–î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–≥–∏:[/cyan]")
                for i, file in enumerate(log_files[:10], 1):
                    size = file.stat().st_size / 1024  # KB
                    mtime = datetime.fromtimestamp(file.stat().st_mtime).strftime("%Y-%m-%d %H:%M")
                    self.console.print(f"{i}. {file.name} ({size:.1f} KB, {mtime})")
                
                choice = IntPrompt.ask("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª (0 –¥–ª—è –æ—Ç–º–µ–Ω—ã)", default=0)
                
                if 0 < choice <= len(log_files[:10]):
                    log_file = log_files[choice - 1]
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
                    with open(log_file, 'r') as f:
                        lines = f.readlines()
                        last_lines = lines[-50:] if len(lines) > 50 else lines
                        
                        self.console.print(f"\n[cyan]–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ {log_file.name}:[/cyan]")
                        for line in last_lines:
                            print(line.rstrip())
            else:
                self.console.print("[yellow]–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã[/yellow]")
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def launch_tensorboard(self):
        """–ó–∞–ø—É—Å–∫ TensorBoard"""
        tb_dir = Path("experiments/runs")
        if tb_dir.exists():
            self.console.print("\n[cyan]–ó–∞–ø—É—Å–∫ TensorBoard...[/cyan]")
            self.console.print("[yellow]–û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:6006 –≤ –±—Ä–∞—É–∑–µ—Ä–µ[/yellow]")
            self.console.print("[yellow]–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏[/yellow]\n")
            
            try:
                subprocess.run(["tensorboard", "--logdir", str(tb_dir)])
            except KeyboardInterrupt:
                self.console.print("\n[yellow]TensorBoard –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω[/yellow]")
        else:
            self.console.print("[yellow]–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è TensorBoard –Ω–µ –Ω–∞–π–¥–µ–Ω–∞[/yellow]")
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def configure_model(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏"""
        self.console.print("\n[cyan]–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏ PatchTST:[/cyan]")
        
        model_config = self.config['model']
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        table = Table(title="–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan")
        table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="yellow")
        
        table.add_row("d_model", str(model_config['d_model']))
        table.add_row("n_heads", str(model_config['n_heads']))
        table.add_row("e_layers", str(model_config['e_layers']))
        table.add_row("d_ff", str(model_config['d_ff']))
        table.add_row("dropout", str(model_config['dropout']))
        table.add_row("batch_size", str(model_config['batch_size']))
        table.add_row("learning_rate", str(model_config['learning_rate']))
        table.add_row("epochs", str(model_config['epochs']))
        
        self.console.print(table)
        
        if Confirm.ask("\n–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã?"):
            model_config['d_model'] = IntPrompt.ask("d_model", default=model_config['d_model'])
            model_config['n_heads'] = IntPrompt.ask("n_heads", default=model_config['n_heads'])
            model_config['e_layers'] = IntPrompt.ask("e_layers", default=model_config['e_layers'])
            model_config['d_ff'] = IntPrompt.ask("d_ff", default=model_config['d_ff'])
            model_config['dropout'] = FloatPrompt.ask("dropout", default=model_config['dropout'])
            model_config['batch_size'] = IntPrompt.ask("batch_size", default=model_config['batch_size'])
            model_config['learning_rate'] = FloatPrompt.ask("learning_rate", default=model_config['learning_rate'])
            model_config['epochs'] = IntPrompt.ask("epochs", default=model_config['epochs'])
            
            self.save_config()
            self.console.print("[green]‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã[/green]")
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def configure_data(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
        self.console.print("\n[cyan]–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–Ω–Ω—ã—Ö:[/cyan]")
        
        data_config = self.config['data']
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–∏–º–≤–æ–ª—ã
        self.console.print(f"\n–¢–µ–∫—É—â–∏–µ —Å–∏–º–≤–æ–ª—ã ({len(data_config['symbols'])}):")
        for symbol in data_config['symbols'][:10]:
            self.console.print(f"  ‚Ä¢ {symbol}")
        if len(data_config['symbols']) > 10:
            self.console.print(f"  ... –∏ –µ—â–µ {len(data_config['symbols']) - 10}")
        
        if Confirm.ask("\n–ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤?"):
            self.console.print("\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:")
            self.console.print("1. –¢–æ–ø-10 –º–æ–Ω–µ—Ç")
            self.console.print("2. –¢–æ–ø-20 –º–æ–Ω–µ—Ç")
            self.console.print("3. –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã")
            self.console.print("4. –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é")
            
            choice = Prompt.ask("–í—ã–±–æ—Ä")
            
            if choice == "1":
                data_config['symbols'] = [
                    "BTCUSDT", "ETHUSDT", "BNBUSDT", "SOLUSDT", "XRPUSDT",
                    "ADAUSDT", "DOTUSDT", "LINKUSDT", "AVAXUSDT", "LTCUSDT"
                ]
            elif choice == "2":
                data_config['symbols'] = [
                    "BTCUSDT", "ETHUSDT", "BNBUSDT", "SOLUSDT", "XRPUSDT",
                    "ADAUSDT", "DOTUSDT", "LINKUSDT", "AVAXUSDT", "LTCUSDT",
                    "MATICUSDT", "UNIUSDT", "ATOMUSDT", "XLMUSDT", "ETCUSDT",
                    "NEARUSDT", "ALGOUSDT", "FILUSDT", "ICPUSDT", "TRXUSDT"
                ]
            elif choice == "3":
                data_config['symbols'] = ["ALL"]
            elif choice == "4":
                symbols_str = Prompt.ask("–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
                data_config['symbols'] = [s.strip() for s in symbols_str.split(",")]
            
            self.save_config()
            self.console.print("[green]‚úÖ –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω[/green]")
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def show_system_info(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
        self.console.print(Panel("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ", style="cyan"))
        
        # –í–µ—Ä—Å–∏—è Python
        import sys
        self.console.print(f"\n[cyan]Python:[/cyan] {sys.version.split()[0]}")
        
        # –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
        try:
            import torch
            self.console.print(f"[cyan]PyTorch:[/cyan] {torch.__version__}")
        except:
            pass
        
        try:
            import pandas as pd
            self.console.print(f"[cyan]Pandas:[/cyan] {pd.__version__}")
        except:
            pass
        
        # –°—Ç–∞—Ç—É—Å GPU
        try:
            import torch
            if torch.cuda.is_available():
                self.console.print(f"\n[green]‚úÖ GPU –¥–æ—Å—Ç—É–ø–µ–Ω:[/green] {torch.cuda.get_device_name(0)}")
            else:
                self.console.print("\n[yellow]‚ö†Ô∏è GPU –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU[/yellow]")
        except:
            pass
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
        self.console.print("\n[cyan]–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:[/cyan]")
        dirs = ["data", "models", "training", "trading", "utils", "config", "cache", "experiments"]
        for dir_name in dirs:
            dir_path = Path(dir_name)
            if dir_path.exists():
                file_count = len(list(dir_path.glob("*.py")))
                self.console.print(f"  üìÅ {dir_name}/ ({file_count} —Ñ–∞–π–ª–æ–≤)")
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–æ–¥–µ–ª–∏
        models_dir = Path("models_saved")
        if models_dir.exists():
            models = sorted(models_dir.glob("*.pth"), key=lambda x: x.stat().st_mtime, reverse=True)
            if models:
                self.console.print(f"\n[cyan]–ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–æ–¥–µ–ª–∏:[/cyan]")
                for model in models[:3]:
                    size = model.stat().st_size / (1024 * 1024)  # MB
                    mtime = datetime.fromtimestamp(model.stat().st_mtime).strftime("%Y-%m-%d %H:%M")
                    self.console.print(f"  ‚Ä¢ {model.name} ({size:.1f} MB, {mtime})")
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def quick_start(self):
        """–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫"""
        self.console.print("\n[cyan]üöÄ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã[/cyan]")
        
        steps = [
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î", lambda: subprocess.run(["python", "-c", "from data.data_loader import CryptoDataLoader; print('OK')"], capture_output=True).returncode == 0),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö", lambda: Path("cache/features_cache.pkl").exists()),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π", lambda: Path("models").exists()),
        ]
        
        all_ok = True
        for step_name, check_func in steps:
            try:
                if check_func():
                    self.console.print(f"‚úÖ {step_name}")
                else:
                    self.console.print(f"‚ùå {step_name}")
                    all_ok = False
            except:
                self.console.print(f"‚ùå {step_name}")
                all_ok = False
        
        if all_ok:
            self.console.print("\n[green]–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ![/green]")
            
            if Confirm.ask("\n–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω?"):
                self.console.print("\n[cyan]–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:[/cyan]")
                self.console.print("1. –¢–æ–ª—å–∫–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
                self.console.print("2. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö + –æ–±—É—á–µ–Ω–∏–µ")
                self.console.print("3. –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω (–¥–∞–Ω–Ω—ã–µ + –æ–±—É—á–µ–Ω–∏–µ + –±—ç–∫—Ç–µ—Å—Ç)")
                
                mode_choice = Prompt.ask("–í—ã–±–æ—Ä", default="2")
                
                if mode_choice == "1":
                    subprocess.run(["python", "run_full_pipeline.py", "--mode", "data"])
                elif mode_choice == "2":
                    subprocess.run(["python", "run_full_pipeline.py", "--mode", "demo"])
                elif mode_choice == "3":
                    subprocess.run(["python", "run_full_pipeline.py", "--mode", "full"])
        else:
            self.console.print("\n[yellow]‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã[/yellow]")
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def run(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –º–µ–Ω—é"""
        while True:
            self.display_main_menu()
            choice = Prompt.ask("\n[bold cyan]–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é[/bold cyan]", default="0")
            
            if choice == "1":
                self.data_management_menu()
            elif choice == "2":
                self.training_menu()
            elif choice == "3":
                self.monitoring_menu()
            elif choice == "4":
                self.settings_menu()
            elif choice == "5":
                self.utilities_menu()
            elif choice == "6":
                self.show_system_info()
            elif choice == "7":
                self.quick_start()
            elif choice == "0":
                if Confirm.ask("\n[yellow]–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?[/yellow]"):
                    self.console.print("\n[cyan]–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã[/cyan]")
                    break
            else:
                self.console.print("[red]–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.[/red]")
                time.sleep(1)


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    try:
        menu = CryptoTradingMenu()
        menu.run()
    except KeyboardInterrupt:
        console.print("\n\n[yellow]–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º[/yellow]")
    except Exception as e:
        console.print(f"\n[red]–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}[/red]")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
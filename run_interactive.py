#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Crypto AI Trading System
"""

import sys
import os
import subprocess
import yaml
import time
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Optional
import warnings
warnings.filterwarnings('ignore')

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import logging
log_dir = Path("logs/interactive")
log_dir.mkdir(parents=True, exist_ok=True)
log_file = log_dir / f"menu_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(funcName)s - %(message)s',
    handlers=[
        logging.FileHandler(log_file, encoding='utf-8'),
    ]
)
menu_logger = logging.getLogger('interactive_menu')

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é
from rich.console import Console
from rich.table import Table
from rich.prompt import Prompt, Confirm, IntPrompt, FloatPrompt
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich import print as rprint
from rich.markdown import Markdown

console = Console()

class CryptoTradingMenu:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π"""
    
    def __init__(self):
        self.console = Console()
        self.config_path = Path("config/config.yaml")
        self.config = self.load_config()
        self.logger = menu_logger
        self.logger.info(f"–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é. –õ–æ–≥ —Ñ–∞–π–ª: {log_file}")
        
    def load_config(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        with open(self.config_path, 'r', encoding='utf-8') as f:
            return yaml.safe_load(f)
    
    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        with open(self.config_path, 'w', encoding='utf-8') as f:
            yaml.dump(self.config, f, default_flow_style=False, allow_unicode=True)
    
    def display_main_menu(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        self.console.clear()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.console.print(Panel.fit(
            "[bold cyan]üöÄ Crypto AI Trading System[/bold cyan]\n"
            "[dim]–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ[/dim]",
            border_style="blue"
        ))
        
        # –û–ø—Ü–∏–∏ –º–µ–Ω—é
        menu_options = Table(show_header=False, box=None)
        menu_options.add_column("Option", style="cyan", width=3)
        menu_options.add_column("Description", style="white")
        
        menu_options.add_row("1", "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏")
        menu_options.add_row("2", "üß† –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π")
        menu_options.add_row("3", "üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ª–æ–≥–∏")
        menu_options.add_row("4", "‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
        menu_options.add_row("5", "üîß –£—Ç–∏–ª–∏—Ç—ã –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
        menu_options.add_row("6", "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
        menu_options.add_row("7", "üöÄ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫")
        menu_options.add_row("0", "‚ùå –í—ã—Ö–æ–¥")
        
        self.console.print(menu_options)
        
    def data_management_menu(self):
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏"""
        while True:
            self.console.clear()
            self.console.print(Panel("üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏", style="cyan"))
            
            options = Table(show_header=False, box=None)
            options.add_column("Option", style="cyan", width=3)
            options.add_column("Description", style="white")
            
            options.add_row("1", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î")
            options.add_row("2", "–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î")
            options.add_row("3", "–°–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏")
            options.add_row("4", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω—ã–º")
            options.add_row("5", "–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à")
            options.add_row("0", "–ù–∞–∑–∞–¥")
            
            self.console.print(options)
            
            choice = Prompt.ask("\n[bold cyan]–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é[/bold cyan]")
            
            if choice == "1":
                self.check_database_connection()
            elif choice == "2":
                self.load_data_from_db()
            elif choice == "3":
                self.create_features()
            elif choice == "4":
                self.show_data_statistics()
            elif choice == "5":
                self.clear_cache()
            elif choice == "0":
                break
    
    def training_menu(self):
        """–ú–µ–Ω—é –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π"""
        while True:
            self.console.clear()
            self.console.print(Panel("üß† –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π", style="cyan"))
            
            options = Table(show_header=False, box=None)
            options.add_column("Option", style="cyan", width=3)
            options.add_column("Description", style="white")
            
            options.add_row("1", "–ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ (demo)")
            options.add_row("2", "–ü–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ")
            options.add_row("3", "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ")
            options.add_row("4", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è")
            options.add_row("5", "–û–±—É—á–µ–Ω–∏–µ –Ω–∞ GPU (Vast.ai)")
            options.add_row("0", "–ù–∞–∑–∞–¥")
            
            self.console.print(options)
            
            choice = Prompt.ask("\n[bold cyan]–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é[/bold cyan]")
            
            if choice == "1":
                self.run_demo_training()
            elif choice == "2":
                self.run_full_training()
            elif choice == "3":
                self.resume_training()
            elif choice == "4":
                self.configure_training()
            elif choice == "5":
                self.run_gpu_training()
            elif choice == "0":
                break
    
    def monitoring_menu(self):
        """–ú–µ–Ω—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while True:
            self.console.clear()
            self.console.print(Panel("üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ª–æ–≥–∏", style="cyan"))
            
            options = Table(show_header=False, box=None)
            options.add_column("Option", style="cyan", width=3)
            options.add_column("Description", style="white")
            
            options.add_row("1", "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±—É—á–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
            options.add_row("2", "–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤")
            options.add_row("3", "TensorBoard")
            options.add_row("4", "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è")
            options.add_row("5", "–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏")
            options.add_row("0", "–ù–∞–∑–∞–¥")
            
            self.console.print(options)
            
            choice = Prompt.ask("\n[bold cyan]–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é[/bold cyan]")
            
            if choice == "1":
                self.monitor_training()
            elif choice == "2":
                self.view_logs()
            elif choice == "3":
                self.launch_tensorboard()
            elif choice == "4":
                self.show_training_results()
            elif choice == "5":
                self.clear_logs()
            elif choice == "0":
                break
    
    def settings_menu(self):
        """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        while True:
            self.console.clear()
            self.console.print(Panel("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã", style="cyan"))
            
            options = Table(show_header=False, box=None)
            options.add_column("Option", style="cyan", width=3)
            options.add_column("Description", style="white")
            
            options.add_row("1", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏")
            options.add_row("2", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
            options.add_row("3", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞")
            options.add_row("4", "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞")
            options.add_row("5", "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
            options.add_row("6", "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
            options.add_row("0", "–ù–∞–∑–∞–¥")
            
            self.console.print(options)
            
            choice = Prompt.ask("\n[bold cyan]–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é[/bold cyan]")
            
            if choice == "1":
                self.configure_model()
            elif choice == "2":
                self.configure_data()
            elif choice == "3":
                self.configure_risk_management()
            elif choice == "4":
                self.configure_backtesting()
            elif choice == "5":
                self.save_config()
                self.console.print("[green]‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞[/green]")
                time.sleep(1)
            elif choice == "6":
                self.config = self.load_config()
                self.console.print("[green]‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞[/green]")
                time.sleep(1)
            elif choice == "0":
                break
    
    def utilities_menu(self):
        """–ú–µ–Ω—é —É—Ç–∏–ª–∏—Ç"""
        while True:
            self.console.clear()
            self.console.print(Panel("üîß –£—Ç–∏–ª–∏—Ç—ã –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", style="cyan"))
            
            options = Table(show_header=False, box=None)
            options.add_column("Option", style="cyan", width=3)
            options.add_column("Description", style="white")
            
            options.add_row("1", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã")
            options.add_row("2", "–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
            options.add_row("3", "–ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
            options.add_row("4", "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤")
            options.add_row("5", "–≠–∫—Å–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏")
            options.add_row("0", "–ù–∞–∑–∞–¥")
            
            self.console.print(options)
            
            choice = Prompt.ask("\n[bold cyan]–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é[/bold cyan]")
            
            if choice == "1":
                self.check_available_symbols()
            elif choice == "2":
                self.validate_data()
            elif choice == "3":
                self.run_backtesting()
            elif choice == "4":
                self.generate_reports()
            elif choice == "5":
                self.export_model()
            elif choice == "0":
                break
    
    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π
    def check_database_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            transient=True,
        ) as progress:
            progress.add_task(description="–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...", total=None)
            
            try:
                result = subprocess.run(
                    ["python", "-c", """
import psycopg2
conn = psycopg2.connect(
    host='localhost',
    port=5555,
    database='crypto_trading',
    user='ruslan',
    password='ruslan'
)
cursor = conn.cursor()
cursor.execute('SELECT COUNT(*) FROM raw_market_data')
count = cursor.fetchone()[0]
print(f'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ó–∞–ø–∏—Å–µ–π –≤ –ë–î: {count:,}')
conn.close()
                    """],
                    capture_output=True,
                    text=True
                )
                
                if result.returncode == 0:
                    self.console.print(f"\n[green]{result.stdout.strip()}[/green]")
                else:
                    self.console.print(f"\n[red]‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {result.stderr}[/red]")
            except Exception as e:
                self.console.print(f"\n[red]‚ùå –û—à–∏–±–∫–∞: {e}[/red]")
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def load_data_from_db(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î"""
        symbols = self.config['data']['symbols']
        self.console.print(f"\n[cyan]–ë—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤[/cyan]")
        
        if Confirm.ask("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"):
            result = subprocess.run(
                ["python", "run_full_pipeline.py", "--mode", "data"],
                text=True
            )
            if result.returncode == 0:
                self.console.print("[green]‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã[/green]")
            else:
                self.console.print("[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö[/red]")
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def create_features(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        self.console.print("\n[cyan]–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...[/cyan]")
        
        if Confirm.ask("–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∫—ç—à –ø—Ä–∏–∑–Ω–∞–∫–æ–≤?"):
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à
            cache_file = Path("cache/features_cache.pkl")
            if cache_file.exists():
                cache_file.unlink()
                self.console.print("[yellow]–°—Ç–∞—Ä—ã–π –∫—ç—à —É–¥–∞–ª–µ–Ω[/yellow]")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            result = subprocess.run(
                ["python", "run_full_pipeline.py", "--mode", "data"],
                text=True
            )
            if result.returncode == 0:
                self.console.print("[green]‚úÖ –ü—Ä–∏–∑–Ω–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã[/green]")
            else:
                self.console.print("[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤[/red]")
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def show_data_statistics(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∞–Ω–Ω—ã–º"""
        try:
            result = subprocess.run(
                ["python", "-c", """
import pickle
import pandas as pd

try:
    with open('cache/features_cache.pkl', 'rb') as f:
        features = pickle.load(f)
    
    print(f'\\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö:')
    print(f'–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(features):,}')
    print(f'–ü–µ—Ä–∏–æ–¥: {features.datetime.min()} - {features.datetime.max()}')
    print(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(features.columns)}')
    
    print(f'\\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–∏–º–≤–æ–ª–∞–º:')
    for symbol, count in features.groupby('symbol').size().items():
        print(f'  {symbol}: {count:,} –∑–∞–ø–∏—Å–µ–π')
    
    print(f'\\n–¶–µ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:')
    target_cols = [col for col in features.columns if col.startswith('future_return_')]
    for col in target_cols:
        print(f'  {col}: mean={features[col].mean():.4f}, std={features[col].std():.4f}')
except:
    print('‚ùå –ö—ç—à –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏.')
                """],
                capture_output=True,
                text=True
            )
            self.console.print(result.stdout)
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞: {e}[/red]")
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def clear_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"""
        cache_dir = Path("cache")
        if cache_dir.exists():
            files = list(cache_dir.glob("*.pkl"))
            if files:
                self.console.print(f"\n[yellow]–ù–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤ –∫—ç—à–∞[/yellow]")
                if Confirm.ask("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –∫—ç—à–∞?"):
                    for file in files:
                        file.unlink()
                    self.console.print("[green]‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω[/green]")
            else:
                self.console.print("[yellow]–ö—ç—à –ø—É—Å—Ç[/yellow]")
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def run_demo_training(self):
        """–ë—ã—Å—Ç—Ä–æ–µ –¥–µ–º–æ –æ–±—É—á–µ–Ω–∏–µ"""
        self.console.print("\n[cyan]–ó–∞–ø—É—Å–∫ –¥–µ–º–æ –æ–±—É—á–µ–Ω–∏—è (5 —ç–ø–æ—Ö)...[/cyan]")
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ –º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        original_epochs = self.config['model']['epochs']
        self.config['model']['epochs'] = 5
        self.save_config()
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
            process = subprocess.Popen(
                ["python", "run_full_pipeline.py", "--mode", "train"],
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True,
                bufsize=1
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            for line in iter(process.stdout.readline, ''):
                if line:
                    print(line.strip())
            
            process.wait()
            
            if process.returncode == 0:
                self.console.print("\n[green]‚úÖ –î–µ–º–æ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ[/green]")
            else:
                self.console.print("\n[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏[/red]")
        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            self.config['model']['epochs'] = original_epochs
            self.save_config()
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def run_full_training(self):
        """–ü–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"""
        self.console.print(f"\n[cyan]–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è ({self.config['model']['epochs']} —ç–ø–æ—Ö)...[/cyan]")
        
        if Confirm.ask("–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"):
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
            subprocess.Popen(
                ["python", "run_full_pipeline.py", "--mode", "train"],
                stdout=open("logs/training.log", "w"),
                stderr=subprocess.STDOUT
            )
            
            self.console.print("[green]‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ[/green]")
            self.console.print("[yellow]–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±—É—á–µ–Ω–∏—è' –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞[/yellow]")
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def resume_training(self):
        """–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        self.console.print("\n[cyan]–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ç–æ—á–∫–∏...[/cyan]")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        models_dir = Path("models_saved")
        if not models_dir.exists() or not list(models_dir.glob("*.pth")):
            self.console.print("[yellow]‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã[/yellow]")
            Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –º–æ–¥–µ–ª—å
        latest_model = max(models_dir.glob("*.pth"), key=lambda x: x.stat().st_mtime)
        self.console.print(f"[green]–ù–∞–π–¥–µ–Ω–∞ –º–æ–¥–µ–ª—å: {latest_model.name}[/green]")
        
        if Confirm.ask("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ —Å —ç—Ç–æ–π –º–æ–¥–µ–ª–∏?"):
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è
            self.console.print("[yellow]–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ[/yellow]")
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def configure_training(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—É—á–µ–Ω–∏—è"""
        self.console.print("\n[cyan]‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è:[/cyan]")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        table = Table(title="–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è")
        table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan")
        table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="yellow")
        
        table.add_row("–≠–ø–æ—Ö–∏", str(self.config['model']['epochs']))
        table.add_row("Batch size", str(self.config['model']['batch_size']))
        table.add_row("Learning rate", str(self.config['model']['learning_rate']))
        table.add_row("Early stopping", str(self.config['model']['early_stopping_patience']))
        table.add_row("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", "GPU" if self.config['performance']['device'] == 'cuda' else "CPU")
        
        self.console.print(table)
        
        if Confirm.ask("\n–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã?"):
            self.config['model']['epochs'] = IntPrompt.ask("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö", default=self.config['model']['epochs'])
            self.config['model']['batch_size'] = IntPrompt.ask("Batch size", default=self.config['model']['batch_size'])
            self.config['model']['learning_rate'] = FloatPrompt.ask("Learning rate", default=self.config['model']['learning_rate'])
            self.config['model']['early_stopping_patience'] = IntPrompt.ask("Early stopping patience", default=self.config['model']['early_stopping_patience'])
            
            device_choice = Prompt.ask("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (cpu/cuda)", default=self.config['performance']['device'])
            self.config['performance']['device'] = device_choice
            
            self.save_config()
            self.console.print("[green]‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã[/green]")
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    
    def launch_gpu_training(self):
        """–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ GPU"""
        self.console.print("\n[cyan]üöÄ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ GPU —Å–µ—Ä–≤–µ—Ä–µ[/cyan]")
        
        # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
        self.console.print("\n[cyan]–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è:[/cyan]")
        self.console.print("1. –î–µ–º–æ (5 —ç–ø–æ—Ö) - ~15-20 –º–∏–Ω—É—Ç")
        self.console.print("2. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ (50 —ç–ø–æ—Ö) - ~2-3 —á–∞—Å–∞")
        self.console.print("3. –ü–æ–ª–Ω–æ–µ (100 —ç–ø–æ—Ö) - ~5-6 —á–∞—Å–æ–≤")
        self.console.print("4. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ")
        
        choice = Prompt.ask("–í—ã–±–æ—Ä", default="1")
        
        epochs = {
            "1": 5,
            "2": 50,
            "3": 100
        }.get(choice)
        
        if choice == "4":
            epochs = IntPrompt.ask("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö", default=20)
        
        if epochs:
            # –í—Ä–µ–º–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            original_epochs = self.config['model']['epochs']
            self.config['model']['epochs'] = epochs
            self.save_config()
            
            self.console.print(f"\n[yellow]–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ {epochs} —ç–ø–æ—Ö...[/yellow]")
            
            script_path = "scripts/run_on_vast.sh"
            if os.path.exists(script_path):
                try:
                    subprocess.run([script_path])
                except KeyboardInterrupt:
                    self.console.print("\n[yellow]–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º[/yellow]")
            else:
                self.console.print("[red]‚ùå –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω[/red]")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            self.config['model']['epochs'] = original_epochs
            self.save_config()
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def monitor_gpu(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ GPU —Å–µ—Ä–≤–µ—Ä–∞"""
        self.console.print("\n[cyan]üìä –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ GPU:[/cyan]")
        self.console.print("\n–ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        self.console.print("   ‚Ä¢ nvidia-smi -l 1        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ GPU –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
        self.console.print("   ‚Ä¢ htop                   # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ CPU –∏ –ø–∞–º—è—Ç–∏")
        self.console.print("   ‚Ä¢ tmux attach -t training # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Å—Å–∏–∏ –æ–±—É—á–µ–Ω–∏—è")
        self.console.print("   ‚Ä¢ tail -f logs/training_gpu.log # –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤")
        self.console.print("\n[yellow]–î–ª—è TensorBoard –æ—Ç–∫—Ä–æ–π—Ç–µ http://localhost:6006[/yellow]")
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def show_gpu_instructions(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ GPU"""
        self.console.print("\n[cyan]üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å GPU —Å–µ—Ä–≤–µ—Ä–æ–º[/cyan]")
        
        instructions = """
1. **–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞:**
   - –°–æ–∑–¥–∞–π—Ç–µ SSH –∫–ª—é—á: ~/.ssh/vast_ai_key
   - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∞–≤–∞: chmod 600 ~/.ssh/vast_ai_key
   
2. **–†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å:**
   - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–æ–µ–∫—Ç (–æ–ø—Ü–∏—è 1)
   - –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É (–æ–ø—Ü–∏—è 2)
   - –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ (–æ–ø—Ü–∏—è 3)
   
3. **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:**
   - TensorBoard: http://localhost:6006
   - GPU —Å—Ç–∞—Ç—É—Å: nvidia-smi -l 1
   - –õ–æ–≥–∏: tail -f logs/training_gpu.log
   
4. **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ tmux:**
   - –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: tmux attach -t training
   - –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è: Ctrl+B, –∑–∞—Ç–µ–º D
   - –°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π: tmux ls
        """
        
        self.console.print(Markdown(instructions))
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def configure_gpu_server(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ GPU —Å–µ—Ä–≤–µ—Ä–∞"""
        self.console.print("\n[cyan]‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GPU —Å–µ—Ä–≤–µ—Ä–∞[/cyan]")
        
        remote_config = self.config.setdefault('remote_server', {})
        
        self.console.print("\n–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        self.console.print(f"Host: {remote_config.get('primary', {}).get('host', '–ù–µ –∑–∞–¥–∞–Ω')}")
        self.console.print(f"Port: {remote_config.get('primary', {}).get('port', '–ù–µ –∑–∞–¥–∞–Ω')}")
        
        if Confirm.ask("\n–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏?"):
            host = Prompt.ask("IP –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞", default="114.32.64.6")
            port = IntPrompt.ask("SSH –ø–æ—Ä—Ç", default=40134)
            
            remote_config['enabled'] = True
            remote_config.setdefault('primary', {})['host'] = host
            remote_config.setdefault('primary', {})['port'] = port
            remote_config['user'] = 'root'
            remote_config['key_path'] = '~/.ssh/vast_ai_key'
            
            self.save_config()
            self.console.print("[green]‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã[/green]")
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def monitor_training(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±—É—á–µ–Ω–∏—è"""
        self.console.print("\n[cyan]–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±—É—á–µ–Ω–∏—è...[/cyan]")
        
        try:
            subprocess.run(["python", "monitor_training.py"])
        except KeyboardInterrupt:
            self.console.print("\n[yellow]–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω[/yellow]")
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞: {e}[/red]")
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def view_logs(self):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"""
        log_dir = Path("experiments/logs")
        if log_dir.exists():
            log_files = sorted(log_dir.glob("*.log"), key=lambda x: x.stat().st_mtime, reverse=True)
            
            if log_files:
                self.console.print("\n[cyan]–î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–≥–∏:[/cyan]")
                for i, file in enumerate(log_files[:10], 1):
                    size = file.stat().st_size / 1024  # KB
                    mtime = datetime.fromtimestamp(file.stat().st_mtime).strftime("%Y-%m-%d %H:%M")
                    self.console.print(f"{i}. {file.name} ({size:.1f} KB, {mtime})")
                
                choice = IntPrompt.ask("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª (0 –¥–ª—è –æ—Ç–º–µ–Ω—ã)", default=0)
                
                if 0 < choice <= len(log_files[:10]):
                    log_file = log_files[choice - 1]
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
                    with open(log_file, 'r') as f:
                        lines = f.readlines()
                        last_lines = lines[-50:] if len(lines) > 50 else lines
                        
                        self.console.print(f"\n[cyan]–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ {log_file.name}:[/cyan]")
                        for line in last_lines:
                            print(line.rstrip())
            else:
                self.console.print("[yellow]–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã[/yellow]")
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def launch_tensorboard(self):
        """–ó–∞–ø—É—Å–∫ TensorBoard"""
        tb_dir = Path("experiments/runs")
        if tb_dir.exists():
            self.console.print("\n[cyan]–ó–∞–ø—É—Å–∫ TensorBoard...[/cyan]")
            self.console.print("[yellow]–û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:6006 –≤ –±—Ä–∞—É–∑–µ—Ä–µ[/yellow]")
            self.console.print("[yellow]–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏[/yellow]\n")
            
            try:
                subprocess.run(["tensorboard", "--logdir", str(tb_dir)])
            except KeyboardInterrupt:
                self.console.print("\n[yellow]TensorBoard –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω[/yellow]")
        else:
            self.console.print("[yellow]–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è TensorBoard –Ω–µ –Ω–∞–π–¥–µ–Ω–∞[/yellow]")
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def configure_model(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏"""
        self.console.print("\n[cyan]–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏ PatchTST:[/cyan]")
        
        model_config = self.config['model']
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        table = Table(title="–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan")
        table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="yellow")
        
        table.add_row("d_model", str(model_config['d_model']))
        table.add_row("n_heads", str(model_config['n_heads']))
        table.add_row("e_layers", str(model_config['e_layers']))
        table.add_row("d_ff", str(model_config['d_ff']))
        table.add_row("dropout", str(model_config['dropout']))
        table.add_row("batch_size", str(model_config['batch_size']))
        table.add_row("learning_rate", str(model_config['learning_rate']))
        table.add_row("epochs", str(model_config['epochs']))
        
        self.console.print(table)
        
        if Confirm.ask("\n–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã?"):
            model_config['d_model'] = IntPrompt.ask("d_model", default=model_config['d_model'])
            model_config['n_heads'] = IntPrompt.ask("n_heads", default=model_config['n_heads'])
            model_config['e_layers'] = IntPrompt.ask("e_layers", default=model_config['e_layers'])
            model_config['d_ff'] = IntPrompt.ask("d_ff", default=model_config['d_ff'])
            model_config['dropout'] = FloatPrompt.ask("dropout", default=model_config['dropout'])
            model_config['batch_size'] = IntPrompt.ask("batch_size", default=model_config['batch_size'])
            model_config['learning_rate'] = FloatPrompt.ask("learning_rate", default=model_config['learning_rate'])
            model_config['epochs'] = IntPrompt.ask("epochs", default=model_config['epochs'])
            
            self.save_config()
            self.console.print("[green]‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã[/green]")
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def configure_data(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
        self.console.print("\n[cyan]–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–Ω–Ω—ã—Ö:[/cyan]")
        
        data_config = self.config['data']
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–∏–º–≤–æ–ª—ã
        self.console.print(f"\n–¢–µ–∫—É—â–∏–µ —Å–∏–º–≤–æ–ª—ã ({len(data_config['symbols'])}):")
        for symbol in data_config['symbols'][:10]:
            self.console.print(f"  ‚Ä¢ {symbol}")
        if len(data_config['symbols']) > 10:
            self.console.print(f"  ... –∏ –µ—â–µ {len(data_config['symbols']) - 10}")
        
        if Confirm.ask("\n–ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤?"):
            self.console.print("\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:")
            self.console.print("1. –¢–æ–ø-10 –º–æ–Ω–µ—Ç")
            self.console.print("2. –¢–æ–ø-20 –º–æ–Ω–µ—Ç")
            self.console.print("3. –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã")
            self.console.print("4. –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é")
            
            choice = Prompt.ask("–í—ã–±–æ—Ä")
            
            if choice == "1":
                data_config['symbols'] = [
                    "BTCUSDT", "ETHUSDT", "BNBUSDT", "SOLUSDT", "XRPUSDT",
                    "ADAUSDT", "DOTUSDT", "LINKUSDT", "AVAXUSDT", "LTCUSDT"
                ]
            elif choice == "2":
                data_config['symbols'] = [
                    "BTCUSDT", "ETHUSDT", "BNBUSDT", "SOLUSDT", "XRPUSDT",
                    "ADAUSDT", "DOTUSDT", "LINKUSDT", "AVAXUSDT", "LTCUSDT",
                    "MATICUSDT", "UNIUSDT", "ATOMUSDT", "XLMUSDT", "ETCUSDT",
                    "NEARUSDT", "ALGOUSDT", "FILUSDT", "ICPUSDT", "TRXUSDT"
                ]
            elif choice == "3":
                data_config['symbols'] = ["ALL"]
            elif choice == "4":
                symbols_str = Prompt.ask("–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
                data_config['symbols'] = [s.strip() for s in symbols_str.split(",")]
            
            self.save_config()
            self.console.print("[green]‚úÖ –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω[/green]")
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def check_available_symbols(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        self.console.print("\n[cyan]–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ë–î...[/cyan]")
        
        try:
            result = subprocess.run(
                ["python", "-c", """
import psycopg2
import pandas as pd

conn = psycopg2.connect(
    host='localhost', port=5555, database='crypto_trading',
    user='ruslan', password='ruslan'
)

query = '''
SELECT DISTINCT symbol, COUNT(*) as records, 
       MIN(datetime) as first_date, MAX(datetime) as last_date
FROM raw_market_data
GROUP BY symbol
ORDER BY symbol
'''

df = pd.read_sql(query, conn)
conn.close()

print(f'\\n–ù–∞–π–¥–µ–Ω–æ {len(df)} —Å–∏–º–≤–æ–ª–æ–≤:\\n')
for _, row in df.iterrows():
    print(f"{row['symbol']:15} {row['records']:8,} –∑–∞–ø–∏—Å–µ–π  ({row['first_date'].strftime('%Y-%m-%d')} - {row['last_date'].strftime('%Y-%m-%d')})")
                """],
                capture_output=True,
                text=True
            )
            
            if result.returncode == 0:
                self.console.print(result.stdout)
            else:
                self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞: {result.stderr}[/red]")
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞: {e}[/red]")
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def validate_data(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        self.console.print("\n[cyan]–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...[/cyan]")
        
        cache_file = Path("cache/features_cache.pkl")
        if not cache_file.exists():
            self.console.print("[yellow]‚ö†Ô∏è –ö—ç—à –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω[/yellow]")
            Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
            return
        
        try:
            import pickle
            with open(cache_file, 'rb') as f:
                features = pickle.load(f)
            
            self.console.print(f"\n[green]‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ[/green]")
            self.console.print(f"–†–∞–∑–º–µ—Ä: {features.shape}")
            self.console.print(f"–ü–µ—Ä–∏–æ–¥: {features.datetime.min()} - {features.datetime.max()}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ NaN
            nan_count = features.isna().sum().sum()
            if nan_count > 0:
                self.console.print(f"\n[yellow]‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {nan_count} NaN –∑–Ω–∞—á–µ–Ω–∏–π[/yellow]")
            else:
                self.console.print(f"\n[green]‚úÖ NaN –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ—Ç[/green]")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            target_cols = [col for col in features.columns if col.startswith('future_return_')]
            self.console.print(f"\n[cyan]–¶–µ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ({len(target_cols)}):[/cyan]")
            for col in target_cols:
                mean_val = features[col].mean()
                std_val = features[col].std()
                self.console.print(f"  {col}: mean={mean_val:.4f}, std={std_val:.4f}")
        
        except Exception as e:
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}[/red]")
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def run_backtesting(self):
        """–ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞"""
        self.console.print("\n[cyan]–ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏[/cyan]")
        
        models_dir = Path("models_saved")
        if not models_dir.exists() or not list(models_dir.glob("*.pth")):
            self.console.print("[yellow]‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã[/yellow]")
            self.console.print("–°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å")
            Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
            return
        
        # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
        models = sorted(models_dir.glob("*.pth"), key=lambda x: x.stat().st_mtime, reverse=True)
        self.console.print("\n[cyan]–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:[/cyan]")
        for i, model in enumerate(models[:5], 1):
            self.console.print(f"{i}. {model.name}")
        
        choice = IntPrompt.ask("\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å (0 –¥–ª—è –æ—Ç–º–µ–Ω—ã)", default=1)
        
        if 0 < choice <= len(models[:5]):
            selected_model = models[choice - 1]
            self.console.print(f"\n[yellow]–ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞ —Å –º–æ–¥–µ–ª—å—é {selected_model.name}...[/yellow]")
            
            if Confirm.ask("–ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥?"):
                subprocess.run([
                    "python", "run_full_pipeline.py", 
                    "--mode", "backtest",
                    "--model", str(selected_model)
                ])
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def generate_reports(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤"""
        self.console.print("\n[cyan]–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤[/cyan]")
        
        self.console.print("\n[cyan]–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:[/cyan]")
        self.console.print("1. –û—Ç—á–µ—Ç –ø–æ –æ–±—É—á–µ–Ω–∏—é")
        self.console.print("2. –û—Ç—á–µ—Ç –ø–æ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥—É")
        self.console.print("3. –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        self.console.print("4. –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç")
        
        choice = Prompt.ask("–í—ã–±–æ—Ä", default="1")
        
        if choice == "1":
            # –û—Ç—á–µ—Ç –ø–æ –æ–±—É—á–µ–Ω–∏—é
            log_dir = Path("experiments/logs")
            if log_dir.exists():
                self.console.print("\n[yellow]–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –æ–±—É—á–µ–Ω–∏—é...[/yellow]")
                # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞
                self.console.print("[yellow]–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ[/yellow]")
        
        elif choice == "2":
            # –û—Ç—á–µ—Ç –ø–æ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥—É
            self.console.print("\n[yellow]–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥—É...[/yellow]")
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å
            self.console.print("[yellow]–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ[/yellow]")
        
        elif choice == "3":
            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            self.console.print("\n[yellow]–ê–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...[/yellow]")
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å
            self.console.print("[yellow]–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ[/yellow]")
        
        elif choice == "4":
            # –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
            self.console.print("\n[yellow]–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...[/yellow]")
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å
            self.console.print("[yellow]–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ[/yellow]")
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def export_model(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏"""
        self.console.print("\n[cyan]–≠–∫—Å–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏[/cyan]")
        
        models_dir = Path("models_saved")
        if not models_dir.exists() or not list(models_dir.glob("*.pth")):
            self.console.print("[yellow]‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã[/yellow]")
            Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
            return
        
        # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
        models = sorted(models_dir.glob("*.pth"), key=lambda x: x.stat().st_mtime, reverse=True)
        self.console.print("\n[cyan]–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:[/cyan]")
        for i, model in enumerate(models[:5], 1):
            size = model.stat().st_size / (1024 * 1024)  # MB
            self.console.print(f"{i}. {model.name} ({size:.1f} MB)")
        
        choice = IntPrompt.ask("\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (0 –¥–ª—è –æ—Ç–º–µ–Ω—ã)", default=1)
        
        if 0 < choice <= len(models[:5]):
            selected_model = models[choice - 1]
            
            self.console.print("\n[cyan]–§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:[/cyan]")
            self.console.print("1. ONNX (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π)")
            self.console.print("2. TorchScript")
            self.console.print("3. –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª")
            
            format_choice = Prompt.ask("–í—ã–±–æ—Ä", default="3")
            
            if format_choice == "3":
                # –ü—Ä–æ—Å—Ç–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
                export_dir = Path("exports")
                export_dir.mkdir(exist_ok=True)
                
                export_path = export_dir / f"model_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pth"
                
                import shutil
                shutil.copy2(selected_model, export_path)
                
                self.console.print(f"\n[green]‚úÖ –ú–æ–¥–µ–ª—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞: {export_path}[/green]")
            else:
                self.console.print("[yellow]–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ[/yellow]")
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def configure_risk_management(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞"""
        self.console.print("\n[cyan]‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞:[/cyan]")
        
        risk_config = self.config['risk_management']
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        table = Table(title="–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞")
        table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan")
        table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="yellow")
        
        table.add_row("Stop Loss %", f"{risk_config['stop_loss_pct']}%")
        table.add_row("Take Profit —É—Ä–æ–≤–Ω–∏", str(risk_config['take_profit_targets']))
        table.add_row("–ß–∞—Å—Ç–∏—á–Ω—ã–µ –∑–∞–∫—Ä—ã—Ç–∏—è", str(risk_config['partial_close_sizes']))
        table.add_row("–ú–∞–∫—Å —Ä–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É", f"{risk_config['position_sizing']['max_risk_per_trade']}%")
        table.add_row("–ú–µ—Ç–æ–¥ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏", risk_config['position_sizing']['method'])
        
        self.console.print(table)
        
        if Confirm.ask("\n–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã?"):
            risk_config['stop_loss_pct'] = FloatPrompt.ask("Stop Loss %", default=risk_config['stop_loss_pct'])
            
            # Take Profit —É—Ä–æ–≤–Ω–∏
            tp_str = Prompt.ask("Take Profit —É—Ä–æ–≤–Ω–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)", default=",".join(map(str, risk_config['take_profit_targets'])))
            risk_config['take_profit_targets'] = [float(x.strip()) for x in tp_str.split(",")]
            
            # –ß–∞—Å—Ç–∏—á–Ω—ã–µ –∑–∞–∫—Ä—ã—Ç–∏—è
            pc_str = Prompt.ask("–ß–∞—Å—Ç–∏—á–Ω—ã–µ –∑–∞–∫—Ä—ã—Ç–∏—è % (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)", default=",".join(map(str, risk_config['partial_close_sizes'])))
            risk_config['partial_close_sizes'] = [int(x.strip()) for x in pc_str.split(",")]
            
            risk_config['position_sizing']['max_risk_per_trade'] = FloatPrompt.ask(
                "–ú–∞–∫—Å —Ä–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É %", 
                default=risk_config['position_sizing']['max_risk_per_trade']
            )
            
            self.save_config()
            self.console.print("[green]‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã[/green]")
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def configure_backtesting(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞"""
        self.console.print("\n[cyan]‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞:[/cyan]")
        
        backtest_config = self.config['backtesting']
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        table = Table(title="–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞")
        table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan")
        table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="yellow")
        
        table.add_row("–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª", f"${backtest_config['initial_capital']:,}")
        table.add_row("–ö–æ–º–∏—Å—Å–∏—è", f"{backtest_config['commission']*100:.1f}%")
        table.add_row("–ü—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ", f"{backtest_config['slippage']*100:.2f}%")
        
        self.console.print(table)
        
        if Confirm.ask("\n–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã?"):
            backtest_config['initial_capital'] = IntPrompt.ask(
                "–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª $", 
                default=backtest_config['initial_capital']
            )
            
            commission_pct = FloatPrompt.ask(
                "–ö–æ–º–∏—Å—Å–∏—è %", 
                default=backtest_config['commission']*100
            )
            backtest_config['commission'] = commission_pct / 100
            
            slippage_pct = FloatPrompt.ask(
                "–ü—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ %", 
                default=backtest_config['slippage']*100
            )
            backtest_config['slippage'] = slippage_pct / 100
            
            self.save_config()
            self.console.print("[green]‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã[/green]")
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def show_training_results(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
        self.console.print("\n[cyan]üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è[/cyan]")
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –æ–±—É—á–µ–Ω–∏–µ–º
        exp_dir = Path("experiments/runs")
        if not exp_dir.exists():
            self.console.print("[yellow]‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã[/yellow]")
            Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
            return
        
        training_dirs = sorted(exp_dir.glob("training_*"), key=lambda x: x.stat().st_mtime, reverse=True)
        if not training_dirs:
            self.console.print("[yellow]‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã[/yellow]")
            Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
            return
        
        latest_dir = training_dirs[0]
        self.console.print(f"\n[green]–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—É—á–µ–Ω–∏–µ: {latest_dir.name}[/green]")
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        report_file = latest_dir / "final_report.txt"
        if report_file.exists():
            with open(report_file, 'r') as f:
                self.console.print("\n[cyan]–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç:[/cyan]")
                self.console.print(f.read())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        metrics_files = list(latest_dir.glob("*_metrics.csv"))
        if metrics_files:
            self.console.print("\n[cyan]–§–∞–π–ª—ã –º–µ—Ç—Ä–∏–∫:[/cyan]")
            for file in metrics_files:
                self.console.print(f"  ‚Ä¢ {file.name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        plots_dir = latest_dir / "plots"
        if plots_dir.exists():
            plots = list(plots_dir.glob("*.png"))
            if plots:
                self.console.print(f"\n[cyan]–ù–∞–π–¥–µ–Ω–æ {len(plots)} –≥—Ä–∞—Ñ–∏–∫–æ–≤[/cyan]")
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def run_gpu_training(self):
        """–û–±—É—á–µ–Ω–∏–µ –Ω–∞ GPU —Å–µ—Ä–≤–µ—Ä–µ"""
        while True:
            self.console.clear()
            self.console.print(Panel("üöÄ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ GPU —Å–µ—Ä–≤–µ—Ä–µ (Vast.ai)", style="cyan"))
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
            info_table = Table(show_header=False, box=None)
            info_table.add_column("Parameter", style="cyan")
            info_table.add_column("Value", style="white")
            
            info_table.add_row("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ:", "")
            info_table.add_row("   ‚Ä¢ GPU:", "2x RTX 5090 (216.2 TFLOPS)")
            info_table.add_row("   ‚Ä¢ VRAM:", "32 GB")
            info_table.add_row("   ‚Ä¢ RAM:", "129 GB")
            info_table.add_row("   ‚Ä¢ –£—Å–∫–æ—Ä–µ–Ω–∏–µ:", "15-30x –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å CPU")
            
            self.console.print(info_table)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
            with self.console.status("[cyan]–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É...[/cyan]"):
                server_status = self._check_server_status()
            
            if server_status['connected']:
                self.console.print("[green]‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω[/green]")
                if server_status['project_exists']:
                    self.console.print("[green]‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω[/green]")
                else:
                    self.console.print("[yellow]‚ö†Ô∏è  –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ[/yellow]")
            else:
                self.console.print("[red]‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω[/red]")
            
            # –ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
            self.console.print("\n[bold cyan]–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:[/bold cyan]")
            action_table = Table(show_header=False, box=None)
            action_table.add_column("Option", style="cyan", width=5)
            action_table.add_column("Description", style="white")
            
            action_table.add_row("1", "üì§ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç")
            action_table.add_row("2", "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ")
            action_table.add_row("3", "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –±—Ä–∞—É–∑–µ—Ä–æ–º")
            action_table.add_row("4", "üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏")
            action_table.add_row("5", "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞")
            action_table.add_row("6", "üîå –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç—É–Ω–Ω–µ–ª—å –ë–î")
            action_table.add_row("0", "–ù–∞–∑–∞–¥")
            
            self.console.print(action_table)
            
            choice = Prompt.ask("\n[bold cyan]–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é[/bold cyan]")
            
            if choice == "1":
                self.logger.info("GPU –º–µ–Ω—é: –≤—ã–±—Ä–∞–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è")
                self.sync_to_gpu_server()
            elif choice == "2":
                self.logger.info("GPU –º–µ–Ω—é: –≤—ã–±—Ä–∞–Ω –∑–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è")
                if not server_status['project_exists']:
                    self.console.print("\n[yellow]‚ö†Ô∏è  –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç![/yellow]")
                    Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
                else:
                    self.launch_gpu_training()
            elif choice == "3":
                self.logger.info("GPU –º–µ–Ω—é: –≤—ã–±—Ä–∞–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
                self.monitor_with_browser()
            elif choice == "4":
                self.logger.info("GPU –º–µ–Ω—é: –≤—ã–±—Ä–∞–Ω—ã –ª–æ–≥–∏")
                self.check_gpu_logs()
            elif choice == "5":
                self.logger.info("GPU –º–µ–Ω—é: –≤—ã–±—Ä–∞–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                self.configure_gpu_server()
            elif choice == "6":
                self.logger.info("GPU –º–µ–Ω—é: –≤—ã–±—Ä–∞–Ω —Ç—É–Ω–Ω–µ–ª—å –ë–î")
                self.setup_db_tunnel()
            elif choice == "0":
                self.logger.info("GPU –º–µ–Ω—é: –≤—ã—Ö–æ–¥")
                break
    
    def _check_server_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º SSH –∞–ª–∏–∞—Å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
            ssh_alias = os.environ.get('VAST_SSH_ALIAS', 'vast-current')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
            result = subprocess.run(
                ["ssh", "-o", "ConnectTimeout=5", ssh_alias, 
                 "test -d /root/crypto_ai_trading && echo 'PROJECT_EXISTS' || echo 'NO_PROJECT'"],
                capture_output=True,
                text=True
            )
            
            if result.returncode == 0:
                project_exists = "PROJECT_EXISTS" in result.stdout
                return {'connected': True, 'project_exists': project_exists}
            else:
                return {'connected': False, 'project_exists': False}
        except:
            return {'connected': False, 'project_exists': False}
    
    def sync_to_gpu_server(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ —Å GPU —Å–µ—Ä–≤–µ—Ä–æ–º"""
        self.console.print("\n[cyan]üì§ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ —Å GPU —Å–µ—Ä–≤–µ—Ä–æ–º...[/cyan]")
        
        script_path = "scripts/sync_to_vast.sh"
        if Path(script_path).exists():
            subprocess.run(["bash", script_path])
            self.console.print("\n[green]‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞[/green]")
        else:
            self.console.print(f"[red]‚ùå –°–∫—Ä–∏–ø—Ç {script_path} –Ω–µ –Ω–∞–π–¥–µ–Ω[/red]")
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def launch_gpu_training(self):
        """–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ GPU —Å–µ—Ä–≤–µ—Ä–µ"""
        self.console.print("\n[cyan]üöÄ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ GPU —Å–µ—Ä–≤–µ—Ä–µ[/cyan]")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—ç—à–∞ –ª–æ–∫–∞–ª—å–Ω–æ
        cache_file = Path("cache/features_cache.pkl")
        if not cache_file.exists():
            self.console.print("[red]‚ùå –§–∞–π–ª –∫—ç—à–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ![/red]")
            self.console.print("[yellow]–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫—ç—à —á–µ—Ä–µ–∑ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏' -> '–°–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏'[/yellow]")
            Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º SSH –∞–ª–∏–∞—Å
        ssh_alias = os.environ.get('VAST_SSH_ALIAS', 'vast-current')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—ç—à–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        with self.console.status("[cyan]–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...[/cyan]"):
            result = subprocess.run(
                ["ssh", ssh_alias, 
                 "test -f /root/crypto_ai_trading/cache/features_cache.pkl && echo 'EXISTS' || echo 'NOT_EXISTS'"],
                capture_output=True,
                text=True
            )
            
        if "NOT_EXISTS" in result.stdout:
            self.console.print("[yellow]üì§ –ö—ç—à –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ...[/yellow]")
            self.console.print(f"[dim]–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {cache_file.stat().st_size / (1024*1024):.1f} MB[/dim]")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –∫–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
            subprocess.run(["ssh", ssh_alias, "mkdir -p /root/crypto_ai_trading/cache"])
            
            with Progress() as progress:
                task = progress.add_task("[cyan]–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∞...", total=100)
                result = subprocess.run(
                    ["scp", str(cache_file), f"{ssh_alias}:/root/crypto_ai_trading/cache/"],
                    capture_output=True,
                    text=True
                )
                progress.update(task, completed=100)
            
            if result.returncode == 0:
                self.console.print("[green]‚úÖ –ö—ç—à —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä[/green]")
            else:
                self.console.print("[red]‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫—ç—à–∞[/red]")
                Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
                return
        else:
            self.console.print("[green]‚úÖ –ö—ç—à –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ[/green]")
        
        # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è
        self.console.print("\n[bold cyan]–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è:[/bold cyan]")
        self.console.print("1. –î–µ–º–æ (5 —ç–ø–æ—Ö) - ~15-20 –º–∏–Ω—É—Ç")
        self.console.print("2. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ (50 —ç–ø–æ—Ö) - ~2-3 —á–∞—Å–∞")
        self.console.print("3. –ü–æ–ª–Ω–æ–µ (100 —ç–ø–æ—Ö) - ~5-6 —á–∞—Å–æ–≤")
        self.console.print("4. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ")
        
        choice = Prompt.ask("–í—ã–±–æ—Ä", default="1")
        
        if choice == "1":
            epochs = 5
            mode_choice = "1"
        elif choice == "2":
            epochs = 50
            mode_choice = "3"
        elif choice == "3":
            epochs = 100
            mode_choice = "2"
        elif choice == "4":
            epochs = IntPrompt.ask("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö", default=10)
            mode_choice = "3"
        else:
            return
        
        self.console.print(f"\n[yellow]–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ {epochs} —ç–ø–æ—Ö...[/yellow]")
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –≤ —Å–∫—Ä–∏–ø—Ç —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        env = os.environ.copy()
        env['GPU_TRAINING_MODE'] = mode_choice
        env['GPU_TRAINING_EPOCHS'] = str(epochs)
        env['USE_CACHE_ONLY'] = '1'  # –§–ª–∞–≥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—ç—à–∞
        
        # –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        script_path = "scripts/run_on_vast.sh"
        if Path(script_path).exists():
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏ –∂–¥–µ–º –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                result = subprocess.run(
                    ["bash", script_path], 
                    env=env,
                    capture_output=True,
                    text=True
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ —Å–∫—Ä–∏–ø—Ç–∞
                if result.stdout:
                    print(result.stdout)
                
                if result.returncode == 0:
                    self.console.print("\n[green]‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ![/green]")
                    
                    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                    if Confirm.ask("\n–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –±—Ä–∞—É–∑–µ—Ä–µ?"):
                        self.monitor_with_browser()
                else:
                    self.console.print(f"\n[red]‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: –∫–æ–¥ {result.returncode}[/red]")
                    if result.stderr:
                        self.console.print(f"[red]{result.stderr}[/red]")
            except Exception as e:
                self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞: {e}[/red]")
        else:
            self.console.print(f"[red]‚ùå –°–∫—Ä–∏–ø—Ç {script_path} –Ω–µ –Ω–∞–π–¥–µ–Ω[/red]")
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def monitor_with_browser(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∑–∞–ø—É—Å–∫–æ–º –±—Ä–∞—É–∑–µ—Ä–∞"""
        self.logger.info("–ó–∞–ø—É—Å–∫ monitor_with_browser")
        try:
            self.console.print("\n[cyan]üìä –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±—É—á–µ–Ω–∏—è...[/cyan]")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ TensorBoard –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            self.console.print("[yellow]–ü—Ä–æ–≤–µ—Ä–∫–∞ TensorBoard –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...[/yellow]")
            
            # –ü–æ–ª—É—á–∞–µ–º SSH –∞–ª–∏–∞—Å
            ssh_alias = os.environ.get('VAST_SSH_ALIAS', 'vast-current')
            
            result = subprocess.run(
                ["ssh", ssh_alias, "pgrep -f tensorboard"],
                capture_output=True
            )
            
            if result.returncode != 0:
                self.console.print("[yellow]TensorBoard –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å–∫–∞–µ–º...[/yellow]")
                
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –≥–¥–µ –µ—Å—Ç—å –ª–æ–≥–∏
                check_dirs = subprocess.run(
                    ["ssh", ssh_alias, 
                     "cd /root/crypto_ai_trading && find . -name 'events.out.tfevents*' | head -5"],
                    capture_output=True,
                    text=True
                )
                
                if check_dirs.stdout.strip():
                    self.console.print(f"[dim]–ù–∞–π–¥–µ–Ω—ã –ª–æ–≥–∏: {check_dirs.stdout.strip().split()[0]}[/dim]")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º TensorBoard –Ω–∞ –ø–æ—Ä—Ç—É 6007 (6006 –∑–∞–Ω—è—Ç Caddy)
                subprocess.run(
                    ["ssh", ssh_alias, 
                     "cd /root/crypto_ai_trading && pkill -f tensorboard; nohup tensorboard --logdir ./experiments/runs --bind_all --port 6007 > logs/tensorboard.log 2>&1 &"],
                    capture_output=True
                )
                time.sleep(3)
                self.console.print("[green]‚úÖ TensorBoard –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 6007[/green]")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º SSH —Å –ø—Ä–æ–±—Ä–æ—Å–æ–º –ø–æ—Ä—Ç–æ–≤
            self.console.print("[yellow]–û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç—É–Ω–Ω–µ–ª—å –∫ —Å–µ—Ä–≤–µ—Ä—É...[/yellow]")
            
            import threading
            import webbrowser
            import time as time_module
            
            def open_browser():
                time_module.sleep(3)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É —Ç—É–Ω–Ω–µ–ª—è
                self.console.print("\n[green]–û—Ç–∫—Ä—ã–≤–∞–µ–º TensorBoard –≤ –±—Ä–∞—É–∑–µ—Ä–µ...[/green]")
                self.console.print("[yellow]TensorBoard –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞: http://localhost:6007[/yellow]")
                webbrowser.open('http://localhost:6007')
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            browser_thread = threading.Thread(target=open_browser)
            browser_thread.start()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º SSH —Ç—É–Ω–Ω–µ–ª—å —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º
            env = os.environ.copy()
            env['VAST_CONNECTION_MODE'] = '1'  # –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            
            script_path = "scripts/connect_vast.sh"
            if Path(script_path).exists():
                try:
                    subprocess.run(["bash", script_path], env=env)
                except KeyboardInterrupt:
                    self.console.print("\n[yellow]–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω[/yellow]")
                except Exception as e:
                    self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞: {e}[/red]")
            else:
                self.console.print(f"[red]‚ùå –°–∫—Ä–∏–ø—Ç {script_path} –Ω–µ –Ω–∞–π–¥–µ–Ω[/red]")
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ monitor_with_browser: {e}", exc_info=True)
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞: {e}[/red]")
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def check_gpu_logs(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –Ω–∞ GPU —Å–µ—Ä–≤–µ—Ä–µ"""
        self.console.print("\n[cyan]üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞...[/cyan]")
        
        # –ü–æ–ª—É—á–∞–µ–º SSH –∞–ª–∏–∞—Å
        ssh_alias = os.environ.get('VAST_SSH_ALIAS', 'vast-current')
        
        result = subprocess.run(
            ["ssh", ssh_alias, 
             "tail -n 50 /root/crypto_ai_trading/logs/training_gpu.log 2>/dev/null || echo '–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'"],
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            self.console.print("\n[yellow]–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞:[/yellow]")
            self.console.print(result.stdout)
        else:
            self.console.print("[red]‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏[/red]")
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def configure_gpu_server(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ GPU —Å–µ—Ä–≤–µ—Ä–∞"""
        self.console.print("\n[cyan]‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GPU —Å–µ—Ä–≤–µ—Ä–∞[/cyan]")
        
        remote_config = self.config.setdefault('remote_server', {})
        
        self.console.print("\n–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        self.console.print(f"Host: {remote_config.get('primary', {}).get('host', '–ù–µ –∑–∞–¥–∞–Ω')}")
        self.console.print(f"Port: {remote_config.get('primary', {}).get('port', '–ù–µ –∑–∞–¥–∞–Ω')}")
        
        if Confirm.ask("\n–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏?"):
            host = Prompt.ask("IP –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞", default="114.32.64.6")
            port = IntPrompt.ask("SSH –ø–æ—Ä—Ç", default=40134)
            
            remote_config['enabled'] = True
            remote_config.setdefault('primary', {})['host'] = host
            remote_config.setdefault('primary', {})['port'] = port
            remote_config['user'] = 'root'
            remote_config['key_path'] = '~/.ssh/vast_ai_key'
            
            self.save_config()
            self.console.print("[green]‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã[/green]")
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def setup_db_tunnel(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—É–Ω–Ω–µ–ª—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î"""
        self.logger.info("–ó–∞–ø—É—Å–∫ setup_db_tunnel")
        try:
            self.console.print("\n[cyan]üîå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—É–Ω–Ω–µ–ª—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î[/cyan]")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ –ª–æ–∫–∞–ª—å–Ω–∞—è –ë–î
            self.console.print("[yellow]–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π PostgreSQL...[/yellow]")
            
            import socket
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            result = sock.connect_ex(('localhost', 5555))
            sock.close()
            
            if result != 0:
                self.console.print("[red]‚ùå PostgreSQL –Ω–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5555[/red]")
                self.console.print("[yellow]–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ë–î –∫–æ–º–∞–Ω–¥–æ–π:[/yellow]")
                self.console.print("   docker-compose up -d postgres")
                Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
                return
            
            self.console.print("[green]‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –ë–î –¥–æ—Å—Ç—É–ø–Ω–∞[/green]")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—É–Ω–Ω–µ–ª–∏
            result = subprocess.run(
                ["pgrep", "-f", "ssh.*-R.*5555"],
                capture_output=True
            )
            
            if result.returncode == 0:
                self.console.print("[yellow]‚ö†Ô∏è  –¢—É–Ω–Ω–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç[/yellow]")
                if Confirm.ask("–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Ç—É–Ω–Ω–µ–ª—å?"):
                    subprocess.run(["pkill", "-f", "ssh.*-R.*5555"])
                    time.sleep(1)
                else:
                    Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
                    return
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—É–Ω–Ω–µ–ª—è
            script_path = "scripts/setup_db_tunnel.sh"
            if Path(script_path).exists():
                self.console.print("[yellow]üöá –°–æ–∑–¥–∞–Ω–∏–µ SSH —Ç—É–Ω–Ω–µ–ª—è...[/yellow]")
                result = subprocess.run(
                    ["bash", script_path],
                    capture_output=True,
                    text=True
                )
                
                if result.returncode == 0:
                    self.console.print("[green]‚úÖ –¢—É–Ω–Ω–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω![/green]")
                    self.console.print("\n[cyan]–¢–µ–ø–µ—Ä—å GPU —Å–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ë–î[/cyan]")
                    self.console.print("–ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±—É—á–µ–Ω–∏—è –ë–î –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                else:
                    self.console.print("[red]‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É–Ω–Ω–µ–ª—è[/red]")
                    if result.stderr:
                        self.console.print(f"[red]{result.stderr}[/red]")
            else:
                self.console.print(f"[red]‚ùå –°–∫—Ä–∏–ø—Ç {script_path} –Ω–µ –Ω–∞–π–¥–µ–Ω[/red]")
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ setup_db_tunnel: {e}", exc_info=True)
            self.console.print(f"[red]‚ùå –û—à–∏–±–∫–∞: {e}[/red]")
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def clear_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"""
        self.console.print("\n[cyan]üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤[/cyan]")
        
        log_dirs = [
            Path("logs"),
            Path("experiments/logs"),
            Path("experiments/runs")
        ]
        
        total_size = 0
        file_count = 0
        
        for log_dir in log_dirs:
            if log_dir.exists():
                for file in log_dir.rglob("*"):
                    if file.is_file():
                        total_size += file.stat().st_size
                        file_count += 1
        
        if file_count > 0:
            size_mb = total_size / (1024 * 1024)
            self.console.print(f"\n–ù–∞–π–¥–µ–Ω–æ {file_count} —Ñ–∞–π–ª–æ–≤ ({size_mb:.1f} MB)")
            
            if Confirm.ask("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏?"):
                for log_dir in log_dirs:
                    if log_dir.exists():
                        import shutil
                        shutil.rmtree(log_dir)
                        log_dir.mkdir(exist_ok=True)
                
                self.console.print("[green]‚úÖ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã[/green]")
        else:
            self.console.print("[yellow]–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã[/yellow]")
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def show_system_info(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
        self.console.print(Panel("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ", style="cyan"))
        
        # –í–µ—Ä—Å–∏—è Python
        import sys
        self.console.print(f"\n[cyan]Python:[/cyan] {sys.version.split()[0]}")
        
        # –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
        try:
            import torch
            self.console.print(f"[cyan]PyTorch:[/cyan] {torch.__version__}")
        except:
            pass
        
        try:
            import pandas as pd
            self.console.print(f"[cyan]Pandas:[/cyan] {pd.__version__}")
        except:
            pass
        
        # –°—Ç–∞—Ç—É—Å GPU
        try:
            import torch
            if torch.cuda.is_available():
                self.console.print(f"\n[green]‚úÖ GPU –¥–æ—Å—Ç—É–ø–µ–Ω:[/green] {torch.cuda.get_device_name(0)}")
            else:
                self.console.print("\n[yellow]‚ö†Ô∏è GPU –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU[/yellow]")
        except:
            pass
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
        self.console.print("\n[cyan]–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:[/cyan]")
        dirs = ["data", "models", "training", "trading", "utils", "config", "cache", "experiments"]
        for dir_name in dirs:
            dir_path = Path(dir_name)
            if dir_path.exists():
                file_count = len(list(dir_path.glob("*.py")))
                self.console.print(f"  üìÅ {dir_name}/ ({file_count} —Ñ–∞–π–ª–æ–≤)")
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–æ–¥–µ–ª–∏
        models_dir = Path("models_saved")
        if models_dir.exists():
            models = sorted(models_dir.glob("*.pth"), key=lambda x: x.stat().st_mtime, reverse=True)
            if models:
                self.console.print(f"\n[cyan]–ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–æ–¥–µ–ª–∏:[/cyan]")
                for model in models[:3]:
                    size = model.stat().st_size / (1024 * 1024)  # MB
                    mtime = datetime.fromtimestamp(model.stat().st_mtime).strftime("%Y-%m-%d %H:%M")
                    self.console.print(f"  ‚Ä¢ {model.name} ({size:.1f} MB, {mtime})")
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def quick_start(self):
        """–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫"""
        self.console.print("\n[cyan]üöÄ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã[/cyan]")
        
        steps = [
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î", lambda: subprocess.run(["python", "-c", "from data.data_loader import CryptoDataLoader; print('OK')"], capture_output=True).returncode == 0),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö", lambda: Path("cache/features_cache.pkl").exists()),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π", lambda: Path("models").exists()),
        ]
        
        all_ok = True
        for step_name, check_func in steps:
            try:
                if check_func():
                    self.console.print(f"‚úÖ {step_name}")
                else:
                    self.console.print(f"‚ùå {step_name}")
                    all_ok = False
            except:
                self.console.print(f"‚ùå {step_name}")
                all_ok = False
        
        if all_ok:
            self.console.print("\n[green]–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ![/green]")
            
            if Confirm.ask("\n–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω?"):
                self.console.print("\n[cyan]–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:[/cyan]")
                self.console.print("1. –¢–æ–ª—å–∫–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
                self.console.print("2. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö + –æ–±—É—á–µ–Ω–∏–µ")
                self.console.print("3. –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω (–¥–∞–Ω–Ω—ã–µ + –æ–±—É—á–µ–Ω–∏–µ + –±—ç–∫—Ç–µ—Å—Ç)")
                
                mode_choice = Prompt.ask("–í—ã–±–æ—Ä", default="2")
                
                if mode_choice == "1":
                    subprocess.run(["python", "run_full_pipeline.py", "--mode", "data"])
                elif mode_choice == "2":
                    subprocess.run(["python", "run_full_pipeline.py", "--mode", "demo"])
                elif mode_choice == "3":
                    subprocess.run(["python", "run_full_pipeline.py", "--mode", "full"])
        else:
            self.console.print("\n[yellow]‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã[/yellow]")
        
        Prompt.ask("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    
    def run(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –º–µ–Ω—é"""
        while True:
            self.display_main_menu()
            choice = Prompt.ask("\n[bold cyan]–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é[/bold cyan]", default="0")
            
            if choice == "1":
                self.data_management_menu()
            elif choice == "2":
                self.training_menu()
            elif choice == "3":
                self.monitoring_menu()
            elif choice == "4":
                self.settings_menu()
            elif choice == "5":
                self.utilities_menu()
            elif choice == "6":
                self.show_system_info()
            elif choice == "7":
                self.quick_start()
            elif choice == "0":
                if Confirm.ask("\n[yellow]–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?[/yellow]"):
                    self.console.print("\n[cyan]–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã[/cyan]")
                    break
            else:
                self.console.print("[red]–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.[/red]")
                time.sleep(1)


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    menu_logger.info("="*60)
    menu_logger.info("–ó–∞–ø—É—Å–∫ Crypto AI Trading System")
    menu_logger.info(f"–§–∞–π–ª –ª–æ–≥–æ–≤: {log_file}")
    menu_logger.info("="*60)
    
    try:
        menu = CryptoTradingMenu()
        menu.run()
    except KeyboardInterrupt:
        menu_logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        console.print("\n\n[yellow]–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º[/yellow]")
    except Exception as e:
        menu_logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        console.print(f"\n[red]–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}[/red]")
        import traceback
        traceback.print_exc()
    finally:
        menu_logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")


if __name__ == "__main__":
    main()
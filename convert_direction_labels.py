"""
–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö direction –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —á–∏—Å–ª–æ–≤—ã–µ
"""

import pandas as pd
import numpy as np
from pathlib import Path

def convert_direction_to_numeric(df: pd.DataFrame) -> pd.DataFrame:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ direction –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —á–∏—Å–ª–æ–≤—ã–µ
    
    –ú–∞–ø–ø–∏–Ω–≥:
    - UP -> 0
    - DOWN -> 1  
    - FLAT -> 2
    """
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é
    df = df.copy()
    
    # –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    direction_mapping = {
        'UP': 0,
        'DOWN': 1,
        'FLAT': 2
    }
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ direction –∫–æ–ª–æ–Ω–∫–∏
    direction_cols = [col for col in df.columns if col.startswith('direction_')]
    
    print(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è {len(direction_cols)} direction –∫–æ–ª–æ–Ω–æ–∫...")
    
    for col in direction_cols:
        if pd.api.types.is_categorical_dtype(df[col]):
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫–∏, –∑–∞—Ç–µ–º –≤ —á–∏—Å–ª–∞
            df[col] = df[col].astype(str).map(direction_mapping)
        elif df[col].dtype == 'object':
            # –ï—Å–ª–∏ —É–∂–µ —Å—Ç—Ä–æ–∫–∏
            df[col] = df[col].map(direction_mapping)
        else:
            # –£–∂–µ —á–∏—Å–ª–æ–≤—ã–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
            unique_vals = df[col].unique()
            if not all(v in [0, 1, 2] for v in unique_vals if pd.notna(v)):
                print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ {col}: {unique_vals}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        print(f"   {col}: {df[col].value_counts().sort_index().to_dict()}")
    
    return df


def convert_all_datasets():
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –¥–∞—Ç–∞—Å–µ—Ç—ã"""
    
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é direction –º–µ—Ç–æ–∫...")
    
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    data_files = {
        'train': Path('data/processed/train_data.parquet'),
        'val': Path('data/processed/val_data.parquet'),
        'test': Path('data/processed/test_data.parquet')
    }
    
    # –°–æ–∑–¥–∞–µ–º backup –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    backup_dir = Path('data/processed/backup')
    backup_dir.mkdir(exist_ok=True)
    
    for name, file_path in data_files.items():
        if file_path.exists():
            print(f"\nüìä –û–±—Ä–∞–±–æ—Ç–∫–∞ {name} –¥–∞–Ω–Ω—ã—Ö...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            df = pd.read_parquet(file_path)
            print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(df)} —Å—Ç—Ä–æ–∫")
            
            # –°–æ–∑–¥–∞–µ–º backup
            backup_path = backup_dir / f"{name}_data_backup.parquet"
            df.to_parquet(backup_path)
            print(f"   Backup —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {backup_path}")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
            df_converted = convert_direction_to_numeric(df)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            df_converted.to_parquet(file_path)
            print(f"   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {file_path}")
    
    print("\n‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("üìÅ Backup —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ data/processed/backup/")


if __name__ == "__main__":
    convert_all_datasets()
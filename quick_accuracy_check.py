#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –º–æ–¥–µ–ª–∏
"""

import torch
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from pathlib import Path
from datetime import datetime
import yaml

print("üîç –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π...")
print("=" * 80)

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
checkpoint = torch.load('models_saved/best_model.pth', map_location=device)

from models.patchtst_unified import UnifiedPatchTSTForTrading as UnifiedPatchTST
model = UnifiedPatchTST(checkpoint['config'])
model.load_state_dict(checkpoint['model_state_dict'])
model.to(device)
model.eval()

print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (Val Loss: {checkpoint.get('val_loss', 'N/A'):.6f})")

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
print("\nüìä –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
test_data = pd.read_parquet('data/processed/test_data.parquet')

# –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
test_sample = test_data.tail(1000).copy()
print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(test_sample)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
feature_cols = [col for col in test_sample.columns 
               if not col.startswith(('future_', 'direction_', 'volatility_', 'volume_change_', 'price_range_'))
               and col not in ['datetime', 'symbol', 'open', 'high', 'low', 'close', 'volume']]

# –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 240 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–∫–∞–∫ –æ–±—É—á–µ–Ω–∞ –º–æ–¥–µ–ª—å)
feature_cols = feature_cols[:240]

# –¶–µ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
target_cols = [col for col in test_sample.columns if col.startswith(('future_', 'direction_', 'volatility_', 'volume_change_', 'price_range_'))][:20]

print(f"\nüìä –ü—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(feature_cols)}, –¶–µ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {len(target_cols)}")

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥–µ–ª–∏
X = torch.tensor(test_sample[feature_cols].values, dtype=torch.float32).to(device)
y_true = test_sample[target_cols].values

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –¥–ª—è –º–æ–¥–µ–ª–∏ [batch, seq_len, features]
X = X.unsqueeze(1)  # seq_len = 1

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
print("\nüîÆ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π...")
with torch.no_grad():
    y_pred = model(X).cpu().numpy()

print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {y_pred.shape}")

# –ê–Ω–∞–ª–∏–∑ —Ç–æ—á–Ω–æ—Å—Ç–∏
print("\n" + "=" * 70)
print("üìä –ê–ù–ê–õ–ò–ó –¢–û–ß–ù–û–°–¢–ò –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ô:")
print("=" * 70)

# –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ (–ø–µ—Ä–≤—ã–µ 4 –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ)
print("\nüéØ –¢–û–ß–ù–û–°–¢–¨ –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø –î–û–•–û–î–ù–û–°–¢–ò:")
print("-" * 50)

timeframes = ['15m', '1h', '4h', '12h']
for i, tf in enumerate(timeframes):
    pred = y_pred[:, i]
    true = y_true[:, i]
    
    # MAE –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    mae = np.mean(np.abs(pred - true)) * 100
    
    # –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    pred_direction = (pred > 0).astype(int)
    true_direction = (true > 0).astype(int)
    direction_accuracy = np.mean(pred_direction == true_direction)
    
    # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è
    correlation = np.corrcoef(pred, true)[0, 1]
    
    print(f"future_return_{tf:3s} | MAE: {mae:5.2f}% | –¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {direction_accuracy:.1%} | –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {correlation:.3f}")

# –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Å–ª–µ–¥—É—é—â–∏–µ 4 –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ)
print("\nüéØ –¢–û–ß–ù–û–°–¢–¨ –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø:")
print("-" * 50)

for i, tf in enumerate(timeframes):
    pred = y_pred[:, i+4]
    true = y_true[:, i+4]
    
    # –ë–∏–Ω–∞—Ä–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
    pred_binary = (pred > 0.5).astype(int)
    true_binary = (true > 0.5).astype(int)
    
    accuracy = np.mean(pred_binary == true_binary)
    
    # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    tp = np.sum((pred_binary == 1) & (true_binary == 1))
    tn = np.sum((pred_binary == 0) & (true_binary == 0))
    total_positive = np.sum(true_binary == 1)
    total_negative = np.sum(true_binary == 0)
    
    print(f"direction_{tf:3s}     | –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1%} | –£–≥–∞–¥–∞–Ω–æ —Ä–æ—Å—Ç: {tp}/{total_positive} | –£–≥–∞–¥–∞–Ω–æ –ø–∞–¥–µ–Ω–∏–µ: {tn}/{total_negative}")

# –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
print("\n" + "=" * 70)
print("üí∞ –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ –¢–û–†–ì–û–í–û–ô –°–¢–†–ê–¢–ï–ì–ò–ò:")
print("=" * 70)

# –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: —Ç–æ—Ä–≥—É–µ–º –∫–æ–≥–¥–∞ –º–æ–¥–µ–ª—å —É–≤–µ—Ä–µ–Ω–∞ –≤ –¥–≤–∏–∂–µ–Ω–∏–∏ > 0.5%
trades = []
for i in range(len(y_pred)):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ 1 —á–∞—Å
    pred_return = y_pred[i, 1]  # future_return_1h
    pred_direction = y_pred[i, 5]  # direction_1h
    true_return = y_true[i, 1]
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –µ—Å–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ > 0.5%
    if abs(pred_return) > 0.005 and pred_direction > 0.6:  # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å > 60%
        # –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏
        if pred_return > 0:  # Long
            profit = true_return - 0.001  # –ú–∏–Ω—É—Å –∫–æ–º–∏—Å—Å–∏—è
        else:  # Short
            profit = -true_return - 0.001
            
        trades.append(profit)

if trades:
    trades = np.array(trades)
    winning_trades = np.sum(trades > 0)
    total_return = np.sum(trades)
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–ø–æ—Ä–æ–≥ 0.5%, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å 60%):")
    print(f"   –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {len(trades)}")
    print(f"   –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {winning_trades} ({winning_trades/len(trades)*100:.1f}%)")
    print(f"   –°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {np.mean(trades)*100:.3f}%")
    print(f"   –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {total_return*100:.2f}%")
    print(f"   –ú–∞–∫—Å. –ø—Ä–∏–±—ã–ª—å: {np.max(trades)*100:.2f}%")
    print(f"   –ú–∞–∫—Å. —É–±—ã—Ç–æ–∫: {np.min(trades)*100:.2f}%")
else:
    print("\n‚ö†Ô∏è –ù–µ—Ç —Å–¥–µ–ª–æ–∫ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º")

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
print("\nüìä –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...")

output_dir = Path('experiments/accuracy_analysis')
output_dir.mkdir(parents=True, exist_ok=True)

# –ì—Ä–∞—Ñ–∏–∫ scatter plot –¥–ª—è 1h –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
plt.figure(figsize=(10, 8))
plt.scatter(y_true[:, 1] * 100, y_pred[:, 1] * 100, alpha=0.5, s=20)
plt.plot([-3, 3], [-3, 3], 'r--', lw=2, label='–ò–¥–µ–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ')
plt.xlabel('–†–µ–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞ 1—á (%)')
plt.ylabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞ 1—á (%)')
plt.title('–¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ (1 —á–∞—Å)')
plt.legend()
plt.grid(True, alpha=0.3)
plt.xlim(-3, 3)
plt.ylim(-3, 3)

# –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –≥—Ä–∞—Ñ–∏–∫
mae_1h = np.mean(np.abs(y_pred[:, 1] - y_true[:, 1])) * 100
corr_1h = np.corrcoef(y_pred[:, 1], y_true[:, 1])[0, 1]
plt.text(0.05, 0.95, f'MAE: {mae_1h:.2f}%\n–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {corr_1h:.3f}', 
         transform=plt.gca().transAxes, verticalalignment='top',
         bbox=dict(boxstyle='round', facecolor='white', alpha=0.8))

plt.savefig(output_dir / 'quick_accuracy_check.png', dpi=300)
plt.close()

# –ò—Ç–æ–≥–æ–≤—ã–π –≤–µ—Ä–¥–∏–∫—Ç
print("\n" + "=" * 80)
print("üéØ –ò–¢–û–ì–û–í–´–ô –í–ï–†–î–ò–ö–¢:")
print("=" * 80)

# –°—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏
avg_direction_accuracy = np.mean([np.mean((y_pred[:, i] > 0) == (y_true[:, i] > 0)) for i in range(4)])
avg_mae = np.mean([np.mean(np.abs(y_pred[:, i] - y_true[:, i])) * 100 for i in range(4)])

if avg_direction_accuracy > 0.55:
    print(f"‚úÖ –ú–û–î–ï–õ–¨ –†–ê–ë–û–¢–ê–ï–¢! –¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {avg_direction_accuracy:.1%}")
    print(f"   –°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {avg_mae:.2f}%")
    print("\nüí° –ú–æ–¥–µ–ª—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏")
    verdict = "–ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ"
else:
    print(f"‚ö†Ô∏è –ú–û–î–ï–õ–¨ –¢–†–ï–ë–£–ï–¢ –£–õ–£–ß–®–ï–ù–ò–Ø. –¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {avg_direction_accuracy:.1%}")
    print(f"   –°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {avg_mae:.2f}%")
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
    verdict = "–¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò"

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
report = {
    'timestamp': datetime.now().isoformat(),
    'samples_analyzed': len(test_sample),
    'avg_direction_accuracy': float(avg_direction_accuracy),
    'avg_mae_percent': float(avg_mae),
    'trades_simulated': len(trades) if trades else 0,
    'verdict': verdict
}

report_file = output_dir / f'quick_accuracy_report_{datetime.now().strftime("%Y%m%d_%H%M%S")}.yaml'
with open(report_file, 'w') as f:
    yaml.dump(report, f)

print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
print("=" * 80)
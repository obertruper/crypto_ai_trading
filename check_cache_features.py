"""–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ –∫—ç—à–∞"""
import h5py
import numpy as np
from pathlib import Path

print("üîç –ü–†–û–í–ï–†–ö–ê –†–ê–ó–ú–ï–†–ù–û–°–¢–ò –ü–†–ò–ó–ù–ê–ö–û–í –í –ö–≠–®–ï")
print("="*60)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º train –∫—ç—à
cache_file = Path('cache/precomputed/train_w96_s1.h5')

if cache_file.exists():
    with h5py.File(cache_file, 'r') as f:
        X_shape = f['X'].shape
        y_shape = f['y'].shape
        
        print(f"üìÅ –§–∞–π–ª: {cache_file}")
        print(f"  - X shape: {X_shape}")
        print(f"  - y shape: {y_shape}")
        print(f"  - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ç–º–ø–ª–æ–≤: {X_shape[0]:,}")
        print(f"  - –î–ª–∏–Ω–∞ –æ–∫–Ω–∞ (timesteps): {X_shape[1]}")
        print(f"  - –ö–û–õ–ò–ß–ï–°–¢–í–û –ü–†–ò–ó–ù–ê–ö–û–í: {X_shape[2]}")
        print(f"  - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {y_shape[2]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π –±–∞—Ç—á –¥–∞–Ω–Ω—ã—Ö
        X_sample = f['X'][0]
        print(f"\nüìä –ü–µ—Ä–≤—ã–π —Å—ç–º–ø–ª:")
        print(f"  - Shape: {X_sample.shape}")
        print(f"  - Min value: {X_sample.min():.4f}")
        print(f"  - Max value: {X_sample.max():.4f}")
        print(f"  - Mean value: {X_sample.mean():.4f}")
        print(f"  - Std value: {X_sample.std():.4f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ NaN –∏–ª–∏ Inf
        has_nan = np.isnan(X_sample).any()
        has_inf = np.isinf(X_sample).any()
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö:")
        print(f"  - –°–æ–¥–µ—Ä–∂–∏—Ç NaN: {has_nan}")
        print(f"  - –°–æ–¥–µ—Ä–∂–∏—Ç Inf: {has_inf}")
else:
    print(f"‚ùå –§–∞–π–ª {cache_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –∫—ç—à–∏
print(f"\nüìÇ –î—Ä—É–≥–∏–µ –∫—ç—à-—Ñ–∞–π–ª—ã:")
cache_dir = Path('cache/precomputed')
for file in cache_dir.glob('*.h5'):
    with h5py.File(file, 'r') as f:
        X_shape = f['X'].shape
        print(f"  - {file.name}: X={X_shape}, features={X_shape[2]}")
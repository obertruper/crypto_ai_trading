#!/usr/bin/env python3
"""
üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê –ò GPU –û–ë–£–ß–ï–ù–ò–ï
=========================================
–í–µ—Ä—Å–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import subprocess
import sys
import os

def install_package(package):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
    try:
        __import__(package.split('[')[0].split('=')[0])
        print(f"‚úÖ {package} —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True
    except ImportError:
        print(f"üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º {package}...")
        try:
            subprocess.check_call([sys.executable, '-m', 'pip', 'install', package])
            print(f"‚úÖ {package} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
        except:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package}")
            return False

def check_and_install_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –ò –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô")
    print("=" * 40)
    
    packages = [
        'numpy',
        'pandas', 
        'scikit-learn',
        'tensorflow==2.15.0',
        'psutil',
        'tqdm'
    ]
    
    all_installed = True
    for package in packages:
        if not install_package(package):
            all_installed = False
    
    return all_installed

def check_gpu():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ GPU"""
    try:
        import tensorflow as tf
        print("\nüéØ –ü–†–û–í–ï–†–ö–ê GPU")
        print("=" * 20)
        print(f"TensorFlow –≤–µ—Ä—Å–∏—è: {tf.__version__}")
        
        gpus = tf.config.list_physical_devices('GPU')
        print(f"–ù–∞–π–¥–µ–Ω–æ GPU: {len(gpus)}")
        
        for i, gpu in enumerate(gpus):
            print(f"GPU {i}: {gpu.name}")
            tf.config.experimental.set_memory_growth(gpu, True)
        
        return len(gpus) > 0
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ GPU: {e}")
        return False

def create_simple_cache():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –∫–µ—à–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        import pandas as pd
        import numpy as np
        
        print("\nüè≠ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –ö–ï–®–ê")
        print("=" * 30)
        
        n_samples = 50000  # –ú–µ–Ω—å—à–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        np.random.seed(42)
        
        # –ü—Ä–æ—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
        timestamps = pd.date_range(start='2020-01-01', periods=n_samples, freq='1H')
        prices = 50000 + np.cumsum(np.random.normal(0, 100, n_samples))
        
        data = {
            'timestamp': timestamps,
            'open': prices * (0.998 + 0.004 * np.random.random(n_samples)),
            'high': prices * (1.001 + 0.002 * np.random.random(n_samples)),
            'low': prices * (0.999 - 0.002 * np.random.random(n_samples)),
            'close': prices,
            'volume': np.random.lognormal(10, 1, n_samples),
            'rsi': 30 + 40 * np.random.random(n_samples),
            'macd': np.random.normal(0, 100, n_samples),
            'bb_upper': prices * 1.02,
            'bb_lower': prices * 0.98,
            'volatility': np.random.uniform(0.01, 0.05, n_samples),
            'close_next_1h': prices * (1 + np.random.normal(0, 0.01, n_samples)),
            'close_next_4h': prices * (1 + np.random.normal(0, 0.02, n_samples)),
            'close_next_24h': prices * (1 + np.random.normal(0, 0.05, n_samples)),
            'close_next_7d': prices * (1 + np.random.normal(0, 0.1, n_samples)),
        }
        
        df = pd.DataFrame(data)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        cache_file = 'simple_cache.parquet'
        df.to_parquet(cache_file)
        
        cache_size = os.path.getsize(cache_file) / (1024**2)
        print(f"‚úÖ –ö–µ—à —Å–æ–∑–¥–∞–Ω: {cache_size:.1f} MB")
        print(f"üìä –î–∞–Ω–Ω—ã–µ: {df.shape[0]:,} –∑–∞–ø–∏—Å–µ–π, {df.shape[1]} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        
        return df
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–µ—à–∞: {e}")
        return None

def simple_gpu_training(df):
    """–ü—Ä–æ—Å—Ç–æ–µ GPU –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        import tensorflow as tf
        import numpy as np
        from sklearn.preprocessing import RobustScaler
        from sklearn.model_selection import train_test_split
        
        print("\nüöÄ –ü–†–û–°–¢–û–ï GPU –û–ë–£–ß–ï–ù–ò–ï")
        print("=" * 25)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        target_cols = ['close_next_1h', 'close_next_4h', 'close_next_24h', 'close_next_7d']
        feature_cols = [col for col in df.columns if col not in target_cols + ['timestamp']]
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        scaler = RobustScaler()
        X_data = scaler.fit_transform(df[feature_cols].values)
        y_data = df[target_cols].values
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
        seq_length = 24
        X, y = [], []
        
        for i in range(len(X_data) - seq_length):
            X.append(X_data[i:i+seq_length])
            y.append(y_data[i+seq_length])
        
        X = np.array(X, dtype=np.float32)
        y = np.array(y, dtype=np.float32)
        
        print(f"üìä –î–∞–Ω–Ω—ã–µ: X={X.shape}, y={y.shape}")
        
        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
        
        # –ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å
        with tf.device('/GPU:0'):
            model = tf.keras.Sequential([
                tf.keras.layers.LSTM(64, return_sequences=True, input_shape=(seq_length, len(feature_cols))),
                tf.keras.layers.Dropout(0.2),
                tf.keras.layers.LSTM(32, return_sequences=False),
                tf.keras.layers.Dropout(0.2),
                tf.keras.layers.Dense(32, activation='relu'),
                tf.keras.layers.Dense(len(target_cols))
            ])
        
        model.compile(optimizer='adam', loss='mse', metrics=['mae'])
        
        print(f"üß† –ú–æ–¥–µ–ª—å: {model.count_params():,} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        
        # –û–±—É—á–µ–Ω–∏–µ
        print("üî• –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ GPU...")
        history = model.fit(
            X_train, y_train,
            validation_split=0.2,
            epochs=5,  # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
            batch_size=32,
            verbose=1
        )
        
        # –û—Ü–µ–Ω–∫–∞
        test_loss, test_mae = model.evaluate(X_test, y_test, verbose=0)
        print(f"üìä Test Loss: {test_loss:.6f}")
        print(f"üìä Test MAE: {test_mae:.6f}")
        
        print("üéâ –¢–ï–°–¢–û–í–û–ï GPU –û–ë–£–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê GPU –°–ï–†–í–ï–†–ê")
    print("=" * 50)
    
    # 1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not check_and_install_dependencies():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        return
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ GPU
    if not check_gpu():
        print("‚ùå GPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    # 3. –°–æ–∑–¥–∞–Ω–∏–µ –∫–µ—à–∞
    df = create_simple_cache()
    if df is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–µ—à")
        return
    
    # 4. –¢–µ—Å—Ç–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ
    if simple_gpu_training(df):
        print("\nüéØ –í–°–ï –†–ê–ë–û–¢–ê–ï–¢! –°–ï–†–í–ï–† –ì–û–¢–û–í –ö –ü–û–õ–ù–û–ú–£ –û–ë–£–ß–ï–ù–ò–Æ!")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –æ–±—É—á–µ–Ω–∏–∏")

if __name__ == "__main__":
    main()

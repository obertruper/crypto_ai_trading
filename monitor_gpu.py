#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ GPU –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è
"""
import subprocess
import time
import datetime

print("üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ GPU RTX 5090")
print("="*80)

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–º 10 —Å–µ–∫—É–Ω–¥ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 1 —Å–µ–∫—É–Ω–¥–∞
for i in range(10):
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É GPU
    result = subprocess.run([
        'nvidia-smi', 
        '--query-gpu=timestamp,gpu_name,temperature.gpu,utilization.gpu,utilization.memory,memory.used,memory.total,power.draw',
        '--format=csv,noheader,nounits'
    ], capture_output=True, text=True)
    
    if result.returncode == 0:
        data = result.stdout.strip()
        parts = data.split(', ')
        
        timestamp = parts[0]
        gpu_name = parts[1]
        temp = float(parts[2])
        gpu_util = float(parts[3])
        mem_util = float(parts[4])
        mem_used = float(parts[5])
        mem_total = float(parts[6])
        power = float(parts[7])
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø–∞–º—è—Ç–∏
        mem_percent = (mem_used / mem_total) * 100
        
        print(f"\n[{datetime.datetime.now().strftime('%H:%M:%S')}] –ò—Ç–µ—Ä–∞—Ü–∏—è {i+1}/10:")
        print(f"  üå°Ô∏è  –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C")
        print(f"  ‚ö° GPU —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è: {gpu_util}%")
        print(f"  üíæ –ü–∞–º—è—Ç—å: {mem_used:.0f}/{mem_total:.0f} MB ({mem_percent:.1f}%)")
        print(f"  üîå –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {power:.1f}W / 600W")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if gpu_util < 80:
            print(f"  ‚ö†Ô∏è  GPU —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è –Ω–∏–∑–∫–∞—è ({gpu_util}%)")
            
        if mem_percent > 90:
            print(f"  ‚ö†Ô∏è  –ü–∞–º—è—Ç—å –ø–æ—á—Ç–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ ({mem_percent:.1f}%)")
        
    time.sleep(1)

print("\n" + "="*80)
print("üìä –ê–ù–ê–õ–ò–ó:")
print("- RTX 5090 –∏–º–µ–µ—Ç 32GB –ø–∞–º—è—Ç–∏")
print("- –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è GPU: 85-95%")
print("- –¢–µ–∫—É—â–∏–π batch_size: 1024")
print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏:")
print("1. –£–≤–µ–ª–∏—á–∏—Ç—å batch_size –¥–æ 2048 –∏–ª–∏ 3072")
print("2. –í–∫–ª—é—á–∏—Ç—å gradient_accumulation_steps: 2")
print("3. –£–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏ (d_model, d_ff)")
print("4. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ —Å–ª–æ–µ–≤ (e_layers)")
#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è
"""

import torch
import numpy as np
import matplotlib.pyplot as plt
from pathlib import Path
from datetime import datetime

print("üîç –ê–Ω–∞–ª–∏–∑ —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—É—á–µ–Ω–∏—è...")
print("=" * 80)

# –ó–∞–≥—Ä—É–∑–∫–∞ checkpoint
checkpoint = torch.load('models_saved/best_model.pth', map_location='cpu')

# –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—É—á–µ–Ω–∏—è
if 'history' in checkpoint:
    history = checkpoint['history']
    train_loss = history.get('train_loss', [])
    val_loss = history.get('val_loss', [])
    
    if train_loss and val_loss:
        # –ê–Ω–∞–ª–∏–∑ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        final_train = train_loss[-1]
        final_val = val_loss[-1]
        best_val = min(val_loss)
        
        print(f"üìä –ê–Ω–∞–ª–∏–∑ Loss:")
        print(f"   Final Train Loss: {final_train:.6f}")
        print(f"   Final Val Loss: {final_val:.6f}")
        print(f"   Best Val Loss: {best_val:.6f}")
        print(f"   Overfitting ratio: {final_train/final_val:.3f}")

# –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è Val Loss –¥–ª—è –Ω–∞—à–µ–π –∑–∞–¥–∞—á–∏
val_loss = checkpoint.get('val_loss', 0.1315)

print(f"\nüìà –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è Val Loss = {val_loss:.6f}:")
print("-" * 50)

# Val Loss —ç—Ç–æ MSE –¥–ª—è 20 –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
# –°—Ä–µ–¥–Ω–∏–π loss –Ω–∞ –æ–¥–Ω—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
avg_loss_per_var = val_loss / 20
rmse_per_var = np.sqrt(avg_loss_per_var)

print(f"   –°—Ä–µ–¥–Ω–∏–π Loss –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é: {avg_loss_per_var:.6f}")
print(f"   –°—Ä–µ–¥–Ω–∏–π RMSE –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é: {rmse_per_var:.6f}")

# –û—Ü–µ–Ω–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
print("\nüéØ –û–∂–∏–¥–∞–µ–º–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ —Ç–∏–ø–∞–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π:")
print("-" * 50)

# –î–ª—è future_return (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –ø—Ä–∏–º–µ—Ä–Ω–æ [-0.1, 0.1])
expected_mae_return = rmse_per_var * 0.8  # MAE –æ–±—ã—á–Ω–æ ~80% –æ—Ç RMSE
expected_mae_return_pct = expected_mae_return * 100

print(f"1. –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ (future_return):")
print(f"   - –û–∂–∏–¥–∞–µ–º–∞—è MAE: ~{expected_mae_return_pct:.2f}%")
print(f"   - –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç: –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–º –¥–≤–∏–∂–µ–Ω–∏–∏ 2%, –º–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∂–µ—Ç 2% ¬± {expected_mae_return_pct:.2f}%")

# –î–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–±–∏–Ω–∞—Ä–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è)
# Loss 0.13 –¥–ª—è –±–∏–Ω–∞—Ä–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç accuracy ~75-80%
expected_direction_accuracy = 1 - np.sqrt(val_loss) * 1.5  # –≠–º–ø–∏—Ä–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞

print(f"\n2. –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (direction):")
print(f"   - –û–∂–∏–¥–∞–µ–º–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: ~{expected_direction_accuracy:.1%}")
print(f"   - –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç: –∏–∑ 100 —Å–¥–µ–ª–æ–∫ ~{int(expected_direction_accuracy*100)} –±—É–¥—É—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏")

# –î–ª—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
print(f"\n3. –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏:")
print(f"   - –û–∂–∏–¥–∞–µ–º–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é: ~0.6-0.7")
print(f"   - –ü–æ–º–æ–∂–µ—Ç –∏–∑–±–µ–≥–∞—Ç—å –ø–µ—Ä–∏–æ–¥–æ–≤ –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞")

# –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞
print("\n" + "=" * 70)
print("üí∞ –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ê–Ø –¶–ï–ù–ù–û–°–¢–¨ –î–õ–Ø –¢–û–†–ì–û–í–õ–ò:")
print("=" * 70)

# –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–∂–∏–¥–∞–µ–º–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
n_trades = 100
win_rate = expected_direction_accuracy
avg_win = 0.015  # 1.5% —Å—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å
avg_loss = 0.01  # 1% —Å—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫
commission = 0.001  # 0.1% –∫–æ–º–∏—Å—Å–∏—è

expected_return_per_trade = (win_rate * avg_win - (1-win_rate) * avg_loss - commission) * 100
expected_total_return = expected_return_per_trade * n_trades / 100

print(f"\n–û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–æ—Ä–≥–æ–≤–ª–∏:")
print(f"   Win Rate: {win_rate:.1%}")
print(f"   –°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —Å–¥–µ–ª–∫—É: {expected_return_per_trade:.3f}%")
print(f"   –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –Ω–∞ 100 —Å–¥–µ–ª–æ–∫: {expected_total_return:.1f}%")

if expected_return_per_trade > 0.1:
    print(f"\n‚úÖ –ú–æ–¥–µ–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–û–ï –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ!")
    print(f"   –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–µ")
else:
    print(f"\n‚ö†Ô∏è –ú–æ–¥–µ–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∏–∑–∫–æ–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ")
    print(f"   –¢—Ä–µ–±—É–µ—Ç—Å—è –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å")

# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –±–µ–Ω—á–º–∞—Ä–∫–∞–º–∏
print("\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ç–∏–ø–∏—á–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏:")
print("-" * 50)
print(f"   –°–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: Win Rate = 50%, –ü—Ä–∏–±—ã–ª—å = -0.1% (–∫–æ–º–∏—Å—Å–∏–∏)")
print(f"   –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: Win Rate = 52-55%")
print(f"   –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ ML –º–æ–¥–µ–ª–∏: Win Rate = 55-60%")
print(f"   –ù–∞—à–∞ –º–æ–¥–µ–ª—å: Win Rate = {win_rate:.1%} {'‚úÖ –û–¢–õ–ò–ß–ù–û!' if win_rate > 0.55 else '‚ö†Ô∏è –°—Ä–µ–¥–Ω–µ'}")

# –†–∏—Å–∫–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
print("\n‚ö†Ô∏è –í–ê–ñ–ù–´–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø:")
print("-" * 50)
print("1. –†–µ–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π")
print("2. –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö - —Ä—ã–Ω–æ–∫ –º–µ–Ω—è–µ—Ç—Å—è")
print("3. –ù–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ –∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å")
print("4. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç")

# –§–∏–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
print("\n" + "=" * 80)
print("üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–¶–ï–ù–ö–ê:")
print("=" * 80)

if val_loss < 0.15 and expected_direction_accuracy > 0.55:
    print("‚úÖ –ú–û–î–ï–õ–¨ –ì–û–¢–û–í–ê –ö –û–°–¢–û–†–û–ñ–ù–û–ú–£ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ")
    print(f"   - Val Loss {val_loss:.6f} - –æ—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
    print(f"   - –û–∂–∏–¥–∞–µ–º–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å {expected_direction_accuracy:.1%} - –≤—ã—à–µ —Å–ª—É—á–∞–π–Ω–æ–π")
    print(f"   - –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ")
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("   1. –ù–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª—ã—Ö –ø–æ–∑–∏—Ü–∏–π (0.5-1% –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞)")
    print("   2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ stop-loss –Ω–∞ –∫–∞–∂–¥–æ–π —Å–¥–µ–ª–∫–µ")
    print("   3. –í–µ–¥–∏—Ç–µ –∂—É—Ä–Ω–∞–ª —Å–¥–µ–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    print("   4. –ë—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ã –∫ –ø—Ä–æ—Å–∞–¥–∫–∞–º –¥–æ 10-15%")
else:
    print("‚ö†Ô∏è –ú–û–î–ï–õ–¨ –¢–†–ï–ë–£–ï–¢ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ô –ü–†–û–í–ï–†–ö–ò")
    print(f"   - Val Loss {val_loss:.6f}")
    print(f"   - –û–∂–∏–¥–∞–µ–º–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å {expected_direction_accuracy:.1%}")
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("   1. –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("   2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä–æ–≥–∏ –≤—Ö–æ–¥–∞")
    print("   3. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–Ω—Å–∞–º–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
output_dir = Path('experiments/accuracy_analysis')
output_dir.mkdir(parents=True, exist_ok=True)

# –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
plt.figure(figsize=(10, 6))
np.random.seed(42)

# –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–¥–µ–ª–æ–∫
n_sim = 1000
trades = []
for _ in range(n_sim):
    if np.random.random() < win_rate:
        # –í—ã–∏–≥—Ä—ã—à–Ω–∞—è —Å–¥–µ–ª–∫–∞
        result = np.random.normal(avg_win, avg_win*0.3) - commission
    else:
        # –ü—Ä–æ–∏–≥—Ä—ã—à–Ω–∞—è —Å–¥–µ–ª–∫–∞
        result = -np.random.normal(avg_loss, avg_loss*0.3) - commission
    trades.append(result * 100)

trades = np.array(trades)

plt.hist(trades, bins=50, alpha=0.7, edgecolor='black')
plt.axvline(np.mean(trades), color='red', linestyle='--', linewidth=2, label=f'–°—Ä–µ–¥–Ω–µ–µ: {np.mean(trades):.3f}%')
plt.axvline(0, color='black', linestyle='-', linewidth=1, alpha=0.5)
plt.xlabel('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏ (%)')
plt.ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
plt.title('–û–∂–∏–¥–∞–µ–º–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–¥–µ–ª–æ–∫')
plt.legend()
plt.grid(True, alpha=0.3)
plt.savefig(output_dir / 'expected_trade_distribution.png', dpi=300)
plt.close()

print(f"\nüìä –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_dir / 'expected_trade_distribution.png'}")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
report_path = output_dir / f'accuracy_assessment_{datetime.now().strftime("%Y%m%d_%H%M%S")}.txt'
with open(report_path, 'w', encoding='utf-8') as f:
    f.write("–û–¶–ï–ù–ö–ê –¢–û–ß–ù–û–°–¢–ò –ú–û–î–ï–õ–ò\n")
    f.write("=" * 50 + "\n\n")
    f.write(f"Val Loss: {val_loss:.6f}\n")
    f.write(f"–û–∂–∏–¥–∞–µ–º–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {expected_direction_accuracy:.1%}\n")
    f.write(f"–û–∂–∏–¥–∞–µ–º–∞—è MAE –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏: {expected_mae_return_pct:.2f}%\n")
    f.write(f"–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–∞ —Å–¥–µ–ª–∫—É: {expected_return_per_trade:.3f}%\n")
    f.write(f"\n–í–µ—Ä–¥–∏–∫—Ç: {'–ì–û–¢–û–í–ê' if val_loss < 0.15 and expected_direction_accuracy > 0.55 else '–¢–†–ï–ë–£–ï–¢ –ü–†–û–í–ï–†–ö–ò'}\n")

print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
print("=" * 80)
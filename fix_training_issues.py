#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –æ–±—É—á–µ–Ω–∏—è Crypto AI Trading
"""

import os
import sys
import yaml
import torch
import numpy as np
import pandas as pd
from pathlib import Path
import subprocess
import psutil
from datetime import datetime

def print_header(title):
    """–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
    print("\n" + "="*60)
    print(f"üîß {title}")
    print("="*60)

def print_step(step, message):
    """–ö—Ä–∞—Å–∏–≤—ã–π —à–∞–≥"""
    print(f"\nüìã –®–ê–ì {step}: {message}")
    print("-" * 40)

def check_system():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    print_header("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    print("üîç –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –æ–±—É—á–µ–Ω–∏—è...")
    python_processes = []
    for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
        try:
            if 'python' in proc.info['name'].lower():
                cmdline = ' '.join(proc.info['cmdline'])
                if any(keyword in cmdline.lower() for keyword in ['train', 'main.py', 'crypto_ai']):
                    python_processes.append((proc.info['pid'], cmdline))
        except:
            continue
    
    if python_processes:
        print("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ–±—É—á–µ–Ω–∏—è:")
        for pid, cmd in python_processes:
            print(f"   PID {pid}: {cmd}")
        
        response = input("\n‚ùì –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã? (y/n): ")
        if response.lower() == 'y':
            for pid, _ in python_processes:
                try:
                    os.kill(pid, 9)
                    print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {pid} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                except:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å {pid}")
    else:
        print("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –æ–±—É—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ GPU
    print("\nüéÆ –ü—Ä–æ–≤–µ—Ä–∫–∞ GPU...")
    if torch.cuda.is_available():
        print(f"‚úÖ CUDA –¥–æ—Å—Ç—É–ø–µ–Ω: {torch.cuda.get_device_name(0)}")
        print(f"   –ü–∞–º—è—Ç—å GPU: {torch.cuda.get_device_properties(0).total_memory / 1e9:.1f} GB")
        print(f"   –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –ø–∞–º—è—Ç—å: {torch.cuda.memory_allocated() / 1e9:.2f} GB")
    else:
        print("‚ö†Ô∏è CUDA –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è CPU")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ
    print("\nüíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ...")
    disk_usage = psutil.disk_usage('/')
    free_gb = disk_usage.free / (1024**3)
    print(f"   –°–≤–æ–±–æ–¥–Ω–æ: {free_gb:.1f} GB")
    if free_gb < 10:
        print("‚ö†Ô∏è –ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –º–µ—Å—Ç–æ")

def analyze_config():
    """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print_header("–ê–ù–ê–õ–ò–ó –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
    
    config_path = Path("config/config.yaml")
    if not config_path.exists():
        print("‚ùå –§–∞–π–ª config.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None
    
    with open(config_path) as f:
        config = yaml.safe_load(f)
    
    model_config = config.get('model', {})
    
    # –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    print("üîç –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏:")
    
    lr = model_config.get('learning_rate', 0)
    print(f"   Learning Rate: {lr}")
    if lr < 0.0005:
        print("   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: Learning Rate —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π!")
    elif lr < 0.001:
        print("   ‚ö†Ô∏è Learning Rate –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∏–∑–∫–∏–º")
    else:
        print("   ‚úÖ Learning Rate –≤ –Ω–æ—Ä–º–µ")
    
    batch_size = model_config.get('batch_size', 0)
    print(f"   Batch Size: {batch_size}")
    if batch_size > 128:
        print("   ‚ö†Ô∏è –ë–æ–ª—å—à–æ–π batch size –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
    
    context_window = model_config.get('context_window', 0)
    print(f"   Context Window: {context_window}")
    if context_window > 64:
        print("   ‚ö†Ô∏è –ë–æ–ª—å—à–æ–µ –æ–∫–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–æ–∂–µ—Ç –∑–∞–º–µ–¥–ª—è—Ç—å –æ–±—É—á–µ–Ω–∏–µ")
    
    warmup_steps = model_config.get('warmup_steps', 0)
    print(f"   Warmup Steps: {warmup_steps}")
    if warmup_steps > 1000:
        print("   ‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ warmup steps –¥–ª—è –Ω–∏–∑–∫–æ–≥–æ LR")
    
    return config

def check_data():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
    print_header("–ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–•")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
    cache_dir = Path("cache")
    if cache_dir.exists():
        cache_files = list(cache_dir.glob("*.pkl")) + list(cache_dir.glob("*.parquet"))
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ –∫—ç—à–µ: {len(cache_files)}")
        
        total_size = sum(f.stat().st_size for f in cache_files) / (1024**2)
        print(f"   –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size:.1f} MB")
        
        if cache_files:
            latest_file = max(cache_files, key=lambda f: f.stat().st_mtime)
            mod_time = datetime.fromtimestamp(latest_file.stat().st_mtime)
            print(f"   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {mod_time}")
    else:
        print("‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫—ç—à–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    print("\nüóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...")
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        sys.path.append(str(Path.cwd()))
        from data.data_loader import CryptoDataLoader
        
        config_path = Path("config/config.yaml")
        with open(config_path) as f:
            config = yaml.safe_load(f)
        
        loader = CryptoDataLoader(config)
        symbols = loader.get_available_symbols()
        print(f"‚úÖ –ë–î –¥–æ—Å—Ç—É–ø–Ω–∞, —Å–∏–º–≤–æ–ª–æ–≤: {len(symbols)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        if symbols:
            sample_data = loader.load_data(
                symbols=symbols[:1],
                start_date="2025-06-15",
                end_date="2025-06-16"
            )
            print(f"   –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: {len(sample_data)} –∑–∞–ø–∏—Å–µ–π")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")

def check_logs():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤"""
    print_header("–ê–ù–ê–õ–ò–ó –õ–û–ì–û–í")
    
    logs_dir = Path("logs")
    if not logs_dir.exists():
        print("‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–æ–≤
    log_files = []
    for pattern in ["**/*.log", "**/*training*.log"]:
        log_files.extend(logs_dir.glob(pattern))
    
    if not log_files:
        print("‚ö†Ô∏è –õ–æ–≥ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥
    latest_log = max(log_files, key=lambda f: f.stat().st_mtime)
    mod_time = datetime.fromtimestamp(latest_log.stat().st_mtime)
    print(f"üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥: {latest_log.name}")
    print(f"   –í—Ä–µ–º—è: {mod_time}")
    
    # –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    try:
        with open(latest_log, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        print(f"   –°—Ç—Ä–æ–∫ –≤ –ª–æ–≥–µ: {len(lines)}")
        
        # –ü–æ–∏—Å–∫ –æ—à–∏–±–æ–∫
        error_lines = [line for line in lines if 'error' in line.lower() or 'exception' in line.lower()]
        if error_lines:
            print(f"   ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(error_lines)}")
            print("   –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:")
            for line in error_lines[-3:]:
                print(f"     {line.strip()}")
        
        # –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ loss
        loss_lines = [line for line in lines if 'loss' in line.lower() and any(word in line for word in ['epoch', 'train', 'val'])]
        if loss_lines:
            print("   üìà –î–∏–Ω–∞–º–∏–∫–∞ loss (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏):")
            for line in loss_lines[-5:]:
                print(f"     {line.strip()}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞: {e}")

def apply_fixes():
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    print_header("–ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
    
    print_step(1, "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    
    config_path = Path("config/config.yaml")
    if config_path.exists():
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_path = Path(f"config/config_backup_{timestamp}.yaml")
        
        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
        with open(config_path) as f:
            content = f.read()
        with open(backup_path, 'w') as f:
            f.write(content)
        
        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
    
    print_step(2, "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    
    fixed_config_path = Path("config/config_fixed.yaml")
    if fixed_config_path.exists():
        response = input("‚ùì –ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é? (y/n): ")
        if response.lower() == 'y':
            with open(fixed_config_path) as f:
                content = f.read()
            with open(config_path, 'w') as f:
                f.write(content)
            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        else:
            print("‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ")
    else:
        print("‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    
    print_step(3, "–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫—ç—à–µ–π")
    
    response = input("‚ùì –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è? (y/n): ")
    if response.lower() == 'y':
        cache_dir = Path("cache")
        if cache_dir.exists():
            cache_files = list(cache_dir.glob("*"))
            for file in cache_files:
                try:
                    if file.is_file():
                        file.unlink()
                    elif file.is_dir():
                        import shutil
                        shutil.rmtree(file)
                except:
                    pass
            print("‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω")
        else:
            print("‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫—ç—à–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

def run_test_training():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
    print_header("–¢–ï–°–¢–û–í–û–ï –û–ë–£–ß–ï–ù–ò–ï")
    
    response = input("‚ùì –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ 3 —ç–ø–æ—Ö–∏? (y/n): ")
    if response.lower() != 'y':
        print("‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ")
        return
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è...")
    print("   (—ç—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç)")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    test_config = {
        'model': {
            'epochs': 3,
            'learning_rate': 0.001,
            'batch_size': 32,
            'context_window': 24
        }
    }
    
    # –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
    try:
        result = subprocess.run([
            sys.executable, "main.py", 
            "--config", "config/config.yaml",
            "--mode", "demo"
        ], capture_output=True, text=True, timeout=300)
        
        if result.returncode == 0:
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ —É—Å–ø–µ—à–µ–Ω!")
            print("   –í—ã–≤–æ–¥:")
            print(result.stdout[-500:])  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –∑–∞–ø—É—Å–∫–µ:")
            print(result.stderr[-500:])
            
    except subprocess.TimeoutExpired:
        print("‚è∞ –¢–∞–π–º-–∞—É—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –æ–±—É—á–µ–Ω–∏—è Crypto AI Trading")
    print("=" * 70)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not Path("config").exists() or not Path("main.py").exists():
        print("‚ùå –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞!")
        sys.exit(1)
    
    try:
        # –ü–æ—à–∞–≥–æ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        check_system()
        config = analyze_config()
        check_data()
        check_logs()
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        print("\n" + "="*60)
        print("üõ†Ô∏è –ü–õ–ê–ù –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
        print("1. –£–≤–µ–ª–∏—á–∏—Ç—å Learning Rate —Å 0.0002 –¥–æ 0.001")
        print("2. –£–º–µ–Ω—å—à–∏—Ç—å Batch Size –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏")
        print("3. –£–ø—Ä–æ—Å—Ç–∏—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –º–æ–¥–µ–ª–∏")
        print("4. –î–æ–±–∞–≤–∏—Ç—å OneCycleLR scheduler")
        print("5. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é MSE loss")
        print("="*60)
        
        response = input("\n‚ùì –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è? (y/n): ")
        if response.lower() == 'y':
            apply_fixes()
            run_test_training()
        
        print("\n" + "="*60)
        print("‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        print("üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("   1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        print("   2. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ loss –≤ –ø–µ—Ä–≤—ã–µ 10 —ç–ø–æ—Ö")
        print("   3. –û–∂–∏–¥–∞–π—Ç–µ —É–ª—É—á—à–µ–Ω–∏—è –∫ 20-30 —ç–ø–æ—Ö–µ")
        print("   4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ TensorBoard –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
        print("="*60)
        
    except KeyboardInterrupt:
        print("\n‚ùå –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()

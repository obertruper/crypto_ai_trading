#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LSP –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
"""

import sys
from pathlib import Path
import time
import json

sys.path.insert(0, str(Path(__file__).parent))

from mcp_lsp_bridge import get_bridge, mcp_get_file_context, mcp_get_recent_changes
from thinking_lsp_integration import analyze_with_thinking
import asyncio

def test_lsp_monitoring():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ LSP"""
    print("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LSP –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    print("="*50)
    
    # 1. –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –ø—Ä–æ–µ–∫—Ç–∞
    bridge = get_bridge()
    summary = bridge.get_project_summary()
    
    print(f"\nüìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞:")
    print(f"  ‚Ä¢ –ü—Ä–æ–µ–∫—Ç: {summary['project']}")
    print(f"  ‚Ä¢ LSP —Å—Ç–∞—Ç—É—Å: {summary['lsp_status']}")
    print(f"  ‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: {'–≤–∫–ª—é—á–µ–Ω–æ' if summary['tracking_enabled'] else '–≤—ã–∫–ª—é—á–µ–Ω–æ'}")
    
    # 2. –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    print(f"\nüìù –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:")
    for change_type, count in summary['changes_24h'].items():
        print(f"  ‚Ä¢ {change_type}: {count}")
    
    # 3. –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
    print(f"\nüî• –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    for file_info in summary['active_files'][:5]:
        print(f"  ‚Ä¢ {Path(file_info['path']).name}: {file_info['changes']} –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    
    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤...")
    
    test_files = [
        "/Users/ruslan/PycharmProjects/LLM TRANSFORM/crypto_ai_trading/config/config.yaml",
        "/Users/ruslan/PycharmProjects/LLM TRANSFORM/crypto_ai_trading/main.py",
        "/Users/ruslan/PycharmProjects/LLM TRANSFORM/crypto_ai_trading/models/patchtst.py"
    ]
    
    for file_path in test_files:
        if Path(file_path).exists():
            change = bridge.track_file_change(Path(file_path))
            if change:
                print(f"  ‚úÖ {Path(file_path).name}: {change.change_type}")
            else:
                print(f"  ‚ÑπÔ∏è  {Path(file_path).name}: –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        else:
            print(f"  ‚ùå {Path(file_path).name}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # 5. –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    print(f"\nüìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π:")
    recent = mcp_get_recent_changes(5)
    for i, change in enumerate(recent, 1):
        print(f"  {i}. {Path(change['path']).name} - {change['type']} ({change['timestamp']})")
    
    # 6. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
    # TODO: –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

async def test_thinking_analysis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ —Å –º—ã—à–ª–µ–Ω–∏–µ–º"""
    print("\n\nü§î –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Sequential Thinking")
    print("="*50)
    
    file_path = "/Users/ruslan/PycharmProjects/LLM TRANSFORM/crypto_ai_trading/config/config.yaml"
    
    print(f"üìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: {Path(file_path).name}")
    print("‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è 5-—à–∞–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑...")
    
    analysis = await analyze_with_thinking(file_path)
    
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
    print(f"  ‚Ä¢ –®–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {analysis['final_analysis']['total_steps']}")
    print(f"  ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {analysis['final_analysis']['risk_level']}")
    print(f"  ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(analysis['final_analysis']['recommendations'])}")
    
    print("\nüîç –ö–ª—é—á–µ–≤—ã–µ –Ω–∞—Ö–æ–¥–∫–∏:")
    for finding in analysis['final_analysis']['key_findings'][:3]:
        print(f"  ‚Ä¢ {finding}")
    
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    for rec in analysis['final_analysis']['recommendations']:
        print(f"  ‚Ä¢ {rec}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ LSP –°–µ—Ä–≤–µ—Ä - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    print("="*70)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    test_lsp_monitoring()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º thinking –∞–Ω–∞–ª–∏–∑
    asyncio.run(test_thinking_analysis())
    
    print("\n" + "="*70)
    print("üìù –õ–æ–≥–∏ LSP —Å–µ—Ä–≤–µ—Ä–∞:")
    print(f"  ‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π: lsp_server/lsp_service.log")
    print(f"  ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–π: lsp_server/enhanced-lsp.log")
    print(f"  ‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: lsp_server/.lsp_data/file_tracking.db")
    print("\n‚ú® –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç!")

if __name__ == "__main__":
    main()
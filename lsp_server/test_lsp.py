#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Enhanced Python LSP Server
"""

import sys
import os
sys.path.insert(0, os.path.dirname(__file__))

from enhanced_lsp_server import EnhancedPythonLSPServer, PythonASTAnalyzer
from pathlib import Path


def test_ast_analyzer():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ AST"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AST –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...")
    
    test_code = '''
class TestClass:
    """–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å"""
    
    def __init__(self, name: str):
        self.name = name
        
    def greet(self) -> str:
        """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
        return f"Hello, {self.name}!"

def test_function(x: int, y: int) -> int:
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    return x + y
'''
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    test_file = Path("test_temp.py")
    test_file.write_text(test_code)
    
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª
        import ast
        tree = ast.parse(test_code, filename=str(test_file))
        analyzer = PythonASTAnalyzer(str(test_file))
        analyzer.visit(tree)
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(analyzer.symbols)}")
        for name, symbol in analyzer.symbols.items():
            print(f"  - {symbol.kind.name}: {name}")
            if symbol.signature:
                print(f"    –°–∏–≥–Ω–∞—Ç—É—Ä–∞: {symbol.signature}")
                
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if test_file.exists():
            test_file.unlink()
            

def test_lsp_server():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è LSP —Å–µ—Ä–≤–µ—Ä–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LSP —Å–µ—Ä–≤–µ—Ä–∞...")
    
    try:
        server = EnhancedPythonLSPServer("test-server", "v1.0.0")
        print("‚úÖ LSP —Å–µ—Ä–≤–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"  - –ù–∞–∑–≤–∞–Ω–∏–µ: {server.name}")
        print(f"  - –í–µ—Ä—Å–∏—è: {server.version}")
        print(f"  - –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {server.index_extensions}")
        print(f"  - –õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤: {server.context_token_limit}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        

def test_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("\nüß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    dependencies = [
        'pygls',
        'lsprotocol',
        'aiofiles',
        'watchdog',
        'jedi',
        'rope',
        'pylint',
        'black',
        'isort',
        'docstring_parser',
        'tiktoken',
        'jsonschema',
        'yaml'
    ]
    
    missing = []
    for dep in dependencies:
        try:
            __import__(dep.replace('-', '_'))
            print(f"‚úÖ {dep}")
        except ImportError:
            missing.append(dep)
            print(f"‚ùå {dep} - –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
    if missing:
        print(f"\n‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {', '.join(missing)}")
        print("   –í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install -r requirements.txt")
    else:
        print("\n‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=" * 60)
    print("Enhanced Python LSP Server - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("=" * 60)
    
    test_dependencies()
    test_ast_analyzer()
    test_lsp_server()
    
    print("\n" + "=" * 60)
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("=" * 60)
    

if __name__ == "__main__":
    main()

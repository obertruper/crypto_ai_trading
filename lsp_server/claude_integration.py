#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã LSP —Å–µ—Ä–≤–µ—Ä–∞ —Å Claude Code
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–¥–∞
"""

import json
import asyncio
from pathlib import Path
from typing import Dict, List, Optional, Any
import subprocess
import time

class ClaudeLSPIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è LSP —Å–µ—Ä–≤–µ—Ä–∞ —Å Claude Code"""
    
    def __init__(self):
        self.lsp_port = 2087
        self.project_root = Path("/Users/ruslan/PycharmProjects/LLM TRANSFORM/crypto_ai_trading")
        self.lsp_server_path = self.project_root / "lsp_server"
        
    def ensure_lsp_running(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç LSP —Å–µ—Ä–≤–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä
        try:
            import socket
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            result = sock.connect_ex(('127.0.0.1', self.lsp_port))
            sock.close()
            
            if result == 0:
                return True
                
        except:
            pass
            
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        print("üöÄ –ó–∞–ø—É—Å–∫ LSP —Å–µ—Ä–≤–µ—Ä–∞...")
        subprocess.Popen([
            str(self.lsp_server_path / "venv" / "bin" / "python"),
            str(self.lsp_server_path / "start_lsp_service.py"),
            "start"
        ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
        time.sleep(3)
        return True
        
    def get_project_context(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è Claude"""
        context = {
            "project_name": "crypto_ai_trading",
            "project_root": str(self.project_root),
            "main_components": {
                "models": {
                    "path": "models/",
                    "description": "ML –º–æ–¥–µ–ª–∏ (PatchTST, –∞–Ω—Å–∞–º–±–ª–∏)",
                    "key_files": ["patchtst.py", "ensemble.py"]
                },
                "data": {
                    "path": "data/",
                    "description": "–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö",
                    "key_files": ["data_loader.py", "feature_engineering.py"]
                },
                "trading": {
                    "path": "trading/",
                    "description": "–¢–æ—Ä–≥–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç",
                    "key_files": ["signals.py", "risk_management.py", "position_manager.py"]
                },
                "training": {
                    "path": "training/",
                    "description": "–û–±—É—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π",
                    "key_files": ["trainer.py", "validator.py"]
                },
                "utils": {
                    "path": "utils/",
                    "description": "–£—Ç–∏–ª–∏—Ç—ã –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è",
                    "key_files": ["metrics.py", "visualization.py", "logger.py"]
                }
            },
            "key_features": [
                "PatchTST –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤",
                "100+ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤",
                "–ú–Ω–æ–≥–æ–∑–∞–¥–∞—á–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (—Ü–µ–Ω–∞ + –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ TP/SL)",
                "6 —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏",
                "–ê–Ω—Å–∞–º–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π",
                "PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ø–æ—Ä—Ç—É 5555"
            ],
            "current_focus": "–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞",
            "lsp_features": {
                "enabled": True,
                "port": self.lsp_port,
                "capabilities": [
                    "–ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º",
                    "–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è–º",
                    "–ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π",
                    "–ê–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π",
                    "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è LLM"
                ]
            }
        }
        
        return context
        
    def get_file_context(self, file_path: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å LSP —Å–µ—Ä–≤–µ—Ä–æ–º —á–µ—Ä–µ–∑ JSON-RPC
        # –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
        
        file_info = {
            "path": file_path,
            "imports": [],
            "exports": [],
            "classes": [],
            "functions": [],
            "related_files": []
        }
        
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ LSP –ø—Ä–æ—Ç–æ–∫–æ–ª
        
        return file_info
        
    def get_symbol_info(self, symbol_name: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ"""
        # TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å LSP –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–º–≤–æ–ª–µ
        pass
        
    def get_recommendations(self, context: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        recommendations = []
        
        if "model" in context.lower():
            recommendations.extend([
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ models/patchtst.py –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –º–æ–¥–µ–ª–∏",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ config/config.yaml –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏",
                "–î–ª—è –æ–±—É—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ python main.py --mode train"
            ])
            
        if "data" in context.lower():
            recommendations.extend([
                "–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ data/data_loader.py",
                "–ü—Ä–∏–∑–Ω–∞–∫–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –≤ data/feature_engineering.py",
                "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL –Ω–∞ –ø–æ—Ä—Ç—É 5555"
            ])
            
        if "strategy" in context.lower() or "trading" in context.lower():
            recommendations.extend([
                "–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ trading/signals.py",
                "–†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –≤ trading/risk_management.py",
                "6 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏"
            ])
            
        return recommendations

def setup_claude_integration():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Claude Code"""
    integration = ClaudeLSPIntegration()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º LSP —Å–µ—Ä–≤–µ—Ä
    if integration.ensure_lsp_running():
        print("‚úÖ LSP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å LSP —Å–µ—Ä–≤–µ—Ä")
        return False
        
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞
    context = integration.get_project_context()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è Claude
    context_file = integration.project_root / ".claude_context.json"
    with open(context_file, 'w', encoding='utf-8') as f:
        json.dump(context, f, indent=2, ensure_ascii=False)
        
    print(f"‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {context_file}")
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    print("\nüìä –ü—Ä–æ–µ–∫—Ç crypto_ai_trading –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å Claude Code!")
    print(f"üìÅ –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {integration.project_root}")
    print(f"üîß LSP —Å–µ—Ä–≤–µ—Ä: –ø–æ—Ä—Ç {integration.lsp_port}")
    print("\nüöÄ –ö–ª—é—á–µ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    print("  - python main.py --mode demo     # –î–µ–º–æ —Ä–µ–∂–∏–º")
    print("  - python main.py --mode train    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")
    print("  - python main.py --mode backtest # –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥")
    
    return True

if __name__ == "__main__":
    setup_claude_integration()
#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã LSP —Å–µ—Ä–≤–µ—Ä–∞ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
"""

import asyncio
import sys
import os
from pathlib import Path
sys.path.insert(0, os.path.dirname(__file__))

from enhanced_lsp_server import EnhancedPythonLSPServer, PythonASTAnalyzer
from lsprotocol import types
import json


async def demo_project_indexing():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    print("\nüéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã Enhanced Python LSP Server")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞–µ–º LSP —Å–µ—Ä–≤–µ—Ä
    server = EnhancedPythonLSPServer("demo-server", "v1.0.0")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ Python —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ (–∏—Å–∫–ª—é—á–∞—è venv)
    project_path = Path(__file__).parent.parent
    python_files = []
    
    for file in project_path.rglob("*.py"):
        # –ò—Å–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if "venv" not in str(file) and "__pycache__" not in str(file):
            python_files.append(file)
    
    print(f"\nüìÇ –ù–∞–π–¥–µ–Ω–æ Python —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ: {len(python_files)}")
    
    # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for file in python_files:
        print(f"\nüìÑ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è: {file.name}")
        await server.index_file(file)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        if str(file) in server.project_index:
            file_index = server.project_index[str(file)]
            print(f"   ‚úì –°–∏–º–≤–æ–ª–æ–≤: {len(file_index.symbols)}")
            print(f"   ‚úì –ò–º–ø–æ—Ä—Ç–æ–≤: {len(file_index.imports)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            if file_index.symbols:
                print(f"   üìç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã:")
                for name, symbol in list(file_index.symbols.items())[:5]:
                    print(f"      - {symbol.kind.name}: {name}")
                    if symbol.signature:
                        print(f"        {symbol.signature}")
                        
    return server


async def demo_context_generation():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è LLM"""
    print("\n\nüß† –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è LLM")
    print("=" * 70)
    
    server = EnhancedPythonLSPServer("context-demo", "v1.0.0")
    demo_file = Path(__file__).parent.parent / "demo_lsp_test.py"
    
    if demo_file.exists():
        await server.index_file(demo_file)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞ –≤ –∫–ª–∞—Å—Å–µ CryptoTrader
        uri = f"file://{demo_file}"
        
        # –ü–æ–∑–∏—Ü–∏—è –≤ –º–µ—Ç–æ–¥–µ get_balance (—Å—Ç—Ä–æ–∫–∞ ~35)
        position = types.Position(line=35, character=10)
        
        print(f"\nüìç –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏:")
        print(f"   –§–∞–π–ª: {demo_file.name}")
        print(f"   –°—Ç—Ä–æ–∫–∞: {position.line + 1}")
        print(f"   –°–∏–º–≤–æ–ª: {position.character}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = server.generate_llm_context(uri, position)
        
        print(f"\nüìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM:")
        print("-" * 70)
        print(context)
        print("-" * 70)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:")
        context_window = server.get_context_window(uri)
        print(f"   - –°–≤—è–∑–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(context_window.related_files)}")
        print(f"   - –ü–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π: {len(context_window.recent_edits)}")
        print(f"   - –ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤: {context_window.max_tokens}")


async def demo_symbol_search():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤"""
    print("\n\nüîç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤")
    print("=" * 70)
    
    server = EnhancedPythonLSPServer("search-demo", "v1.0.0")
    
    # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –¥–µ–º–æ —Ñ–∞–π–ª
    demo_file = Path(__file__).parent.parent / "demo_lsp_test.py"
    if demo_file.exists():
        await server.index_file(demo_file)
        
        # –ò—â–µ–º —Å–∏–º–≤–æ–ª—ã
        search_queries = ["CryptoTrader", "get_balance", "calculate_position_size"]
        
        for query in search_queries:
            print(f"\nüîé –ü–æ–∏—Å–∫: '{query}'")
            
            if query in server.symbol_index:
                symbols = server.symbol_index[query]
                for symbol in symbols:
                    print(f"   ‚úì –ù–∞–π–¥–µ–Ω–æ: {symbol.kind.name} '{symbol.name}'")
                    print(f"     –§–∞–π–ª: {Path(symbol.file_path).name}")
                    print(f"     –°—Ç—Ä–æ–∫–∞: {symbol.line + 1}")
                    if symbol.signature:
                        print(f"     –°–∏–≥–Ω–∞—Ç—É—Ä–∞: {symbol.signature}")
                    if symbol.docstring:
                        print(f"     –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: {symbol.docstring[:60]}...")
            else:
                print(f"   ‚úó –ù–µ –Ω–∞–π–¥–µ–Ω–æ")


async def demo_import_analysis():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("\n\nüì¶ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∏–º–ø–æ—Ä—Ç–æ–≤")
    print("=" * 70)
    
    server = EnhancedPythonLSPServer("import-demo", "v1.0.0")
    
    # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
    project_path = Path(__file__).parent.parent
    for file in project_path.rglob("*.py"):
        if "venv" not in str(file) and "__pycache__" not in str(file):
            await server.index_file(file)
    
    print("\nüìä –ì—Ä–∞—Ñ –∏–º–ø–æ—Ä—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞:")
    for file_path, imports in server.import_graph.items():
        if imports and "venv" not in file_path:
            print(f"\nüìÑ {Path(file_path).name}:")
            for imp in sorted(imports)[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"   ‚Üê {imp}")
            if len(imports) > 5:
                print(f"   ... –∏ –µ—â–µ {len(imports) - 5} –∏–º–ø–æ—Ä—Ç–æ–≤")


async def demo_completion_context():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    print("\n\nüí° –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è")
    print("=" * 70)
    
    server = EnhancedPythonLSPServer("completion-demo", "v1.0.0")
    demo_file = Path(__file__).parent.parent / "demo_lsp_test.py"
    
    if demo_file.exists():
        await server.index_file(demo_file)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
        uri = f"file://{demo_file}"
        
        # –ü–æ–∑–∏—Ü–∏—è –ø–æ—Å–ª–µ "trader." (–≥–¥–µ –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ)
        position = types.Position(line=65, character=12)  # –ü–æ—Å–ª–µ "trader."
        
        print(f"\nüìç –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è:")
        print(f"   –ü–æ–∑–∏—Ü–∏—è: —Å—Ç—Ä–æ–∫–∞ {position.line + 1}, —Å–∏–º–≤–æ–ª {position.character}")
        print(f"   –û–∂–∏–¥–∞–µ—Ç—Å—è: –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞ CryptoTrader")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        print(f"\nüî§ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã:")
        
        # –ò—â–µ–º –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞ CryptoTrader
        for symbol_name, symbols in server.symbol_index.items():
            for symbol in symbols:
                if symbol.parent == "CryptoTrader" and symbol.kind == types.SymbolKind.Method:
                    print(f"   ‚Ä¢ {symbol.name}")
                    if symbol.signature:
                        print(f"     {symbol.signature}")
                    if symbol.docstring:
                        print(f"     üìù {symbol.docstring[:60]}...")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("\n" + "üöÄ " * 20)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø ENHANCED PYTHON LSP SERVER")
    print("üöÄ " * 20)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        server = await demo_project_indexing()
        await demo_context_generation()
        await demo_symbol_search()
        await demo_import_analysis()
        await demo_completion_context()
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("=" * 70)
        print(f"‚úì –§–∞–π–ª–æ–≤ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ: {server.stats['indexed_files']}")
        print(f"‚úì –°–∏–º–≤–æ–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {server.stats['total_symbols']}")
        print(f"‚úì –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {len(server.symbol_index)}")
        print(f"‚úì –§–∞–π–ª–æ–≤ —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏: {len(server.import_graph)}")
        
        print("\n‚ú® LSP —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())

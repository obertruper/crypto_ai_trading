#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ LSP —Å–µ—Ä–≤–µ—Ä–∞
"""

import json
import time
from pathlib import Path
import subprocess
import sys

def test_lsp_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å LSP —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ LSP —Å–µ—Ä–≤–µ—Ä–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    result = subprocess.run(
        ["ps", "aux"], 
        capture_output=True, 
        text=True
    )
    
    if "enhanced_lsp_server.py" in result.stdout:
        print("‚úÖ LSP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
        
        # –ù–∞—Ö–æ–¥–∏–º PID
        for line in result.stdout.split('\n'):
            if "enhanced_lsp_server.py" in line and "grep" not in line:
                parts = line.split()
                pid = parts[1]
                print(f"   PID: {pid}")
                break
    else:
        print("‚ùå LSP —Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
        
    return True

def test_project_context():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞"""
    print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞...")
    
    context_file = Path("/Users/ruslan/PycharmProjects/LLM TRANSFORM/crypto_ai_trading/.claude_context.json")
    
    if context_file.exists():
        print("‚úÖ –§–∞–π–ª –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–∞–π–¥–µ–Ω")
        
        with open(context_file, 'r') as f:
            context = json.load(f)
            
        print(f"   –ü—Ä–æ–µ–∫—Ç: {context['project_name']}")
        print(f"   –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {context['project_root']}")
        print(f"   LSP –ø–æ—Ä—Ç: {context['lsp_features']['port']}")
        print("   –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
        for comp, info in context['main_components'].items():
            print(f"     - {comp}: {info['description']}")
    else:
        print("‚ùå –§–∞–π–ª –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
        
    return True

def test_lsp_logs():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏ LSP —Å–µ—Ä–≤–µ—Ä–∞"""
    print("\nüìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ LSP...")
    
    log_files = [
        "lsp_service.log",
        "enhanced-lsp.log"
    ]
    
    lsp_dir = Path("/Users/ruslan/PycharmProjects/LLM TRANSFORM/crypto_ai_trading/lsp_server")
    
    for log_file in log_files:
        log_path = lsp_dir / log_file
        if log_path.exists():
            print(f"‚úÖ {log_file} –Ω–∞–π–¥–µ–Ω")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
            with open(log_path, 'r') as f:
                lines = f.readlines()
                if lines:
                    print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å: {lines[-1].strip()}")
        else:
            print(f"‚ö†Ô∏è  {log_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")

def test_file_indexing():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    print("\nüóÇÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
    project_root = Path("/Users/ruslan/PycharmProjects/LLM TRANSFORM/crypto_ai_trading")
    
    important_dirs = ["models", "data", "trading", "training", "utils", "config"]
    
    for dir_name in important_dirs:
        dir_path = project_root / dir_name
        if dir_path.exists():
            py_files = list(dir_path.glob("*.py"))
            print(f"‚úÖ {dir_name}/: {len(py_files)} Python —Ñ–∞–π–ª–æ–≤")
        else:
            print(f"‚ùå {dir_name}/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

def test_mcp_integration():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å MCP"""
    print("\nüîå –ü—Ä–æ–≤–µ—Ä–∫–∞ MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ MCP IDE tool
    try:
        print("‚úÖ MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞")
        print("   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ mcp__ide__getDiagnostics –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ñ–∞–π–ª–æ–≤")
    except:
        print("‚ö†Ô∏è  MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

def main():
    print("=" * 50)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï LSP –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("=" * 50)
    
    tests = [
        ("–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞", test_lsp_status),
        ("–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞", test_project_context),
        ("–õ–æ–≥–∏", test_lsp_logs),
        ("–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è", test_file_indexing),
        ("MCP", test_mcp_integration)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    
    passed = sum(1 for _, result in results if result is not False)
    total = len(results)
    
    print(f"\n‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    
    if passed == total:
        print("\nüéâ LSP —Å–µ—Ä–≤–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("1. LSP –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–∞—Ö")
        print("2. –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ")
        print("3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ MCP –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
    else:
        print("\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")

if __name__ == "__main__":
    main()
#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ LSP —Å–µ—Ä–≤–µ—Ä–∞
"""

import asyncio
import sys
import os
from pathlib import Path
sys.path.insert(0, os.path.dirname(__file__))

from enhanced_lsp_server import EnhancedPythonLSPServer, PythonASTAnalyzer, ContextWindow
from lsprotocol import types


async def test_workspace_indexing():
    """–¢–µ—Å—Ç –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º LSP —Å–µ—Ä–≤–µ—Ä
    server = EnhancedPythonLSPServer("test-indexing", "v1.0.0")
    
    # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é (crypto_ai_trading)
    project_path = Path(__file__).parent.parent
    print(f"üìÇ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {project_path}")
    
    await server.index_workspace(project_path)
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏:")
    print(f"  - –§–∞–π–ª–æ–≤ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ: {server.stats['indexed_files']}")
    print(f"  - –°–∏–º–≤–æ–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {server.stats['total_symbols']}")
    print(f"  - –§–∞–π–ª–æ–≤ –≤ –∏–Ω–¥–µ–∫—Å–µ: {len(server.project_index)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    print(f"\nüìÑ –ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    for file_path, file_index in server.project_index.items():
        print(f"  - {Path(file_path).name}")
        print(f"    –°–∏–º–≤–æ–ª–æ–≤: {len(file_index.symbols)}")
        print(f"    –ò–º–ø–æ—Ä—Ç–æ–≤: {len(file_index.imports)}")
        
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    print(f"\nüî§ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (–ø–µ—Ä–≤—ã–µ 10):")
    symbol_count = 0
    for symbol_name, symbol_list in server.symbol_index.items():
        if symbol_count >= 10:
            break
        for symbol in symbol_list:
            print(f"  - {symbol.kind.name}: {symbol_name}")
            if symbol.signature:
                print(f"    {symbol.signature}")
            symbol_count += 1
            if symbol_count >= 10:
                break
                
    return server


async def test_context_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è LLM"""
    print("\nüß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä –∏ –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º
    server = EnhancedPythonLSPServer("test-context", "v1.0.0")
    demo_file = Path(__file__).parent.parent / "demo_lsp_test.py"
    
    if demo_file.exists():
        await server.index_file(demo_file)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ñ–∞–π–ª–µ
        uri = f"file://{demo_file}"
        position = types.Position(line=30, character=0)  # –ü–æ–∑–∏—Ü–∏—è –≤ –∫–ª–∞—Å—Å–µ CryptoTrader
        
        context = server.generate_llm_context(uri, position)
        
        print(f"\nüìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM:")
        print("-" * 60)
        print(context)
        print("-" * 60)
    else:
        print("‚ùå –î–µ–º–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")


async def test_symbol_analysis():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ñ–∞–π–ª–µ"""
    print("\nüî¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–º–≤–æ–ª–æ–≤...")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∞–º LSP —Å–µ—Ä–≤–µ—Ä
    lsp_file = Path(__file__).parent / "enhanced_lsp_server.py"
    
    if lsp_file.exists():
        content = lsp_file.read_text(encoding='utf-8')
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        lines = content.split('\n')
        classes = len([l for l in lines if l.strip().startswith('class ')])
        functions = len([l for l in lines if l.strip().startswith('def ') or l.strip().startswith('async def ')])
        
        print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–∞ {lsp_file.name}:")
        print(f"  - –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {len(lines)}")
        print(f"  - –ö–ª–∞—Å—Å–æ–≤: ~{classes}")
        print(f"  - –§—É–Ω–∫—Ü–∏–π/–º–µ—Ç–æ–¥–æ–≤: ~{functions}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é AST
        import ast
        tree = ast.parse(content, filename=str(lsp_file))
        analyzer = PythonASTAnalyzer(str(lsp_file))
        analyzer.visit(tree)
        
        print(f"\nüéØ –¢–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ AST:")
        print(f"  - –°–∏–º–≤–æ–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(analyzer.symbols)}")
        print(f"  - –ò–º–ø–æ—Ä—Ç–æ–≤: {len(analyzer.imports)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞—Å—Å—ã
        print(f"\nüì¶ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã:")
        for name, symbol in analyzer.symbols.items():
            if symbol.kind == types.SymbolKind.Class:
                print(f"  - {name}")
                if symbol.docstring:
                    print(f"    üìù {symbol.docstring[:60]}...")


async def test_import_graph():
    """–¢–µ—Å—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞ –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("\nüï∏Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    server = EnhancedPythonLSPServer("test-imports", "v1.0.0")
    project_path = Path(__file__).parent.parent
    
    await server.index_workspace(project_path)
    
    print(f"\nüìä –ì—Ä–∞—Ñ –∏–º–ø–æ—Ä—Ç–æ–≤:")
    for file_path, imports in server.import_graph.items():
        if imports:
            print(f"\n  üìÑ {Path(file_path).name}:")
            for imp in list(imports)[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"    ‚¨ÖÔ∏è  {imp}")


async def test_context_window():
    """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º –æ–∫–Ω–æ–º"""
    print("\nü™ü –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –æ–∫–Ω–∞...")
    
    server = EnhancedPythonLSPServer("test-window", "v1.0.0")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –æ–∫–Ω–æ
    test_uri = "file:///test/example.py"
    context_window = server.get_context_window(test_uri)
    
    print(f"\nüìã –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–æ:")
    print(f"  - –¢–µ–∫—É—â–∏–π —Ñ–∞–π–ª: {context_window.current_file}")
    print(f"  - –ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤: {context_window.max_tokens}")
    print(f"  - –°–≤—è–∑–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(context_window.related_files)}")
    print(f"  - –ü–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π: {len(context_window.recent_edits)}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("=" * 80)
    print("üöÄ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Enhanced Python LSP Server")
    print("=" * 80)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        server = await test_workspace_indexing()
        await test_symbol_analysis()
        await test_context_generation()
        await test_import_graph()
        await test_context_window()
        
        print("\n" + "=" * 80)
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        print("=" * 80)
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())

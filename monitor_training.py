#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import os
import time
import json
from datetime import datetime
from pathlib import Path
import pandas as pd
import matplotlib.pyplot as plt
from rich.console import Console
from rich.table import Table
from rich.live import Live
from rich.layout import Layout
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn
import glob

console = Console()

def find_latest_training_dir():
    """–ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –æ–±—É—á–µ–Ω–∏–µ–º"""
    base_dir = Path("experiments/runs")
    if not base_dir.exists():
        return None
    
    training_dirs = sorted(base_dir.glob("training_*"), key=lambda x: x.stat().st_mtime)
    if not training_dirs:
        return None
    
    return training_dirs[-1]

def read_metrics_file(metrics_file):
    """–ß–∏—Ç–∞—Ç—å —Ñ–∞–π–ª —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
    if not metrics_file.exists():
        return pd.DataFrame()
    
    try:
        return pd.read_csv(metrics_file)
    except:
        return pd.DataFrame()

def create_metrics_table(metrics_df):
    """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
    table = Table(title="üìä –ú–µ—Ç—Ä–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è")
    
    if metrics_df.empty:
        table.add_column("–°—Ç–∞—Ç—É—Å", style="yellow")
        table.add_row("–û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è...")
        return table
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏
    table.add_column("–≠–ø–æ—Ö–∞", justify="right", style="cyan")
    table.add_column("Train Loss", justify="right", style="green")
    table.add_column("Val Loss", justify="right", style="blue")
    table.add_column("Train MAE", justify="right", style="green")
    table.add_column("Val MAE", justify="right", style="blue")
    table.add_column("LR", justify="right", style="yellow")
    
    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —ç–ø–æ—Ö
    last_rows = metrics_df.tail(5)
    
    for _, row in last_rows.iterrows():
        table.add_row(
            str(int(row.get('epoch', 0))),
            f"{row.get('train_loss', 0):.4f}",
            f"{row.get('val_loss', 0):.4f}",
            f"{row.get('train_mae', 0):.4f}",
            f"{row.get('val_mae', 0):.4f}",
            f"{row.get('learning_rate', 0):.6f}"
        )
    
    return table

def create_training_info(training_dir):
    """–°–æ–∑–¥–∞—Ç—å –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–±—É—á–µ–Ω–∏–∏"""
    info_lines = []
    
    # –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
    config_file = training_dir / "config.json"
    if config_file.exists():
        with open(config_file, 'r') as f:
            config = json.load(f)
            info_lines.append(f"üèóÔ∏è –ú–æ–¥–µ–ª—å: {config.get('model', {}).get('name', 'Unknown')}")
            info_lines.append(f"üì¶ Batch size: {config.get('model', {}).get('batch_size', 'Unknown')}")
            info_lines.append(f"üéØ Learning rate: {config.get('model', {}).get('learning_rate', 'Unknown')}")
            info_lines.append(f"üìà –≠–ø–æ—Ö: {config.get('model', {}).get('epochs', 'Unknown')}")
    
    # –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è
    start_time = datetime.fromtimestamp(training_dir.stat().st_ctime)
    duration = datetime.now() - start_time
    info_lines.append(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {str(duration).split('.')[0]}")
    
    # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
    info_lines.append(f"üìÅ {training_dir.name}")
    
    return Panel("\n".join(info_lines), title="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—É—á–µ–Ω–∏–∏")

def plot_metrics(metrics_df, save_path):
    """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –º–µ—Ç—Ä–∏–∫"""
    if metrics_df.empty:
        return
    
    fig, axes = plt.subplots(2, 2, figsize=(12, 8))
    fig.suptitle('–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è', fontsize=16)
    
    # Loss
    if 'train_loss' in metrics_df and 'val_loss' in metrics_df:
        ax = axes[0, 0]
        ax.plot(metrics_df['epoch'], metrics_df['train_loss'], label='Train', color='blue')
        ax.plot(metrics_df['epoch'], metrics_df['val_loss'], label='Val', color='orange')
        ax.set_xlabel('–≠–ø–æ—Ö–∞')
        ax.set_ylabel('Loss')
        ax.set_title('Loss')
        ax.legend()
        ax.grid(True, alpha=0.3)
    
    # MAE
    if 'train_mae' in metrics_df and 'val_mae' in metrics_df:
        ax = axes[0, 1]
        ax.plot(metrics_df['epoch'], metrics_df['train_mae'], label='Train', color='blue')
        ax.plot(metrics_df['epoch'], metrics_df['val_mae'], label='Val', color='orange')
        ax.set_xlabel('–≠–ø–æ—Ö–∞')
        ax.set_ylabel('MAE')
        ax.set_title('Mean Absolute Error')
        ax.legend()
        ax.grid(True, alpha=0.3)
    
    # Learning Rate
    if 'learning_rate' in metrics_df:
        ax = axes[1, 0]
        ax.plot(metrics_df['epoch'], metrics_df['learning_rate'], color='green')
        ax.set_xlabel('–≠–ø–æ—Ö–∞')
        ax.set_ylabel('Learning Rate')
        ax.set_title('Learning Rate Schedule')
        ax.grid(True, alpha=0.3)
    
    # Best metrics
    ax = axes[1, 1]
    ax.axis('off')
    best_val_loss = metrics_df['val_loss'].min() if 'val_loss' in metrics_df else 0
    best_epoch = metrics_df['val_loss'].idxmin() if 'val_loss' in metrics_df else 0
    ax.text(0.1, 0.7, f"–õ—É—á—à–∏–π Val Loss: {best_val_loss:.4f}", fontsize=12)
    ax.text(0.1, 0.5, f"–õ—É—á—à–∞—è —ç–ø–æ—Ö–∞: {best_epoch}", fontsize=12)
    ax.text(0.1, 0.3, f"–¢–µ–∫—É—â–∞—è —ç–ø–æ—Ö–∞: {len(metrics_df)}", fontsize=12)
    
    plt.tight_layout()
    plt.savefig(save_path, dpi=100, bbox_inches='tight')
    plt.close()

def monitor_training():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    console.print("[bold green]üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±—É—á–µ–Ω–∏—è...[/bold green]")
    
    while True:
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –æ–±—É—á–µ–Ω–∏—è
        training_dir = find_latest_training_dir()
        
        if not training_dir:
            console.print("[yellow]‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –æ–±—É—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û–∂–∏–¥–∞–Ω–∏–µ...[/yellow]")
            time.sleep(5)
            continue
        
        # –ò—â–µ–º —Ñ–∞–π–ª —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
        metrics_files = list(training_dir.glob("*_metrics.csv"))
        
        if not metrics_files:
            console.print(f"[yellow]‚ö†Ô∏è –§–∞–π–ª –º–µ—Ç—Ä–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {training_dir}. –û–∂–∏–¥–∞–Ω–∏–µ...[/yellow]")
            time.sleep(5)
            continue
        
        metrics_file = metrics_files[0]
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ü–∏–∫–ª–µ
        with Live(refresh_per_second=0.5) as live:
            while True:
                # –ß–∏—Ç–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
                metrics_df = read_metrics_file(metrics_file)
                
                # –°–æ–∑–¥–∞–µ–º layout
                layout = Layout()
                layout.split_column(
                    Layout(create_training_info(training_dir), size=8),
                    Layout(create_metrics_table(metrics_df))
                )
                
                live.update(layout)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                if int(time.time()) % 10 == 0:
                    plot_path = training_dir / "training_progress.png"
                    plot_metrics(metrics_df, plot_path)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ª–∏ –æ–±—É—á–µ–Ω–∏–µ
                final_report = training_dir / "final_report.txt"
                if final_report.exists():
                    console.print("\n[bold green]‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ![/bold green]")
                    console.print(f"[cyan]üìÑ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç: {final_report}[/cyan]")
                    console.print(f"[cyan]üìä –ì—Ä–∞—Ñ–∏–∫–∏: {training_dir}/training_progress.png[/cyan]")
                    return
                
                time.sleep(2)

if __name__ == "__main__":
    try:
        monitor_training()
    except KeyboardInterrupt:
        console.print("\n[yellow]‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º[/yellow]")
    except Exception as e:
        console.print(f"\n[red]‚ùå –û—à–∏–±–∫–∞: {e}[/red]")
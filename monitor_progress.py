#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è
"""

import time
import subprocess
import os

def get_training_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è –∏–∑ –ª–æ–≥–æ–≤"""
    try:
        # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ training_log.txt
        result = subprocess.run(
            ['tail', '-1', 'training_log.txt'], 
            capture_output=True, text=True, cwd='/mnt/SSD/PYCHARMPRODJECT/LLM TRANSFORM/crypto_ai_trading'
        )
        if result.returncode == 0 and 'Training:' in result.stdout:
            # –ü–∞—Ä—Å–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
            line = result.stdout.strip()
            # –ò–∑–≤–ª–µ–∫–∞–µ–º loss
            if 'loss=' in line:
                parts = line.split('loss=')
                if len(parts) > 1:
                    loss_part = parts[1].split(',')[0]
                    avg_loss_part = parts[1].split('avg_loss=')[1].split(']')[0] if 'avg_loss=' in parts[1] else None
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç
                    if '%' in line:
                        percent = line.split('%')[0].split()[-1]
                        return {
                            'percent': f"{percent}%",
                            'loss': loss_part,
                            'avg_loss': avg_loss_part
                        }
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –∏–∑ Trainer –ª–æ–≥–æ–≤
        result = subprocess.run(
            ['tail', '-50', './experiments/logs/Trainer_20250701.log'], 
            capture_output=True, text=True, cwd='/mnt/SSD/PYCHARMPRODJECT/LLM TRANSFORM/crypto_ai_trading'
        )
        if result.returncode == 0:
            lines = result.stdout.strip().split('\n')
            for line in reversed(lines):
                if 'Training:' in line and 'loss=' in line:
                    return {'status': 'training', 'last_log': line[-100:]}
                    
    except Exception as e:
        return {'error': str(e)}
    
    return {'status': 'unknown'}

def get_gpu_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ GPU"""
    try:
        result = subprocess.run(
            ['nvidia-smi', '--query-gpu=utilization.gpu,memory.used,temperature.gpu,power.draw', 
             '--format=csv,noheader,nounits'], 
            capture_output=True, text=True
        )
        if result.returncode == 0:
            stats = result.stdout.strip().split(', ')
            return {
                'gpu_util': f"{stats[0]}%",
                'memory': f"{float(stats[1])/1024:.1f}GB",
                'temp': f"{stats[2]}¬∞C",
                'power': f"{float(stats[3]):.0f}W"
            }
    except:
        pass
    return None

def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏...")
    print("=" * 80)
    
    while True:
        os.system('clear')
        
        print("üî• –°–¢–ê–¢–£–° –û–ë–£–ß–ï–ù–ò–Ø CRYPTO AI TRADING")
        print("=" * 80)
        
        # GPU —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        gpu_stats = get_gpu_stats()
        if gpu_stats:
            print(f"GPU: {gpu_stats['gpu_util']} | –ü–∞–º—è—Ç—å: {gpu_stats['memory']} | {gpu_stats['temp']} | {gpu_stats['power']}")
        
        print("-" * 80)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è
        train_stats = get_training_stats()
        if 'percent' in train_stats:
            print(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {train_stats['percent']}")
            print(f"Loss: {train_stats['loss']}")
            print(f"Avg Loss: {train_stats['avg_loss']}")
        elif 'last_log' in train_stats:
            print(f"–°—Ç–∞—Ç—É—Å: {train_stats.get('status', '–æ–±—É—á–µ–Ω–∏–µ')}")
            print(f"–õ–æ–≥: {train_stats['last_log']}")
        else:
            print(f"–°—Ç–∞—Ç—É—Å: {train_stats}")
        
        print("\n[Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫...")
        time.sleep(5)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º loss
"""

import torch
import torch.nn.functional as F
import numpy as np

def test_tanh_confidence():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ confidence —Å Tanh –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π"""
    print("\n" + "="*80)
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π confidence loss")
    print("="*80)
    
    batch_size = 4
    n_timeframes = 4
    
    print("\n1. –°—Ç–∞—Ä—ã–π –ø–æ–¥—Ö–æ–¥ (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π):")
    # –°–∏–º—É–ª—è—Ü–∏—è –±–æ–ª—å—à–∏—Ö –ª–æ–≥–∏—Ç–æ–≤ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    confidence_logits_old = torch.randn(batch_size, n_timeframes) * 10  # –ú–æ–≥—É—Ç –±—ã—Ç—å –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–º–∏
    correct_predictions = torch.randint(0, 2, (batch_size, n_timeframes)).float()
    
    # BCE —Å –ª–æ–≥–∏—Ç–∞–º–∏
    loss_old = F.binary_cross_entropy_with_logits(confidence_logits_old, correct_predictions)
    print(f"   –õ–æ–≥–∏—Ç—ã: min={confidence_logits_old.min():.2f}, max={confidence_logits_old.max():.2f}")
    print(f"   Loss: {loss_old.item():.4f}")
    
    # –ü—Ä–æ–±–ª–µ–º–Ω—ã–π —Å–ª—É—á–∞–π
    confidence_logits_problem = torch.ones(batch_size, n_timeframes) * 20  # –û—á–µ–Ω—å –±–æ–ª—å—à–∏–µ –ª–æ–≥–∏—Ç—ã
    correct_predictions_problem = torch.zeros(batch_size, n_timeframes)  # –í—Å–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
    loss_problem = F.binary_cross_entropy_with_logits(confidence_logits_problem, correct_predictions_problem)
    print(f"\n   –ü—Ä–æ–±–ª–µ–º–Ω—ã–π —Å–ª—É—á–∞–π:")
    print(f"   –õ–æ–≥–∏—Ç—ã: {confidence_logits_problem[0]}")
    print(f"   Loss: {loss_problem.item():.4f} (–æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π!)")
    
    print("\n2. –ù–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥ (—Å Tanh –∏ MSE):")
    # –°–∏–º—É–ª—è—Ü–∏—è –≤—ã—Ö–æ–¥–∞ —Å Tanh
    confidence_tanh = torch.tanh(torch.randn(batch_size, n_timeframes) * 2)  # –í –¥–∏–∞–ø–∞–∑–æ–Ω–µ [-1, 1]
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–π –≤ —Ç–æ—Ç –∂–µ –¥–∏–∞–ø–∞–∑–æ–Ω
    confidence_targets = correct_predictions * 2 - 1  # –ò–∑ [0, 1] –≤ [-1, 1]
    
    # MSE loss (–±–µ–∑–æ–ø–∞—Å–µ–Ω –¥–ª—è autocast)
    loss_new = F.mse_loss(confidence_tanh, confidence_targets)
    print(f"   Tanh –≤—ã—Ö–æ–¥: min={confidence_tanh.min():.2f}, max={confidence_tanh.max():.2f}")
    print(f"   –¶–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: min={confidence_targets.min():.2f}, max={confidence_targets.max():.2f}")
    print(f"   Loss: {loss_new.item():.4f}")
    
    # –¢–æ—Ç –∂–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Å–ª—É—á–∞–π
    confidence_tanh_extreme = torch.ones(batch_size, n_timeframes) * 0.99  # –ë–ª–∏–∑–∫–æ –∫ 1 –ø–æ—Å–ª–µ tanh
    confidence_targets_extreme = correct_predictions_problem * 2 - 1  # –í—Å–µ -1 (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ)
    loss_extreme = F.mse_loss(confidence_tanh_extreme, confidence_targets_extreme)
    print(f"\n   –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π:")
    print(f"   Tanh –≤—ã—Ö–æ–¥: {confidence_tanh_extreme[0]} (–≤—Å–µ —É–≤–µ—Ä–µ–Ω–Ω—ã–µ)")
    print(f"   –¶–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {confidence_targets_extreme[0]} (–≤—Å–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ)")
    print(f"   Loss: {loss_extreme.item():.4f} (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω!)")
    
    print("\n3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–æ–≤:")
    print(f"   –°—Ç–∞—Ä—ã–π –ø–æ–¥—Ö–æ–¥: BCE loss –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç 0 –¥–æ +‚àû")
    print(f"   –ù–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥: MSE loss –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º –∑–Ω–∞—á–µ–Ω–∏–π Tanh")
    print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π MSE loss: (1 - (-1))^2 = 4.0")
    
    print("\n4. –í–ª–∏—è–Ω–∏–µ –Ω–∞ –æ–±—â–∏–π loss:")
    # –°–∏–º—É–ª—è—Ü–∏—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ loss
    mse_loss = torch.tensor(1.5)
    ce_loss = torch.tensor(2.0)
    bce_loss = torch.tensor(0.8)
    
    # –°—Ç–∞—Ä—ã–π –ø–æ–¥—Ö–æ–¥
    total_loss_old = mse_loss + ce_loss + bce_loss + loss_problem * 0.5
    print(f"   –°—Ç–∞—Ä—ã–π –ø–æ–¥—Ö–æ–¥: {mse_loss} + {ce_loss} + {bce_loss} + {loss_problem:.1f} * 0.5 = {total_loss_old:.1f}")
    
    # –ù–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥  
    total_loss_new = mse_loss + ce_loss + bce_loss + loss_extreme * 0.1  # –ú–µ–Ω—å—à–∏–π –≤–µ—Å
    print(f"   –ù–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥: {mse_loss} + {ce_loss} + {bce_loss} + {loss_extreme:.3f} * 0.1 = {total_loss_new:.3f}")
    
    print("\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print("   1. Tanh –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç confidence –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [-1, 1]")
    print("   2. MSE loss –±–µ–∑–æ–ø–∞—Å–µ–Ω –¥–ª—è autocast –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é")
    print("   3. –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π –≤–µ—Å (0.1 –≤–º–µ—Å—Ç–æ 0.5) –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ—Ç")
    print("   4. Loss –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º!")
    print("   5. –°–æ–≤–º–µ—Å—Ç–∏–º–æ —Å Mixed Precision Training!")
    print("="*80)


if __name__ == "__main__":
    test_tanh_confidence()
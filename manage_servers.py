#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è–º–∏ GPU —Å–µ—Ä–≤–µ—Ä–æ–≤
–ü–æ–∑–≤–æ–ª—è–µ—Ç –ª–µ–≥–∫–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ —Å–µ—Ä–≤–µ—Ä–∞–º–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
"""

import yaml
import os
import sys
from pathlib import Path
from rich.console import Console
from rich.table import Table
from rich.prompt import Prompt, Confirm
from rich.panel import Panel

console = Console()

class ServerProfileManager:
    def __init__(self):
        self.profiles_file = Path("config/server_profiles.yaml")
        self.main_config_file = Path("config/config.yaml")
        self.profiles_data = self.load_profiles()
        
    def load_profiles(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        if not self.profiles_file.exists():
            console.print(f"[red]‚ùå –§–∞–π–ª –ø—Ä–æ—Ñ–∏–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.profiles_file}[/red]")
            return None
        
        with open(self.profiles_file, 'r', encoding='utf-8') as f:
            return yaml.safe_load(f)
    
    def save_profiles(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        with open(self.profiles_file, 'w', encoding='utf-8') as f:
            yaml.dump(self.profiles_data, f, default_flow_style=False, allow_unicode=True)
    
    def update_main_config(self, profile_name):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
        if profile_name not in self.profiles_data['profiles']:
            console.print(f"[red]‚ùå –ü—Ä–æ—Ñ–∏–ª—å '{profile_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω[/red]")
            return False
        
        profile = self.profiles_data['profiles'][profile_name]
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥
        with open(self.main_config_file, 'r', encoding='utf-8') as f:
            main_config = yaml.safe_load(f)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ remote_server
        if 'remote_server' not in main_config:
            main_config['remote_server'] = {}
        
        main_config['remote_server']['direct_connection'] = {
            'host': profile['connection']['host'],
            'port': profile['connection']['port'],
            'user': profile['connection']['user'],
            'key_path': profile['connection']['key_path']
        }
        
        main_config['remote_server']['enabled'] = True
        main_config['remote_server']['remote_path'] = profile['paths']['remote_project']
        main_config['remote_server']['python_path'] = profile['paths']['python']
        
        if 'ports' in profile:
            main_config['remote_server']['ports'] = profile['ports']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
        with open(self.main_config_file, 'w', encoding='utf-8') as f:
            yaml.dump(main_config, f, default_flow_style=False, allow_unicode=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        self.profiles_data['active_profile'] = profile_name
        self.save_profiles()
        
        return True
    
    def list_profiles(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏"""
        console.print(Panel("üñ•Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤", style="cyan"))
        
        active = self.profiles_data.get('active_profile', 'none')
        
        table = Table()
        table.add_column("–°—Ç–∞—Ç—É—Å", style="green", width=6)
        table.add_column("–ò–º—è", style="cyan")
        table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="white")
        table.add_column("GPU", style="yellow")
        table.add_column("–°—Ç–æ–∏–º–æ—Å—Ç—å", style="magenta")
        table.add_column("–•–æ—Å—Ç", style="dim")
        
        for profile_id, profile in self.profiles_data['profiles'].items():
            status = "üü¢ ‚úì" if profile_id == active else ""
            
            table.add_row(
                status,
                profile['name'],
                profile['description'],
                profile['specs']['gpu'],
                profile['specs']['cost_per_hour'],
                f"{profile['connection']['host']}:{profile['connection']['port']}"
            )
        
        console.print(table)
        console.print(f"\\n[green]–ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å: {active}[/green]")
    
    def switch_profile(self, profile_name=None):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π –ø—Ä–æ—Ñ–∏–ª—å"""
        if not profile_name:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
            self.list_profiles()
            console.print("\\n[cyan]–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏:[/cyan]")
            
            for i, (profile_id, profile) in enumerate(self.profiles_data['profiles'].items(), 1):
                console.print(f"{i}. {profile_id} - {profile['name']}")
            
            choice = Prompt.ask("\\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è")
            
            try:
                profile_names = list(self.profiles_data['profiles'].keys())
                profile_name = profile_names[int(choice) - 1]
            except (ValueError, IndexError):
                console.print("[red]‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä[/red]")
                return False
        
        if profile_name not in self.profiles_data['profiles']:
            console.print(f"[red]‚ùå –ü—Ä–æ—Ñ–∏–ª—å '{profile_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω[/red]")
            return False
        
        profile = self.profiles_data['profiles'][profile_name]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
        console.print(f"\\n[cyan]–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å:[/cyan] {profile['name']}")
        console.print(f"[dim]–û–ø–∏—Å–∞–Ω–∏–µ:[/dim] {profile['description']}")
        console.print(f"[dim]–•–æ—Å—Ç:[/dim] {profile['connection']['host']}:{profile['connection']['port']}")
        console.print(f"[dim]GPU:[/dim] {profile['specs']['gpu']}")
        console.print(f"[dim]–°—Ç–æ–∏–º–æ—Å—Ç—å:[/dim] {profile['specs']['cost_per_hour']}")
        
        if Confirm.ask("\\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ?"):
            if self.update_main_config(profile_name):
                console.print(f"\\n[green]‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞: {profile['name']}[/green]")
                console.print("[yellow]–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ config/config.yaml[/yellow]")
                return True
            else:
                console.print("[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏[/red]")
                return False
        
        return False
    
    def add_profile(self):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å–µ—Ä–≤–µ—Ä–∞"""
        console.print(Panel("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è —Å–µ—Ä–≤–µ—Ä–∞", style="green"))
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        profile_id = Prompt.ask("ID –ø—Ä–æ—Ñ–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: vast_ai_new)")
        name = Prompt.ask("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞")
        description = Prompt.ask("–û–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞")
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        console.print("\\n[cyan]–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:[/cyan]")
        host = Prompt.ask("IP –∞–¥—Ä–µ—Å –∏–ª–∏ —Ö–æ—Å—Ç")
        port = int(Prompt.ask("SSH –ø–æ—Ä—Ç", default="22"))
        user = Prompt.ask("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", default="root")
        key_path = Prompt.ask("–ü—É—Ç—å –∫ SSH –∫–ª—é—á—É", default="~/.ssh/id_rsa")
        
        # –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
        console.print("\\n[cyan]–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞:[/cyan]")
        gpu = Prompt.ask("GPU (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2x RTX 4090)")
        vram = Prompt.ask("VRAM (–Ω–∞–ø—Ä–∏–º–µ—Ä: 48 GB)")
        ram = Prompt.ask("RAM (–Ω–∞–ø—Ä–∏–º–µ—Ä: 90 GB)")
        cost = Prompt.ask("–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —á–∞—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: $1.20)")
        
        # –ü—É—Ç–∏
        console.print("\\n[cyan]–ü—É—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:[/cyan]")
        remote_project = Prompt.ask("–ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É", default="/root/crypto_ai_trading")
        python_path = Prompt.ask("–ü—É—Ç—å –∫ Python", default="/opt/conda/bin/python")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        new_profile = {
            'name': name,
            'description': description,
            'connection': {
                'host': host,
                'port': port,
                'user': user,
                'key_path': key_path
            },
            'specs': {
                'gpu': gpu,
                'vram': vram,
                'ram': ram,
                'cost_per_hour': cost
            },
            'ports': {
                'ssh': port,
                'tensorboard': 6006,
                'jupyter': 8888
            },
            'paths': {
                'remote_project': remote_project,
                'python': python_path
            }
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        self.profiles_data['profiles'][profile_id] = new_profile
        self.save_profiles()
        
        console.print(f"\\n[green]‚úÖ –ü—Ä–æ—Ñ–∏–ª—å '{profile_id}' –¥–æ–±–∞–≤–ª–µ–Ω![/green]")
        
        if Confirm.ask("–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å?"):
            self.switch_profile(profile_id)
    
    def show_current_profile(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∞–∫—Ç–∏–≤–Ω–æ–º –ø—Ä–æ—Ñ–∏–ª–µ"""
        active = self.profiles_data.get('active_profile')
        
        if not active or active not in self.profiles_data['profiles']:
            console.print("[yellow]‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω[/yellow]")
            return
        
        profile = self.profiles_data['profiles'][active]
        
        console.print(Panel(f"üü¢ –¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å: {profile['name']}", style="green"))
        
        info_table = Table(show_header=False, box=None)
        info_table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan")
        info_table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="white")
        
        info_table.add_row("–ù–∞–∑–≤–∞–Ω–∏–µ:", profile['name'])
        info_table.add_row("–û–ø–∏—Å–∞–Ω–∏–µ:", profile['description'])
        info_table.add_row("–•–æ—Å—Ç:", f"{profile['connection']['host']}:{profile['connection']['port']}")
        info_table.add_row("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", profile['connection']['user'])
        info_table.add_row("SSH –∫–ª—é—á:", profile['connection']['key_path'])
        info_table.add_row("GPU:", profile['specs']['gpu'])
        info_table.add_row("VRAM:", profile['specs']['vram'])
        info_table.add_row("RAM:", profile['specs']['ram'])
        info_table.add_row("–°—Ç–æ–∏–º–æ—Å—Ç—å:", profile['specs']['cost_per_hour'])
        info_table.add_row("–£–¥–∞–ª–µ–Ω–Ω—ã–π –ø—É—Ç—å:", profile['paths']['remote_project'])
        
        console.print(info_table)
    
    def test_connection(self, profile_name=None):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É"""
        if not profile_name:
            profile_name = self.profiles_data.get('active_profile')
        
        if not profile_name or profile_name not in self.profiles_data['profiles']:
            console.print("[red]‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω[/red]")
            return False
        
        profile = self.profiles_data['profiles'][profile_name]
        
        console.print(f"\\n[cyan]üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫: {profile['name']}[/cyan]")
        
        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SSH
        import subprocess
        ssh_cmd = [
            "ssh",
            "-i", os.path.expanduser(profile['connection']['key_path']),
            "-p", str(profile['connection']['port']),
            "-o", "ConnectTimeout=10",
            "-o", "StrictHostKeyChecking=no",
            "-o", "UserKnownHostsFile=/dev/null",
            f"{profile['connection']['user']}@{profile['connection']['host']}",
            "echo 'Connection test successful' && uname -a"
        ]
        
        try:
            result = subprocess.run(ssh_cmd, capture_output=True, text=True, timeout=15)
            
            if result.returncode == 0:
                console.print("[green]‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ![/green]")
                console.print(f"[dim]–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {result.stdout.strip()}[/dim]")
                return True
            else:
                console.print("[red]‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è[/red]")
                console.print(f"[red]{result.stderr}[/red]")
                return False
                
        except subprocess.TimeoutExpired:
            console.print("[red]‚ùå –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è[/red]")
            return False
        except Exception as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞: {e}[/red]")
            return False


def main():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è–º–∏"""
    manager = ServerProfileManager()
    
    if not manager.profiles_data:
        console.print("[red]‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤[/red]")
        return
    
    while True:
        console.clear()
        console.print(Panel.fit(
            "[bold cyan]üñ•Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è–º–∏ GPU —Å–µ—Ä–≤–µ—Ä–æ–≤[/bold cyan]\\n"
            "[dim]–ë—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Å–µ—Ä–≤–µ—Ä–∞–º–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è[/dim]",
            border_style="blue"
        ))
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
        manager.show_current_profile()
        
        # –ú–µ–Ω—é
        console.print("\\n[bold cyan]–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:[/bold cyan]")
        menu_table = Table(show_header=False, box=None)
        menu_table.add_column("–û–ø—Ü–∏—è", style="cyan", width=3)
        menu_table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="white")
        
        menu_table.add_row("1", "üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏")
        menu_table.add_row("2", "üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
        menu_table.add_row("3", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å")
        menu_table.add_row("4", "üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        menu_table.add_row("5", "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ—Ñ–∏–ª–µ")
        menu_table.add_row("0", "‚ùå –í—ã—Ö–æ–¥")
        
        console.print(menu_table)
        
        choice = Prompt.ask("\\n[bold cyan]–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ[/bold cyan]")
        
        if choice == "1":
            manager.list_profiles()
            Prompt.ask("\\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
        elif choice == "2":
            manager.switch_profile()
            Prompt.ask("\\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
        elif choice == "3":
            manager.add_profile()
            Prompt.ask("\\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
        elif choice == "4":
            manager.test_connection()
            Prompt.ask("\\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
        elif choice == "5":
            manager.show_current_profile()
            Prompt.ask("\\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
        elif choice == "0":
            console.print("\\n[cyan]–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã[/cyan]")
            break
        else:
            console.print("[red]–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.[/red]")


if __name__ == "__main__":
    main()

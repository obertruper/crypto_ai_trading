#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –º–æ–¥–µ–ª–∏ PatchTST
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –†–ï–ê–õ–¨–ù–û–ï –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ loss
"""

import torch
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path
from datetime import datetime, timedelta
import yaml
from sklearn.metrics import accuracy_score, mean_absolute_error, mean_squared_error, r2_score
import warnings
warnings.filterwarnings('ignore')

print("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –º–æ–¥–µ–ª–∏...")
print("=" * 80)

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –¥–∞–Ω–Ω—ã—Ö
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

# 1. –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
from models.patchtst_unified import UnifiedPatchTSTForTrading as UnifiedPatchTST
from data.precomputed_dataset import PrecomputedDataLoaders

checkpoint = torch.load('models_saved/best_model.pth', map_location=device)
model = UnifiedPatchTST(checkpoint['config'])
model.load_state_dict(checkpoint['model_state_dict'])
model.to(device)
model.eval()

print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (Val Loss: {checkpoint.get('val_loss', 'N/A'):.6f})")

# 2. –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
print("\nüìä –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")

# –ò—Å–ø–æ–ª—å–∑—É–µ–º precomputed dataloader –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
config = checkpoint['config']
data_loader_creator = PrecomputedDataLoaders(config)
train_loader, val_loader, test_loader = data_loader_creator.get_loaders()

print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(test_loader)} –±–∞—Ç—á–µ–π —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

# 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º –Ω–∞–±–æ—Ä–µ
print("\nüîÆ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π...")

all_predictions = []
all_targets = []
all_metadata = []

with torch.no_grad():
    for batch_idx, batch in enumerate(test_loader):
        if batch_idx >= 10:  # –û–≥—Ä–∞–Ω–∏—á–∏–º—Å—è 10 –±–∞—Ç—á–∞–º–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            break
            
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞—Ç—á–∞
        if isinstance(batch, dict):
            features = batch['features'].to(device)
            targets = batch['targets'].to(device)
            metadata = batch.get('metadata', {})
        else:
            features, targets, metadata = batch
            features = features.to(device)
            targets = targets.to(device)
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        outputs = model(features)
        
        all_predictions.append(outputs.cpu().numpy())
        all_targets.append(targets.cpu().numpy())
        all_metadata.append(metadata)
        
        if batch_idx % 5 == 0:
            print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –±–∞—Ç—á–µ–π: {batch_idx + 1}/10")

# –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
predictions = np.vstack(all_predictions)
targets = np.vstack(all_targets)

print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {predictions.shape}")
print(f"‚úÖ –†–µ–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {targets.shape}")

# 4. –ê–Ω–∞–ª–∏–∑ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ –∫–∞–∂–¥–æ–π —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
print("\nüìä –ê–ù–ê–õ–ò–ó –¢–û–ß–ù–û–°–¢–ò –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ô:")
print("=" * 70)

# –ù–∞–∑–≤–∞–Ω–∏—è —Ü–µ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
target_names = [
    'future_return_15m', 'future_return_1h', 'future_return_4h', 'future_return_12h',
    'direction_15m', 'direction_1h', 'direction_4h', 'direction_12h',
    'volatility_15m', 'volatility_1h', 'volatility_4h', 'volatility_12h',
    'volume_change_15m', 'volume_change_1h', 'volume_change_4h', 'volume_change_12h',
    'price_range_15m', 'price_range_1h', 'price_range_4h', 'price_range_12h'
]

results = {}

# –ê–Ω–∞–ª–∏–∑ future returns (–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏)
print("\nüéØ –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ï –î–û–•–û–î–ù–û–°–¢–ò (future_return):")
print("-" * 50)

for i in range(4):
    pred = predictions[:, i]
    true = targets[:, i]
    
    mae = mean_absolute_error(true, pred)
    mse = mean_squared_error(true, pred)
    rmse = np.sqrt(mse)
    r2 = r2_score(true, pred)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è –ø–æ–Ω—è—Ç–Ω–æ—Å—Ç–∏
    mae_pct = mae * 100
    rmse_pct = rmse * 100
    
    # –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Ä–æ—Å—Ç/–ø–∞–¥–µ–Ω–∏–µ)
    pred_direction = (pred > 0).astype(int)
    true_direction = (true > 0).astype(int)
    direction_accuracy = accuracy_score(true_direction, pred_direction)
    
    results[target_names[i]] = {
        'mae': mae_pct,
        'rmse': rmse_pct,
        'r2': r2,
        'direction_accuracy': direction_accuracy
    }
    
    print(f"{target_names[i]:20s} | MAE: {mae_pct:5.2f}% | –¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {direction_accuracy:.1%}")

# –ê–Ω–∞–ª–∏–∑ direction (–±–∏–Ω–∞—Ä–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è)
print("\nüéØ –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ï –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø (direction):")
print("-" * 50)

for i in range(4, 8):
    pred = predictions[:, i]
    true = targets[:, i]
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –±–∏–Ω–∞—Ä–Ω—ã–µ –º–µ—Ç–∫–∏
    pred_binary = (pred > 0.5).astype(int)
    true_binary = (true > 0.5).astype(int)
    
    accuracy = accuracy_score(true_binary, pred_binary)
    
    # –ü–æ–¥—Å—á–µ—Ç True Positive, False Positive –∏ —Ç.–¥.
    tp = np.sum((pred_binary == 1) & (true_binary == 1))
    tn = np.sum((pred_binary == 0) & (true_binary == 0))
    fp = np.sum((pred_binary == 1) & (true_binary == 0))
    fn = np.sum((pred_binary == 0) & (true_binary == 1))
    
    precision = tp / (tp + fp) if (tp + fp) > 0 else 0
    recall = tp / (tp + fn) if (tp + fn) > 0 else 0
    
    results[target_names[i]] = {
        'accuracy': accuracy,
        'precision': precision,
        'recall': recall
    }
    
    print(f"{target_names[i]:20s} | –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1%} | Precision: {precision:.1%} | Recall: {recall:.1%}")

# –ê–Ω–∞–ª–∏–∑ volatility
print("\nüéØ –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ï –í–û–õ–ê–¢–ò–õ–¨–ù–û–°–¢–ò (volatility):")
print("-" * 50)

for i in range(8, 12):
    pred = predictions[:, i]
    true = targets[:, i]
    
    mae = mean_absolute_error(true, pred)
    r2 = r2_score(true, pred)
    
    # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–π –∏ —Ä–µ–∞–ª—å–Ω–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é
    correlation = np.corrcoef(pred, true)[0, 1]
    
    results[target_names[i]] = {
        'mae': mae,
        'r2': r2,
        'correlation': correlation
    }
    
    print(f"{target_names[i]:20s} | MAE: {mae:.4f} | –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {correlation:.3f}")

# 5. –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
print("\n" + "=" * 70)
print("üìä –°–í–û–î–ù–ê–Ø –û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê:")
print("=" * 70)

# –°—Ä–µ–¥–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ —Ç–∏–ø–∞–º
return_accuracies = [results[name]['direction_accuracy'] for name in target_names[:4]]
direction_accuracies = [results[name]['accuracy'] for name in target_names[4:8]]
volatility_correlations = [results[name]['correlation'] for name in target_names[8:12]]

avg_return_accuracy = np.mean(return_accuracies)
avg_direction_accuracy = np.mean(direction_accuracies)
avg_volatility_correlation = np.mean(volatility_correlations)

print(f"\nüìà –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏:")
print(f"   –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {avg_return_accuracy:.1%}")
print(f"   –°—Ä–µ–¥–Ω—è—è MAE: {np.mean([results[name]['mae'] for name in target_names[:4]]):.2f}%")

print(f"\nüéØ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
print(f"   –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: {avg_direction_accuracy:.1%}")

print(f"\nüìä –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏:")
print(f"   –°—Ä–µ–¥–Ω—è—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {avg_volatility_correlation:.3f}")

# 6. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
print("\n" + "=" * 70)
print("üí∞ –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ê–Ø –û–¶–ï–ù–ö–ê –î–õ–Ø –¢–û–†–ì–û–í–õ–ò:")
print("=" * 70)

# –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
# –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ > 0.5%
threshold = 0.005  # 0.5%

trades = 0
winning_trades = 0
total_return = 0

for i in range(len(predictions)):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ 1 —á–∞—Å
    pred_return = predictions[i, 1]  # future_return_1h
    true_return = targets[i, 1]
    
    if abs(pred_return) > threshold:
        trades += 1
        # –ï—Å–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        if (pred_return > 0 and true_return > 0) or (pred_return < 0 and true_return < 0):
            winning_trades += 1
            total_return += abs(true_return) - 0.001  # –ú–∏–Ω—É—Å –∫–æ–º–∏—Å—Å–∏—è 0.1%
        else:
            total_return -= 0.02  # Stop loss 2%

if trades > 0:
    win_rate = winning_trades / trades
    avg_return_per_trade = total_return / trades * 100
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–º—É–ª—è—Ü–∏–∏ (–ø–æ—Ä–æ–≥ {threshold*100}%):")
    print(f"   –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {trades}")
    print(f"   Win Rate: {win_rate:.1%}")
    print(f"   –°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —Å–¥–µ–ª–∫—É: {avg_return_per_trade:.2f}%")
    print(f"   –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {total_return*100:.2f}%")

# 7. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
print("\nüìä –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π...")

output_dir = Path('experiments/accuracy_analysis')
output_dir.mkdir(parents=True, exist_ok=True)

# –ì—Ä–∞—Ñ–∏–∫ 1: Scatter plot –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π vs —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è future_return_1h
plt.figure(figsize=(10, 8))
sample_size = min(1000, len(predictions))
sample_idx = np.random.choice(len(predictions), sample_size, replace=False)

plt.scatter(targets[sample_idx, 1] * 100, predictions[sample_idx, 1] * 100, alpha=0.5, s=10)
plt.plot([-5, 5], [-5, 5], 'r--', lw=2, label='–ò–¥–µ–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ')
plt.xlabel('–†–µ–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)')
plt.ylabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)')
plt.title('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –Ω–∞ 1 —á–∞—Å')
plt.legend()
plt.grid(True, alpha=0.3)
plt.xlim(-5, 5)
plt.ylim(-5, 5)
plt.savefig(output_dir / 'return_prediction_scatter.png', dpi=300)
plt.close()

# –ì—Ä–∞—Ñ–∏–∫ 2: –¢–æ—á–Ω–æ—Å—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–º
plt.figure(figsize=(10, 6))
timeframes = ['15m', '1h', '4h', '12h']
accuracies = [results[f'direction_{tf}']['accuracy'] for tf in timeframes]

plt.bar(timeframes, accuracies)
plt.xlabel('–í—Ä–µ–º–µ–Ω–Ω–æ–π –≥–æ—Ä–∏–∑–æ–Ω—Ç')
plt.ylabel('–¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è')
plt.title('–¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–º')
plt.ylim(0, 1)
for i, acc in enumerate(accuracies):
    plt.text(i, acc + 0.01, f'{acc:.1%}', ha='center')
plt.grid(True, alpha=0.3, axis='y')
plt.savefig(output_dir / 'accuracy_by_timeframe.png', dpi=300)
plt.close()

# 8. –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç
print("\n" + "=" * 80)
print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –í–ï–†–î–ò–ö–¢:")
print("=" * 80)

if avg_direction_accuracy > 0.55 and avg_return_accuracy > 0.55:
    print("‚úÖ –ú–û–î–ï–õ–¨ –ü–û–ö–ê–ó–´–í–ê–ï–¢ –•–û–†–û–®–£–Æ –¢–û–ß–ù–û–°–¢–¨!")
    print(f"   - –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {avg_direction_accuracy:.1%}")
    print(f"   - –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å: –í–´–°–û–ö–ê–Ø")
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ")
    verdict = "READY"
elif avg_direction_accuracy > 0.52:
    print("‚ö†Ô∏è –ú–û–î–ï–õ–¨ –ü–û–ö–ê–ó–´–í–ê–ï–¢ –°–†–ï–î–ù–Æ–Æ –¢–û–ß–ù–û–°–¢–¨")
    print(f"   - –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {avg_direction_accuracy:.1%}")
    print(f"   - –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å: –°–†–ï–î–ù–Ø–Ø")
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
    verdict = "NEEDS_OPTIMIZATION"
else:
    print("‚ùå –ú–û–î–ï–õ–¨ –ü–û–ö–ê–ó–´–í–ê–ï–¢ –ù–ò–ó–ö–£–Æ –¢–û–ß–ù–û–°–¢–¨")
    print(f"   - –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {avg_direction_accuracy:.1%}")
    print(f"   - –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å: –ù–ò–ó–ö–ê–Ø")
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã")
    verdict = "NOT_READY"

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
report = {
    'timestamp': datetime.now().isoformat(),
    'model_val_loss': checkpoint.get('val_loss', 'N/A'),
    'samples_analyzed': len(predictions),
    'avg_direction_accuracy': float(avg_direction_accuracy),
    'avg_return_accuracy': float(avg_return_accuracy),
    'avg_volatility_correlation': float(avg_volatility_correlation),
    'detailed_results': results,
    'verdict': verdict
}

report_file = output_dir / f'accuracy_report_{datetime.now().strftime("%Y%m%d_%H%M%S")}.yaml'
with open(report_file, 'w') as f:
    yaml.dump(report, f, default_flow_style=False)

print(f"\nüìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
print("=" * 80)
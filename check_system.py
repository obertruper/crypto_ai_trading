#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∫ —Ä–∞–±–æ—Ç–µ
"""

import os
import sys
import psycopg2
import yaml
from pathlib import Path
from rich.console import Console
from rich.table import Table

console = Console()

def check_postgres():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
    try:
        config = yaml.safe_load(open('config/config.yaml'))
        db_config = config['database']
        
        conn = psycopg2.connect(
            host=db_config['host'],
            port=db_config['port'],
            database=db_config['database'],
            user=db_config['user'],
            password=db_config['password']
        )
        
        cur = conn.cursor()
        cur.execute("SELECT COUNT(*) FROM raw_market_data")
        count = cur.fetchone()[0]
        
        cur.close()
        conn.close()
        
        return True, f"‚úÖ PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç ({count:,} –∑–∞–ø–∏—Å–µ–π)"
    except Exception as e:
        return False, f"‚ùå PostgreSQL –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}"

def check_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    required_files = [
        'main.py',
        'train_model.py',
        'run_interactive.py',
        'config/config.yaml',
        'models/patchtst.py',
        'data/feature_engineering.py'
    ]
    
    missing = []
    for file in required_files:
        if not Path(file).exists():
            missing.append(file)
    
    if missing:
        return False, f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing)}"
    return True, "‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ"

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    try:
        import torch
        import pandas
        import numpy
        import sklearn
        import ta
        return True, "‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    except ImportError as e:
        return False, f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {str(e)}"

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    console.print("\n[bold cyan]üîç –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ CRYPTO AI TRADING[/bold cyan]\n")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    table = Table(show_header=True, header_style="bold magenta")
    table.add_column("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç", style="cyan", width=30)
    table.add_column("–°—Ç–∞—Ç—É—Å", width=50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    checks = [
        ("PostgreSQL", check_postgres()),
        ("–§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞", check_files()),
        ("Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", check_dependencies()),
    ]
    
    all_passed = True
    for name, (status, message) in checks:
        table.add_row(name, message)
        if not status:
            all_passed = False
    
    console.print(table)
    
    if all_passed:
        console.print("\n[bold green]‚úÖ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï![/bold green]")
        console.print("\n[yellow]–ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ:[/yellow]")
        console.print("[bold]python train_model.py[/bold]")
    else:
        console.print("\n[bold red]‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´[/bold red]")
        console.print("\n[yellow]–ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–Ω–æ–≤–∞[/yellow]")
        sys.exit(1)

if __name__ == "__main__":
    main()
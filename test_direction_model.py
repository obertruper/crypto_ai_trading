"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç Direction –º–æ–¥–µ–ª–∏
"""

import torch
import numpy as np
from models.direction_predictor import DirectionPredictor
from utils.config import load_config

def test_direction_model():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏ forward pass –º–æ–¥–µ–ª–∏"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Direction –º–æ–¥–µ–ª–∏...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config('configs/direction_only.yaml')
    config['model']['n_features'] = 254  # –ò–∑ –¥–∞–Ω–Ω—ã—Ö
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
    print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
    model = DirectionPredictor(config['model'])
    print(f"‚úÖ –ú–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {sum(p.numel() for p in model.parameters()):,}")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –±–∞—Ç—á
    batch_size = 16
    seq_len = 168
    n_features = 254
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    print("\nüé≤ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    test_input = torch.randn(batch_size, seq_len, n_features)
    
    # Forward pass
    print("üöÄ Forward pass...")
    model.eval()
    with torch.no_grad():
        outputs = model(test_input)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ö–æ–¥—ã
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    for key, value in outputs.items():
        print(f"   {key}: shape={value.shape}, min={value.min():.4f}, max={value.max():.4f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º softmax
        probs = torch.softmax(value, dim=-1)
        print(f"      Probabilities sum: {probs.sum(dim=-1).mean():.4f}")
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        predictions = torch.argmax(value, dim=-1)
        unique_preds = torch.unique(predictions)
        print(f"      Unique predictions: {unique_preds.tolist()}")
    
    # –¢–µ—Å—Ç confidence —á–µ—Ä–µ–∑ softmax
    print("\nüéØ –¢–µ—Å—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π...")
    with torch.no_grad():
        single_output = model(test_input[:1])
        
    for key, logits in single_output.items():
        probs = torch.softmax(logits, dim=-1)
        confidence, pred_class = torch.max(probs, dim=-1)
        print(f"   {key}: –∫–ª–∞—Å—Å={pred_class.item()}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å={confidence.item():.2%}")
    
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å loss
    from models.direction_predictor import DirectionalTradingLoss
    print("\nüéØ –¢–µ—Å—Ç loss —Ñ—É–Ω–∫—Ü–∏–∏...")
    
    criterion = DirectionalTradingLoss()
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ targets
    targets = {}
    price_changes = {}
    
    for timeframe in ['15m', '1h', '4h', '12h']:
        key = f'direction_{timeframe}'
        # –°–ª—É—á–∞–π–Ω—ã–µ –∫–ª–∞—Å—Å—ã 0, 1, 2
        targets[key] = torch.randint(0, 3, (batch_size,))
        # –°–ª—É—á–∞–π–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
        price_changes[timeframe] = torch.randn(batch_size) * 0.05  # ¬±5%
    
    # –í—ã—á–∏—Å–ª—è–µ–º loss
    loss = criterion(outputs, targets, price_changes)
    print(f"‚úÖ Loss –≤—ã—á–∏—Å–ª–µ–Ω: {loss.item():.4f}")
    
    return model


if __name__ == "__main__":
    try:
        model = test_direction_model()
        print("\nüéâ –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –æ–±—É—á–µ–Ω–∏—é!")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ª—É—á—à–µ–Ω–∏–π Direction Prediction
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –Ω–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É, loss —Ñ—É–Ω–∫—Ü–∏—é, –º–µ—Ç—Ä–∏–∫–∏
"""

import torch
import numpy as np
import yaml
from pathlib import Path

def test_unified_model_architecture():
    """–¢–µ—Å—Ç –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã UnifiedPatchTSTForTrading"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã UnifiedPatchTSTForTrading...")
    
    from models.patchtst_unified import UnifiedPatchTSTForTrading
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = {
        'model': {
            'input_size': 240,
            'output_size': 20,
            'context_window': 168,
            'patch_len': 16,
            'stride': 8,
            'd_model': 256,
            'n_heads': 4,
            'e_layers': 2,
            'd_ff': 512,
            'dropout': 0.1
        }
    }
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
    model = UnifiedPatchTSTForTrading(config)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    batch_size = 32
    seq_len = 168
    n_features = 240
    
    inputs = torch.randn(batch_size, seq_len, n_features)
    
    # Forward pass
    outputs = model(inputs)
    
    print(f"   ‚úÖ –í—Ö–æ–¥—ã: {inputs.shape}")
    print(f"   ‚úÖ –í—ã—Ö–æ–¥—ã: {outputs.shape}")
    print(f"   ‚úÖ –û–∂–∏–¥–∞–µ—Ç—Å—è: ({batch_size}, 20)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ direction_logits
    if hasattr(outputs, '_direction_logits'):
        print(f"   ‚úÖ Direction logits —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {outputs._direction_logits.shape}")
        print(f"   ‚úÖ –û–∂–∏–¥–∞–µ—Ç—Å—è: ({batch_size}, 4, 3)")
    else:
        print("   ‚ùå Direction logits –ù–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å—ã direction (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å [0, 1, 2])
    direction_classes = outputs[:, 4:8]
    unique_classes = torch.unique(direction_classes).tolist()
    print(f"   ‚úÖ Direction –∫–ª–∞—Å—Å—ã: {unique_classes}")
    
    if all(c in [0.0, 1.0, 2.0] for c in unique_classes):
        print("   ‚úÖ Direction –∫–ª–∞—Å—Å—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã [0, 1, 2]")
    else:
        print(f"   ‚ö†Ô∏è Direction –∫–ª–∞—Å—Å—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã: {unique_classes}")
    
    print("   ‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n")
    return True

def test_directional_multitask_loss():
    """–¢–µ—Å—Ç –Ω–æ–≤–æ–π DirectionalMultiTaskLoss"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DirectionalMultiTaskLoss...")
    
    from models.patchtst_unified import DirectionalMultiTaskLoss
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_path = Path("config/config.yaml")
    if config_path.exists():
        with open(config_path, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
    else:
        # Fallback –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        config = {
            'loss': {
                'task_weights': {
                    'future_returns': 1.0,
                    'directions': 3.0,
                    'long_levels': 1.0,
                    'short_levels': 1.0,
                    'risk_metrics': 0.5
                }
            },
            'training': {
                'large_movement_weight': 5.0,
                'min_movement_threshold': 0.005
            }
        }
    
    # –°–æ–∑–¥–∞–µ–º loss —Ñ—É–Ω–∫—Ü–∏—é
    loss_fn = DirectionalMultiTaskLoss(config)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞–º–∏
    batch_size = 32
    outputs = torch.randn(batch_size, 20, requires_grad=True)
    targets = torch.randn(batch_size, 20)
    
    # –°–æ–∑–¥–∞–µ–º direction_logits –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è outputs —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞–º–∏
    direction_logits = torch.randn(batch_size, 4, 3, requires_grad=True)
    outputs._direction_logits = direction_logits
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º targets –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    targets[:, 0:4] = torch.randn(batch_size, 4) * 2  # returns –≤ %
    targets[:, 4:8] = torch.randint(0, 3, (batch_size, 4)).float()  # direction –∫–ª–∞—Å—Å—ã
    targets[:, 8:16] = torch.rand(batch_size, 8)  # levels –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ [0, 1]
    targets[:, 16:20] = torch.randn(batch_size, 4) * 5  # risk metrics –≤ %
    
    # –í—ã—á–∏—Å–ª—è–µ–º loss
    loss = loss_fn(outputs, targets)
    
    print(f"   ‚úÖ Loss –≤—ã—á–∏—Å–ª–µ–Ω: {loss.item():.4f}")
    print(f"   ‚úÖ Loss –∏–º–µ–µ—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã: {loss.requires_grad}")
    print(f"   ‚úÖ Loss –∫–æ–Ω–µ—á–µ–Ω: {torch.isfinite(loss).item()}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º backward pass
    loss.backward()
    print("   ‚úÖ Backward pass –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    
    print("   ‚úÖ DirectionalMultiTaskLoss —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n")
    return True

def test_optimized_trainer_metrics():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –≤ OptimizedTrainer"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ OptimizedTrainer...")
    
    from training.optimized_trainer import OptimizedTrainer
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    import torch.nn as nn
    test_model = nn.Linear(10, 20)
    
    config = {
        'model': {'epochs': 1, 'learning_rate': 1e-4},
        'performance': {'mixed_precision': False, 'gradient_accumulation_steps': 1},
        'loss': {}
    }
    
    trainer = OptimizedTrainer(test_model, config, device=torch.device('cpu'))
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å direction_logits
    batch_size = 100
    outputs = torch.randn(batch_size, 20)
    targets = torch.randn(batch_size, 20)
    
    # –î–æ–±–∞–≤–ª—è–µ–º direction_logits
    direction_logits = torch.randn(batch_size, 4, 3)
    outputs._direction_logits = direction_logits
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º targets
    targets[:, 4:8] = torch.randint(0, 3, (batch_size, 4)).float()  # direction –∫–ª–∞—Å—Å—ã
    targets[:, 0:4] = torch.randn(batch_size, 4) * 2  # returns –¥–ª—è trading metrics
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º direction –º–µ—Ç—Ä–∏–∫–∏
    direction_metrics = trainer.compute_direction_metrics(outputs, targets)
    
    print("   üìä Direction Metrics:")
    for key, value in direction_metrics.items():
        if isinstance(value, float):
            print(f"      {key}: {value:.3f}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º trading –º–µ—Ç—Ä–∏–∫–∏
    trading_metrics = trainer.compute_trading_metrics(outputs, targets)
    
    print("   üí∞ Trading Metrics:")
    for key, value in trading_metrics.items():
        if isinstance(value, float):
            print(f"      {key}: {value:.3f}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    key_metrics = ['direction_accuracy_overall', 'win_rate_overall']
    for metric in key_metrics:
        if metric in direction_metrics:
            value = direction_metrics[metric]
            print(f"   ‚úÖ {metric}: {value:.3f}")
        elif metric in trading_metrics:
            value = trading_metrics[metric]
            print(f"   ‚úÖ {metric}: {value:.3f}")
    
    print("   ‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ OptimizedTrainer —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n")
    return True

def test_config_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å config.yaml...")
    
    config_path = Path("config/config.yaml")
    
    if not config_path.exists():
        print("   ‚ùå config.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    with open(config_path, 'r', encoding='utf-8') as f:
        config = yaml.safe_load(f)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    required_params = [
        ['loss', 'name'],
        ['loss', 'task_weights', 'future_returns'],
        ['loss', 'task_weights', 'directions'],
        ['loss', 'large_move_threshold'],
        ['loss', 'focal_alpha'],
        ['loss', 'focal_gamma']
    ]
    
    for param_path in required_params:
        current = config
        try:
            for key in param_path:
                current = current[key]
            print(f"   ‚úÖ {'.'.join(param_path)}: {current}")
        except KeyError:
            print(f"   ‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä: {'.'.join(param_path)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø loss —Ñ—É–Ω–∫—Ü–∏–∏
    loss_name = config.get('loss', {}).get('name', '')
    if loss_name == 'directional_multitask':
        print("   ‚úÖ Loss —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ directional_multitask")
    else:
        print(f"   ‚ö†Ô∏è Loss —Ñ—É–Ω–∫—Ü–∏—è: {loss_name} (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è directional_multitask)")
    
    print("   ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!\n")
    return True

def test_end_to_end_pipeline():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞...")
    
    try:
        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_path = Path("config/config.yaml")
        with open(config_path, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        
        # 2. –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
        from models.patchtst_unified import create_unified_model
        model = create_unified_model(config)
        
        # 3. –°–æ–∑–¥–∞–µ–º loss —Ñ—É–Ω–∫—Ü–∏—é
        from models.patchtst_unified import DirectionalMultiTaskLoss
        loss_fn = DirectionalMultiTaskLoss(config)
        
        # 4. –°–æ–∑–¥–∞–µ–º trainer
        from training.optimized_trainer import OptimizedTrainer
        trainer = OptimizedTrainer(model, config, device=torch.device('cpu'))
        
        # 5. –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        batch_size = 32
        seq_len = config['model']['context_window']
        n_features = config['model']['input_size']
        
        inputs = torch.randn(batch_size, seq_len, n_features)
        targets = torch.randn(batch_size, 20)
        targets[:, 4:8] = torch.randint(0, 3, (batch_size, 4)).float()
        
        # 6. Forward pass
        outputs = model(inputs)
        
        # 7. Loss computation
        loss = loss_fn(outputs, targets)
        
        # 8. –ú–µ—Ç—Ä–∏–∫–∏
        direction_metrics = trainer.compute_direction_metrics(outputs, targets)
        
        print(f"   ‚úÖ –ú–æ–¥–µ–ª—å: {model.__class__.__name__}")
        print(f"   ‚úÖ Loss: {loss_fn.__class__.__name__}")
        print(f"   ‚úÖ Trainer: {trainer.__class__.__name__}")
        print(f"   ‚úÖ Loss –∑–Ω–∞—á–µ–Ω–∏–µ: {loss.item():.4f}")
        print(f"   ‚úÖ Direction Accuracy: {direction_metrics.get('direction_accuracy_overall', 0):.3f}")
        
        print("   ‚úÖ –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=" * 80)
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ò–ô DIRECTION PREDICTION")
    print("=" * 80)
    
    tests = [
        test_unified_model_architecture,
        test_directional_multitask_loss,
        test_optimized_trainer_metrics,
        test_config_integration,
        test_end_to_end_pipeline
    ]
    
    passed = 0
    total = len(tests)
    
    for test_func in tests:
        try:
            if test_func():
                passed += 1
        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç {test_func.__name__} –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
            import traceback
            traceback.print_exc()
            print()
    
    print("=" * 80)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –æ–±—É—á–µ–Ω–∏—é —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏:")
        print("   python main.py --mode train --direction-focus --large-movement-weight 5.0")
        print("\nüìà –û–∂–∏–¥–∞–µ–º—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:")
        print("   - Direction Accuracy: —Å 13% –¥–æ >55%")
        print("   - Win Rate: —Å 38% –¥–æ >60%")
        print("   - Stable training —Å DirectionalMultiTaskLoss")
    else:
        print(f"‚ö†Ô∏è {total - passed} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ")
    
    print("=" * 80)

if __name__ == "__main__":
    main()
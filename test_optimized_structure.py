#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
"""

import yaml
from pathlib import Path
import pandas as pd
from utils.logger import get_logger
from main import load_config, load_cached_data_if_exists, create_unified_data_loaders

def test_optimized_data_loading():
    """–¢–µ—Å—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    logger = get_logger("TestOptimized")
    
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = load_config('config/config.yaml')
    
    # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    logger.info("\n1Ô∏è‚É£ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    train_data, val_data, test_data, feature_cols, target_cols = load_cached_data_if_exists(logger)
    
    if train_data is not None:
        logger.info("‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è DataLoader'–æ–≤
        logger.info("\n2Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö DataLoader'–æ–≤...")
        try:
            train_loader, val_loader, test_loader, config_updated = create_unified_data_loaders(
                train_data, val_data, test_data, feature_cols, target_cols, config, logger
            )
            logger.info("‚úÖ DataLoader'—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            
            # –¢–µ—Å—Ç –ø–µ—Ä–≤–æ–≥–æ –±–∞—Ç—á–∞
            logger.info("\n3Ô∏è‚É£ –¢–µ—Å—Ç –ø–µ—Ä–≤–æ–≥–æ –±–∞—Ç—á–∞...")
            sample_batch = next(iter(train_loader))
            X_sample, y_sample, info_sample = sample_batch
            
            logger.info(f"üìä –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –±–∞—Ç—á–∞:")
            logger.info(f"   - X_sample: {X_sample.shape}")
            logger.info(f"   - y_sample: {y_sample.shape}")
            logger.info(f"   - info_sample: {len(info_sample)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            n_features = X_sample.shape[-1]
            n_targets = y_sample.shape[-1] if y_sample is not None else 0
            
            logger.info(f"\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
            logger.info(f"   - –ü—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö: {n_features}")
            logger.info(f"   - –ü—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤ –∫–æ–Ω—Ñ–∏–≥–µ: {config_updated['model']['input_features']}")
            logger.info(f"   - –¶–µ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ –¥–∞–Ω–Ω—ã—Ö: {n_targets}")
            logger.info(f"   - –¶–µ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Ñ–∏–≥–µ: {len(config_updated['model']['target_variables'])}")
            
            if n_features == config_updated['model']['input_features'] and n_targets == len(config_updated['model']['target_variables']):
                logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–∞–Ω–Ω—ã–º")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –¥–∞–Ω–Ω—ã—Ö")
            
            logger.info("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ DataLoader'–æ–≤: {e}")
            return False
    else:
        logger.error("‚ùå –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return False

def test_no_duplicates():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
    logger = get_logger("TestDuplicates")
    
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ –∫–æ–¥–µ...")
    
    # –ß–∏—Ç–∞–µ–º main.py –∏ –∏—â–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    main_content = Path("main.py").read_text()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è create_data_loaders
    create_data_loaders_count = main_content.count("create_data_loaders(")
    logger.info(f"   - –í—ã–∑–æ–≤–æ–≤ create_data_loaders –≤ main.py: {create_data_loaders_count}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è CryptoDataLoader
    crypto_data_loader_count = main_content.count("CryptoDataLoader(")
    logger.info(f"   - –°–æ–∑–¥–∞–Ω–∏—è CryptoDataLoader –≤ main.py: {crypto_data_loader_count}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ parquet
    parquet_count = main_content.count("read_parquet(")
    logger.info(f"   - –í—ã–∑–æ–≤–æ–≤ read_parquet –≤ main.py: {parquet_count}")
    
    if create_data_loaders_count <= 1 and parquet_count <= 1:
        logger.info("‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–æ")
        return True
    else:
        logger.warning("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ –æ—Å—Ç–∞–ª–∏—Å—å –¥—É–±–ª–∏–∫–∞—Ç—ã")
        return False

if __name__ == "__main__":
    success1 = test_optimized_data_loading()
    success2 = test_no_duplicates()
    
    if success1 and success2:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    else:
        print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ù—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
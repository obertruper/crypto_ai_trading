"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è feature engineering
–†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å —Ü–µ–ª–µ–≤—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
"""

import pandas as pd
import numpy as np
from typing import Dict, List, Tuple, Optional
import logging
from pathlib import Path
import ta
import warnings
warnings.filterwarnings('ignore')

logger = logging.getLogger(__name__)

class FixedFeatureEngineer:
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏ —Ü–µ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
    
    def __init__(self, config: Dict):
        self.config = config
        self.logger = logger
        self.scaler_params = {}
        
    def create_features(self, df: pd.DataFrame) -> pd.DataFrame:
        """–ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å –ü–†–ê–í–ò–õ–¨–ù–´–ú–ò —Ü–µ–ª–µ–≤—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏"""
        self.logger.info("üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏ —Ü–µ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        df = df.sort_values(['symbol', 'datetime']).reset_index(drop=True)
        
        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        df = self._create_price_features(df)
        df = self._create_volume_features(df)
        df = self._create_technical_indicators(df)
        df = self._create_time_features(df)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        df = self._create_correct_target_variables(df)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è (–±–µ–∑ —Ü–µ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö)
        df = self._normalize_features_correctly(df)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≥–¥–µ –Ω–µ—Ç —Ü–µ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        df = df.dropna(subset=['target_return_1h'])
        
        self.logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(df.columns)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è {len(df)} —Å—Ç—Ä–æ–∫")
        self.logger.info(f"üìä –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è - mean: {df['target_return_1h'].mean():.4f}, std: {df['target_return_1h'].std():.4f}")
        
        return df
    
    def _create_correct_target_variables(self, df: pd.DataFrame) -> pd.DataFrame:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
        self.logger.info("üéØ –°–æ–∑–¥–∞–Ω–∏–µ –ü–†–ê–í–ò–õ–¨–ù–´–• —Ü–µ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
        
        # –î–ª—è 15-–º–∏–Ω—É—Ç–Ω—ã—Ö –±–∞—Ä–æ–≤, 4 –±–∞—Ä–∞ = 1 —á–∞—Å
        horizon = 4
        
        # –í—ã—á–∏—Å–ª—è–µ–º –±—É–¥—É—â—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞ 1 —á–∞—Å (4 –±–∞—Ä–∞)
        df['target_return_1h'] = df.groupby('symbol')['close'].transform(
            lambda x: (x.shift(-horizon) / x - 1) * 100
        )
        
        # –ë–∏–Ω–∞—Ä–Ω—ã–µ —Ü–µ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        df['target_direction'] = (df['target_return_1h'] > 0).astype(int)
        
        # –ú—É–ª—å—Ç–∏–∫–ª–∞—Å—Å–æ–≤—ã–µ —Ü–µ–ª–∏
        df['target_class'] = pd.cut(
            df['target_return_1h'],
            bins=[-np.inf, -1, -0.5, 0.5, 1, np.inf],
            labels=[0, 1, 2, 3, 4]  # strong_down, down, neutral, up, strong_up
        )
        
        # Take profit –∏ stop loss —Ü–µ–ª–∏
        tp_levels = self.config['risk_management']['take_profit_targets']
        sl_level = self.config['risk_management']['stop_loss_pct']
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏–π —á–∞—Å
        for i in range(1, horizon + 1):
            df[f'future_high_{i}'] = df.groupby('symbol')['high'].shift(-i)
            df[f'future_low_{i}'] = df.groupby('symbol')['low'].shift(-i)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ TP/SL
        future_high_cols = [f'future_high_{i}' for i in range(1, horizon + 1)]
        future_low_cols = [f'future_low_{i}' for i in range(1, horizon + 1)]
        
        df['max_profit_1h'] = df[future_high_cols].max(axis=1) / df['close'] - 1
        df['max_loss_1h'] = df[future_low_cols].min(axis=1) / df['close'] - 1
        
        # –¶–µ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è TP
        for tp in tp_levels:
            df[f'target_tp_{tp}'] = (df['max_profit_1h'] * 100 >= tp).astype(int)
        
        # –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è SL
        df['target_sl_hit'] = (df['max_loss_1h'] * 100 <= -sl_level).astype(int)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        cols_to_drop = future_high_cols + future_low_cols
        df = df.drop(columns=cols_to_drop)
        
        self.logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ü–µ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: target_return_1h (—Ä–µ–≥—Ä–µ—Å—Å–∏—è), target_direction (–±–∏–Ω–∞—Ä–Ω–∞—è), target_class (–º—É–ª—å—Ç–∏–∫–ª–∞—Å—Å)")
        
        return df
    
    def _create_price_features(self, df: pd.DataFrame) -> pd.DataFrame:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        # Returns
        for period in [1, 4, 12, 48]:  # 15min, 1h, 3h, 12h
            df[f'return_{period}'] = df.groupby('symbol')['close'].pct_change(period) * 100
        
        # Price ratios
        df['high_low_ratio'] = df['high'] / df['low'] - 1
        df['close_open_ratio'] = df['close'] / df['open'] - 1
        
        # Rolling statistics
        for window in [12, 48, 96]:  # 3h, 12h, 24h
            df[f'rolling_mean_{window}'] = df.groupby('symbol')['close'].transform(
                lambda x: x.rolling(window, min_periods=1).mean()
            )
            df[f'rolling_std_{window}'] = df.groupby('symbol')['close'].transform(
                lambda x: x.rolling(window, min_periods=1).std()
            )
            df[f'price_position_{window}'] = (df['close'] - df[f'rolling_mean_{window}']) / df[f'rolling_std_{window}']
        
        return df
    
    def _create_volume_features(self, df: pd.DataFrame) -> pd.DataFrame:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–º–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        # Volume ratios
        for window in [12, 48]:
            df[f'volume_ratio_{window}'] = df['volume'] / df.groupby('symbol')['volume'].transform(
                lambda x: x.rolling(window, min_periods=1).mean()
            )
        
        # VWAP
        df['vwap'] = (df['close'] * df['volume']).groupby(df['symbol']).cumsum() / df.groupby('symbol')['volume'].cumsum()
        df['price_vwap_ratio'] = df['close'] / df['vwap'] - 1
        
        # OBV
        df['obv'] = df.groupby('symbol').apply(
            lambda x: (np.sign(x['close'].diff()) * x['volume']).cumsum()
        ).reset_index(level=0, drop=True)
        
        return df
    
    def _create_technical_indicators(self, df: pd.DataFrame) -> pd.DataFrame:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        # RSI
        for period in [14, 28]:
            df[f'rsi_{period}'] = df.groupby('symbol')['close'].transform(
                lambda x: ta.momentum.RSIIndicator(x, window=period).rsi()
            )
        
        # MACD
        for group_name, group_data in df.groupby('symbol'):
            macd = ta.trend.MACD(group_data['close'])
            df.loc[df['symbol'] == group_name, 'macd'] = macd.macd()
            df.loc[df['symbol'] == group_name, 'macd_signal'] = macd.macd_signal()
            df.loc[df['symbol'] == group_name, 'macd_diff'] = macd.macd_diff()
        
        # Bollinger Bands
        for period in [20, 40]:
            bb = df.groupby('symbol')['close'].transform(
                lambda x: ta.volatility.BollingerBands(x, window=period, window_dev=2)
            )
            df[f'bb_high_{period}'] = df.groupby('symbol').apply(
                lambda x: ta.volatility.BollingerBands(x['close'], window=period).bollinger_hband()
            ).reset_index(level=0, drop=True)
            df[f'bb_low_{period}'] = df.groupby('symbol').apply(
                lambda x: ta.volatility.BollingerBands(x['close'], window=period).bollinger_lband()
            ).reset_index(level=0, drop=True)
            df[f'bb_position_{period}'] = (df['close'] - df[f'bb_low_{period}']) / (df[f'bb_high_{period}'] - df[f'bb_low_{period}'])
        
        # ATR
        for period in [14, 28]:
            df[f'atr_{period}'] = df.groupby('symbol').apply(
                lambda x: ta.volatility.AverageTrueRange(x['high'], x['low'], x['close'], window=period).average_true_range()
            ).reset_index(level=0, drop=True)
        
        return df
    
    def _create_time_features(self, df: pd.DataFrame) -> pd.DataFrame:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        df['hour'] = pd.to_datetime(df['datetime']).dt.hour
        df['day_of_week'] = pd.to_datetime(df['datetime']).dt.dayofweek
        df['day_of_month'] = pd.to_datetime(df['datetime']).dt.day
        
        # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        df['hour_sin'] = np.sin(2 * np.pi * df['hour'] / 24)
        df['hour_cos'] = np.cos(2 * np.pi * df['hour'] / 24)
        df['dow_sin'] = np.sin(2 * np.pi * df['day_of_week'] / 7)
        df['dow_cos'] = np.cos(2 * np.pi * df['day_of_week'] / 7)
        
        return df
    
    def _normalize_features_correctly(self, df: pd.DataFrame) -> pd.DataFrame:
        """–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ë–ï–ó —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        # –ò—Å–∫–ª—é—á–∞–µ–º –∏–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        exclude_cols = [
            'symbol', 'datetime', 'open', 'high', 'low', 'close', 'volume',
            'target_return_1h', 'target_direction', 'target_class',
            'target_tp_1.2', 'target_tp_2.4', 'target_tp_3.5', 'target_sl_hit',
            'max_profit_1h', 'max_loss_1h'
        ]
        
        # –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        feature_cols = [col for col in df.columns if col not in exclude_cols]
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–∏–º–≤–æ–ª—É –¥–ª—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        for symbol in df['symbol'].unique():
            mask = df['symbol'] == symbol
            symbol_data = df.loc[mask, feature_cols]
            
            # Z-score –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
            mean = symbol_data.mean()
            std = symbol_data.std()
            
            # –ó–∞–º–µ–Ω—è–µ–º –Ω—É–ª–µ–≤—ã–µ std –Ω–∞ 1
            std[std == 0] = 1
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º
            df.loc[mask, feature_cols] = (symbol_data - mean) / std
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            self.scaler_params[symbol] = {
                'mean': mean.to_dict(),
                'std': std.to_dict()
            }
        
        # –ó–∞–º–µ–Ω—è–µ–º inf –∏ nan –Ω–∞ 0
        df[feature_cols] = df[feature_cols].replace([np.inf, -np.inf], 0)
        df[feature_cols] = df[feature_cols].fillna(0)
        
        return df
    
    def prepare_train_val_test_split(self, df: pd.DataFrame) -> Tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]:
        """–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        df = df.sort_values('datetime').reset_index(drop=True)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
        total_len = len(df)
        train_end = int(total_len * 0.7)
        val_end = int(total_len * 0.85)
        
        # –†–∞–∑–¥–µ–ª—è–µ–º
        train_df = df.iloc[:train_end].copy()
        val_df = df.iloc[train_end:val_end].copy()
        test_df = df.iloc[val_end:].copy()
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–∞–∂–¥—ã–π –Ω–∞–±–æ—Ä –∏—Å–ø–æ–ª—å–∑—É—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ train
        val_df = self._apply_normalization(val_df, self.scaler_params)
        test_df = self._apply_normalization(test_df, self.scaler_params)
        
        self.logger.info(f"üìä –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: Train {len(train_df)}, Val {len(val_df)}, Test {len(test_df)}")
        
        return train_df, val_df, test_df
    
    def _apply_normalization(self, df: pd.DataFrame, scaler_params: Dict) -> pd.DataFrame:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏"""
        exclude_cols = [
            'symbol', 'datetime', 'open', 'high', 'low', 'close', 'volume',
            'target_return_1h', 'target_direction', 'target_class',
            'target_tp_1.2', 'target_tp_2.4', 'target_tp_3.5', 'target_sl_hit',
            'max_profit_1h', 'max_loss_1h'
        ]
        
        feature_cols = [col for col in df.columns if col not in exclude_cols]
        
        for symbol in df['symbol'].unique():
            if symbol in scaler_params:
                mask = df['symbol'] == symbol
                params = scaler_params[symbol]
                
                for col in feature_cols:
                    if col in params['mean']:
                        df.loc[mask, col] = (df.loc[mask, col] - params['mean'][col]) / params['std'][col]
        
        df[feature_cols] = df[feature_cols].replace([np.inf, -np.inf], 0)
        df[feature_cols] = df[feature_cols].fillna(0)
        
        return df
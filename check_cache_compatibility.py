#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫—ç—à–∞ –º–µ–∂–¥—É prepare_trading_data.py –∏ main.py
"""

import pandas as pd
import pickle
from pathlib import Path
import yaml

def check_cache_compatibility():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∫—ç—à –∏–∑ prepare_trading_data.py —Å–æ–≤–º–µ—Å—Ç–∏–º —Å main.py"""
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫—ç—à–∞ –¥–∞–Ω–Ω—ã—Ö...\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
    cache_dir = Path("data/processed")
    required_files = [
        "train_data.parquet",
        "val_data.parquet", 
        "test_data.parquet"
    ]
    
    print("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤:")
    all_exist = True
    for file_name in required_files:
        file_path = cache_dir / file_name
        if file_path.exists():
            size_mb = file_path.stat().st_size / (1024 * 1024)
            print(f"   ‚úÖ {file_name}: {size_mb:.2f} MB")
        else:
            print(f"   ‚ùå {file_name}: –ù–ï –ù–ê–ô–î–ï–ù")
            all_exist = False
    
    if not all_exist:
        print("\n‚ùå –ù–µ –≤—Å–µ —Ñ–∞–π–ª—ã –∫—ç—à–∞ –Ω–∞–π–¥–µ–Ω—ã!")
        return False
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print("\nüìä –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö:")
    train_data = pd.read_parquet(cache_dir / "train_data.parquet")
    val_data = pd.read_parquet(cache_dir / "val_data.parquet")
    test_data = pd.read_parquet(cache_dir / "test_data.parquet")
    
    print(f"\nüìà –†–∞–∑–º–µ—Ä—ã –¥–∞—Ç–∞—Å–µ—Ç–æ–≤:")
    print(f"   - Train: {len(train_data):,} –∑–∞–ø–∏—Å–µ–π")
    print(f"   - Val: {len(val_data):,} –∑–∞–ø–∏—Å–µ–π")
    print(f"   - Test: {len(test_data):,} –∑–∞–ø–∏—Å–µ–π")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    print(f"\nüîß –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:")
    print(f"   - –í—Å–µ–≥–æ –∫–æ–ª–æ–Ω–æ–∫: {len(train_data.columns)}")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ data.constants (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    try:
        from data.constants import (
            get_feature_columns, get_target_columns, 
            validate_data_structure, TRADING_TARGET_VARIABLES
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ validate_data_structure (–∫–∞–∫ –≤ main.py)
        try:
            data_info = validate_data_structure(train_data)
            feature_cols = data_info['feature_cols']
            target_cols = data_info['target_cols']
            
            print(f"   - –ü—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(feature_cols)}")
            print(f"   - –¶–µ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {len(target_cols)}")
            print(f"   - –°–ª—É–∂–µ–±–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫: {len(train_data.columns) - len(feature_cols) - len(target_cols)}")
            
            print(f"\n‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å main.py!")
            
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
            return False
            
    except ImportError:
        # –ï—Å–ª–∏ constants.py –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–µ–ª–∞–µ–º –±–∞–∑–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        print("\n‚ö†Ô∏è –ú–æ–¥—É–ª—å data.constants –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –±–∞–∑–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É...")
        
        # –ò—â–µ–º —Ü–µ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        target_patterns = ['tp', 'sl', 'reached', 'hit', 'future_return', 'best_direction', 
                          'optimal_entry', 'expected_value', 'target_return']
        
        target_cols = []
        feature_cols = []
        
        for col in train_data.columns:
            if any(pattern in col for pattern in target_patterns):
                target_cols.append(col)
            elif col not in ['datetime', 'symbol', 'open', 'high', 'low', 'close', 'volume', 'turnover']:
                feature_cols.append(col)
        
        print(f"   - –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: ~{len(feature_cols)}")
        print(f"   - –ù–∞–π–¥–µ–Ω–æ —Ü–µ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: ~{len(target_cols)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    print("\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ config.yaml:")
    
    with open('config/config.yaml', 'r') as f:
        config = yaml.safe_load(f)
    
    config_targets = config['model'].get('target_variables', [])
    
    if config_targets:
        print(f"   –û–∂–∏–¥–∞–µ—Ç—Å—è {len(config_targets)} —Ü–µ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
        
        missing_targets = []
        for target in config_targets:
            if target not in train_data.columns:
                missing_targets.append(target)
        
        if missing_targets:
            print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ü–µ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {missing_targets}")
        else:
            print(f"   ‚úÖ –í—Å–µ {len(config_targets)} —Ü–µ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω—ã!")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º close_vwap_ratio (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π)
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ close_vwap_ratio (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω):")
    if 'close_vwap_ratio' in train_data.columns:
        stats = train_data['close_vwap_ratio'].describe()
        print(f"   Min: {stats['min']:.4f}")
        print(f"   Max: {stats['max']:.4f}")
        print(f"   Mean: {stats['mean']:.4f}")
        
        if stats['max'] > 10:
            print("   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: close_vwap_ratio –≤—Å–µ –µ—â–µ –∏–º–µ–µ—Ç —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!")
            print("   –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∫—ç—à –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è feature_engineering.py")
            return False
        else:
            print("   ‚úÖ close_vwap_ratio –≤ –Ω–æ—Ä–º–µ!")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    print("\n" + "="*60)
    print("‚úÖ –ö–≠–® –°–û–í–ú–ï–°–¢–ò–ú –ò –ì–û–¢–û–í –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
    print("="*60)
    print("\nüöÄ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ:")
    print("   python main.py --mode train")
    
    return True

if __name__ == "__main__":
    check_cache_compatibility()
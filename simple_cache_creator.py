#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–µ—à–∞ —Ä–∞–∑–º–µ—Ä–æ–º 2.9 –ì–ë –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
"""

import pandas as pd
import numpy as np
import os
from datetime import datetime

def create_cache_29gb():
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∫–µ—à–∞ —Ä–∞–∑–º–µ—Ä–æ–º 2.9 –ì–ë...")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ~2.9 –ì–ë
    n_samples = 800000  # 800K –∑–∞–ø–∏—Å–µ–π
    n_features = 150    # 150 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    
    print(f"üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {n_samples:,} –∑–∞–ø–∏—Å–µ–π —Å {n_features} –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏...")
    
    # –ë–∞–∑–æ–≤—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    np.random.seed(42)
    timestamps = pd.date_range(start='2020-01-01', periods=n_samples, freq='15min')
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    data = {}
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    data['timestamp'] = timestamps
    data['symbol'] = np.random.choice(['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT', 'XRPUSDT'], n_samples)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è OHLCV –¥–∞–Ω–Ω—ã—Ö
    print("üí∞ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è OHLCV –¥–∞–Ω–Ω—ã—Ö...")
    base_prices = np.random.uniform(1000, 100000, n_samples)
    data['open'] = base_prices * (1 + np.random.normal(0, 0.01, n_samples))
    data['high'] = base_prices * (1 + np.abs(np.random.normal(0, 0.02, n_samples)))
    data['low'] = base_prices * (1 - np.abs(np.random.normal(0, 0.02, n_samples)))
    data['close'] = base_prices
    data['volume'] = np.random.lognormal(15, 2, n_samples)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    print("üìà –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")
    
    # Moving averages
    for period in [5, 10, 20, 50, 100, 200]:
        data[f'sma_{period}'] = np.random.uniform(0.9, 1.1, n_samples) * base_prices
        data[f'ema_{period}'] = np.random.uniform(0.9, 1.1, n_samples) * base_prices
    
    # Oscillators
    data['rsi'] = np.random.uniform(20, 80, n_samples)
    data['stoch_k'] = np.random.uniform(0, 100, n_samples)
    data['stoch_d'] = np.random.uniform(0, 100, n_samples)
    data['williams_r'] = np.random.uniform(-100, 0, n_samples)
    data['cci'] = np.random.normal(0, 50, n_samples)
    data['mfi'] = np.random.uniform(0, 100, n_samples)
    
    # MACD
    data['macd'] = np.random.normal(0, 100, n_samples)
    data['macd_signal'] = np.random.normal(0, 80, n_samples)
    data['macd_histogram'] = data['macd'] - data['macd_signal']
    
    # Bollinger Bands
    data['bb_upper'] = base_prices * 1.05
    data['bb_lower'] = base_prices * 0.95
    data['bb_middle'] = base_prices
    data['bb_width'] = data['bb_upper'] - data['bb_lower']
    
    # Volume indicators
    data['on_balance_volume'] = np.cumsum(np.random.choice([-1, 1], n_samples) * data['volume'])
    data['volume_sma'] = np.random.uniform(0.8, 1.2, n_samples) * data['volume']
    data['volume_ratio'] = data['volume'] / data['volume_sma']
    
    # Volatility indicators
    data['atr'] = np.random.uniform(0.01, 0.05, n_samples) * base_prices
    data['true_range'] = np.random.uniform(0.01, 0.03, n_samples) * base_prices
    data['volatility'] = np.random.uniform(0.01, 0.08, n_samples)
    
    # Price action indicators
    data['pivot_point'] = (data['high'] + data['low'] + data['close']) / 3
    data['resistance_1'] = 2 * data['pivot_point'] - data['low']
    data['support_1'] = 2 * data['pivot_point'] - data['high']
    
    # Returns
    for period in [1, 4, 24, 96]:  # 15min, 1h, 6h, 24h
        data[f'return_{period}'] = np.random.normal(0, 0.02, n_samples)
        data[f'log_return_{period}'] = np.random.normal(0, 0.02, n_samples)
    
    # Momentum indicators
    data['momentum_10'] = np.random.normal(0, 0.1, n_samples)
    data['momentum_20'] = np.random.normal(0, 0.15, n_samples)
    data['rate_of_change'] = np.random.normal(0, 5, n_samples)
    
    # Advanced indicators
    data['awesome_oscillator'] = np.random.normal(0, 1000, n_samples)
    data['ultimate_oscillator'] = np.random.uniform(0, 100, n_samples)
    data['commodity_channel_index'] = np.random.normal(0, 100, n_samples)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    print("üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
    
    # –õ–∞–≥–∏ —Ü–µ–Ω
    for lag in range(1, 21):  # 20 –ª–∞–≥–æ–≤
        data[f'close_lag_{lag}'] = np.roll(base_prices, lag)
        data[f'volume_lag_{lag}'] = np.roll(data['volume'], lag)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    window_sizes = [5, 10, 20, 50]
    for window in window_sizes:
        data[f'price_mean_{window}'] = np.random.uniform(0.95, 1.05, n_samples) * base_prices
        data[f'price_std_{window}'] = np.random.uniform(0.01, 0.05, n_samples) * base_prices
        data[f'volume_mean_{window}'] = np.random.uniform(0.8, 1.2, n_samples) * data['volume']
        data[f'volume_std_{window}'] = np.random.uniform(0.1, 0.3, n_samples) * data['volume']
    
    # Fourier –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    for i in range(10):
        data[f'fft_real_{i}'] = np.random.normal(0, 1, n_samples)
        data[f'fft_imag_{i}'] = np.random.normal(0, 1, n_samples)
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    data['hour'] = timestamps.hour
    data['day_of_week'] = timestamps.dayofweek
    data['month'] = timestamps.month
    data['is_weekend'] = (timestamps.dayofweek >= 5).astype(int)
    
    # –°–æ–∑–¥–∞–µ–º DataFrame
    print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ DataFrame...")
    df = pd.DataFrame(data)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–æ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á
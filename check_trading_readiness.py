#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∫ –æ–±—É—á–µ–Ω–∏—é —Ç–æ—Ä–≥–æ–≤–æ–π –º–æ–¥–µ–ª–∏
"""

import yaml
import torch
import psycopg2
from pathlib import Path
import importlib
import sys

def check_item(description, check_func):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –≤—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        result, details = check_func()
        if result:
            print(f"‚úÖ {description}: {details}")
            return True
        else:
            print(f"‚ùå {description}: {details}")
            return False
    except Exception as e:
        print(f"‚ùå {description}: –û–®–ò–ë–ö–ê - {str(e)}")
        return False


def check_gpu():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ GPU"""
    if torch.cuda.is_available():
        device_name = torch.cuda.get_device_name(0)
        memory = torch.cuda.get_device_properties(0).total_memory / 1024**3
        return True, f"{device_name} ({memory:.1f} GB)"
    return False, "GPU –Ω–µ –Ω–∞–π–¥–µ–Ω"


def check_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
    try:
        with open('config/config.yaml', 'r') as f:
            config = yaml.safe_load(f)
        
        db_config = config['database']
        conn = psycopg2.connect(
            host=db_config['host'],
            port=db_config['port'],
            database=db_config['database'],
            user=db_config['user'],
            password=db_config['password']
        )
        
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM raw_market_data")
        count = cursor.fetchone()[0]
        
        cursor.close()
        conn.close()
        
        return True, f"{count:,} –∑–∞–ø–∏—Å–µ–π –≤ –ë–î"
    except:
        return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è"


def check_modules():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–¥—É–ª–µ–π"""
    modules = {
        'feature_engineering': 'data.feature_engineering',
        'patchtst': 'models.patchtst',
        'signals_v2': 'trading.signals_v2',
        'trading_losses': 'models.trading_losses'
    }
    
    missing = []
    for name, module_path in modules.items():
        try:
            importlib.import_module(module_path)
        except:
            missing.append(name)
    
    if missing:
        return False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–æ–¥—É–ª–∏: {', '.join(missing)}"
    return True, "–í—Å–µ –º–æ–¥—É–ª–∏ –Ω–∞ –º–µ—Å—Ç–µ"


def check_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        with open('config/config.yaml', 'r') as f:
            config = yaml.safe_load(f)
        
        checks = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ task_type
        if config['model'].get('task_type') == 'trading':
            checks.append("task_type=trading ‚úì")
        else:
            return False, "task_type –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'trading'"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ loss
        if 'trading' in config['loss'].get('name', ''):
            checks.append("loss=trading_multi_task ‚úì")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
        if config['risk_management']['stop_loss_pct'] == 2.0:
            checks.append("SL=2% ‚úì")
        
        tp_targets = config['risk_management']['take_profit_targets']
        if tp_targets == [1.5, 2.5, 4.0]:
            checks.append("TP=[1.5,2.5,4.0]% ‚úì")
        
        return True, ", ".join(checks)
    except:
        return False, "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è config.yaml"


def check_data_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    data_dir = Path("data/processed")
    files = ['train_data.parquet', 'val_data.parquet', 'test_data.parquet']
    
    existing = []
    for f in files:
        if (data_dir / f).exists():
            existing.append(f)
    
    if len(existing) == len(files):
        return True, "–í—Å–µ —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤—ã"
    elif existing:
        return False, f"–ù–∞–π–¥–µ–Ω—ã —Ç–æ–ª—å–∫–æ: {', '.join(existing)}"
    else:
        return False, "–î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ prepare_trading_data.py"


def main():
    print("\n" + "="*60)
    print("üîç –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ö –û–ë–£–ß–ï–ù–ò–Æ –¢–û–†–ì–û–í–û–ô –ú–û–î–ï–õ–ò")
    print("="*60 + "\n")
    
    checks = [
        ("GPU –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å", check_gpu),
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL", check_database),
        ("–ö–ª—é—á–µ–≤—ã–µ –º–æ–¥—É–ª–∏", check_modules),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", check_config),
        ("–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", check_data_files),
    ]
    
    passed = 0
    for description, check_func in checks:
        if check_item(description, check_func):
            passed += 1
    
    print("\n" + "-"*60)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(checks)} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == len(checks):
        print("\n‚úÖ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê –ö –û–ë–£–ß–ï–ù–ò–Æ!")
        print("\nüöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ:")
        print("   python main.py --mode train")
        print("\nüìä –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º:")
        print("   python run_interactive.py")
    else:
        print("\n‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
        
        if "–¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã" in str([c[1]() for c in checks]).lower():
            print("\nüí° –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:")
            print("   python prepare_trading_data.py")


if __name__ == "__main__":
    main()
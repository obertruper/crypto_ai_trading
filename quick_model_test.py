#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
"""

import torch
import numpy as np
import pandas as pd
import yaml
from pathlib import Path
from datetime import datetime

print("üöÄ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –º–æ–¥–µ–ª–∏ PatchTST...")
print("=" * 80)

# –ó–∞–≥—Ä—É–∑–∫–∞ checkpoint
checkpoint_path = 'models_saved/best_model.pth'
checkpoint = torch.load(checkpoint_path, map_location='cpu')

print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
print(f"üìä –≠–ø–æ—Ö–∞: {checkpoint.get('epoch', 'N/A')}")
print(f"üìä Val Loss: {checkpoint.get('val_loss', 'N/A'):.6f}")

# –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = checkpoint['config']['model']
print(f"\nüèóÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏:")
print(f"   - –í—Ö–æ–¥–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: {config.get('input_size', 'N/A')}")
print(f"   - –í—ã—Ö–æ–¥–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {config.get('output_size', 'N/A')}")
print(f"   - –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏: {config.get('batch_size', 'N/A')}")
print(f"   - Learning rate: {config.get('learning_rate', 'N/A')}")

# –ò—Å—Ç–æ—Ä–∏—è –æ–±—É—á–µ–Ω–∏—è
if 'history' in checkpoint:
    history = checkpoint['history']
    if 'train_loss' in history and 'val_loss' in history:
        last_5_epochs = min(5, len(history['train_loss']))
        print(f"\nüìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ {last_5_epochs} —ç–ø–æ—Ö:")
        for i in range(-last_5_epochs, 0):
            epoch_num = len(history['train_loss']) + i + 1
            print(f"   –≠–ø–æ—Ö–∞ {epoch_num}: Train={history['train_loss'][i]:.6f}, Val={history['val_loss'][i]:.6f}")

# –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
val_loss = checkpoint.get('val_loss', float('inf'))
print(f"\nüéØ –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏:")

if val_loss < 0.15:
    print(f"   ‚úÖ –û–¢–õ–ò–ß–ù–û–ï –∫–∞—á–µ—Å—Ç–≤–æ (Val Loss = {val_loss:.6f})")
    print("   –ú–æ–¥–µ–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã—Å–æ–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
elif val_loss < 0.20:
    print(f"   ‚úÖ –•–û–†–û–®–ï–ï –∫–∞—á–µ—Å—Ç–≤–æ (Val Loss = {val_loss:.6f})")
    print("   –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
elif val_loss < 0.25:
    print(f"   ‚ö†Ô∏è –°–†–ï–î–ù–ï–ï –∫–∞—á–µ—Å—Ç–≤–æ (Val Loss = {val_loss:.6f})")
    print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
else:
    print(f"   ‚ùå –ù–ò–ó–ö–û–ï –∫–∞—á–µ—Å—Ç–≤–æ (Val Loss = {val_loss:.6f})")
    print("   –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –¥–∞–Ω–Ω—ã–º–∏:")
try:
    test_data = pd.read_parquet('data/processed/test_data.parquet')
    feature_cols = [col for col in test_data.columns 
                   if not col.startswith(('future_', 'direction_', 'volatility_', 'volume_change_', 'price_range_'))
                   and col not in ['datetime', 'symbol', 'open', 'high', 'low', 'close', 'volume']]
    
    print(f"   –ü—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö: {len(feature_cols)}")
    print(f"   –ü—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤ –º–æ–¥–µ–ª–∏: {config.get('input_size', 'N/A')}")
    
    if len(feature_cols) >= config.get('input_size', 240):
        print("   ‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã —Å –º–æ–¥–µ–ª—å—é")
    else:
        print("   ‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–µ–π –¥–∞–Ω–Ω—ã—Ö")
        
except Exception as e:
    print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {str(e)}")

# –ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
print(f"\nüìä –¶–µ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (20 –≤—ã—Ö–æ–¥–æ–≤):")
targets = [
    "future_return_15m", "future_return_1h", "future_return_4h", "future_return_12h",
    "direction_15m", "direction_1h", "direction_4h", "direction_12h",
    "volatility_15m", "volatility_1h", "volatility_4h", "volatility_12h",
    "volume_change_15m", "volume_change_1h", "volume_change_4h", "volume_change_12h",
    "price_range_15m", "price_range_1h", "price_range_4h", "price_range_12h"
]

print("   –†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
for i in range(0, 16, 4):
    print(f"   - {targets[i:i+4]}")
    
# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")

if val_loss < 0.15:
    print("1. ‚úÖ –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –ø–æ–ª–Ω–æ–º–∞—Å—à—Ç–∞–±–Ω–æ–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é")
    print("2. ‚úÖ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ –Ω–∞ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç–∞—Ö")
    print("3. ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞—á–∞—Ç—å —Å –Ω–µ–±–æ–ª—å—à–∏—Ö –ø–æ–∑–∏—Ü–∏–π")
    print("\nüöÄ –í–ï–†–î–ò–ö–¢: –ó–ê–ü–£–°–ö–ê–ô–¢–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï!")
else:
    print("1. ‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é")
    print("2. ‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–∞—Ö")
    print("3. ‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è fine-tuning")
    print("\n‚ö†Ô∏è –í–ï–†–î–ò–ö–¢: –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
output_dir = Path('experiments/evaluation_results')
output_dir.mkdir(parents=True, exist_ok=True)

report_file = output_dir / f'quick_test_report_{datetime.now().strftime("%Y%m%d_%H%M%S")}.txt'

with open(report_file, 'w', encoding='utf-8') as f:
    f.write(f"–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –º–æ–¥–µ–ª–∏ PatchTST\n")
    f.write(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
    f.write(f"Val Loss: {val_loss:.6f}\n")
    f.write(f"–≠–ø–æ—Ö–∞: {checkpoint.get('epoch', 'N/A')}\n")
    f.write(f"–í–µ—Ä–¥–∏–∫—Ç: {'–ì–û–¢–û–í–ê' if val_loss < 0.15 else '–¢–†–ï–ë–£–ï–¢ –ü–†–û–í–ï–†–ö–ò'}\n")

print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
print("=" * 80)
#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
"""

import pandas as pd
import numpy as np
import ta
from pathlib import Path
import yaml
from sqlalchemy import create_engine
import warnings
warnings.filterwarnings('ignore')

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
with open('config/config.yaml', 'r') as f:
    config = yaml.safe_load(f)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
db_config = config['database']
engine = create_engine(
    f"postgresql://{db_config['user']}:{db_config['password']}@"
    f"{db_config['host']}:{db_config['port']}/{db_config['database']}"
)

def validate_basic_features(df):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
    errors = []
    
    # 1. Returns
    if 'returns' in df.columns:
        manual_returns = np.log(df['close'] / df['close'].shift(1))
        diff = abs(df['returns'] - manual_returns).max()
        if diff > 1e-6:
            errors.append(f"returns: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ {diff}")
        else:
            print("   ‚úÖ returns - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # 2. Volume ratio
    if 'volume_ratio' in df.columns:
        vol_ma = df['volume'].rolling(20).mean()
        manual_ratio = df['volume'] / vol_ma
        # –ó–∞–ø–æ–ª–Ω—è–µ–º NaN –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∫–∞–∫ –≤ –∫–æ–¥–µ
        manual_ratio = manual_ratio.fillna(1.0)
        diff = abs(df['volume_ratio'] - manual_ratio).max()
        if diff > 0.01:
            errors.append(f"volume_ratio: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ {diff}")
        else:
            print("   ‚úÖ volume_ratio - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # 3. Close position
    if 'close_position' in df.columns:
        manual_pos = (df['close'] - df['low']) / (df['high'] - df['low'] + 1e-10)
        diff = abs(df['close_position'] - manual_pos).max()
        if diff > 1e-6:
            errors.append(f"close_position: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ {diff}")
        else:
            print("   ‚úÖ close_position - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # 4. VWAP
    if 'vwap' in df.columns and 'close_vwap_ratio' in df.columns:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ VWAP –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
        vwap_ratio = df['vwap'] / df['close']
        if vwap_ratio.min() < 0.5 or vwap_ratio.max() > 2.0:
            errors.append(f"vwap: –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã 0.5-2.0x –æ—Ç close")
        else:
            print("   ‚úÖ vwap - –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º close_vwap_ratio
        if df['close_vwap_ratio'].max() > 2.0:
            errors.append(f"close_vwap_ratio: max={df['close_vwap_ratio'].max()} > 2.0")
        else:
            print("   ‚úÖ close_vwap_ratio - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    return errors

def validate_technical_indicators(df):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:")
    errors = []
    
    # 1. RSI
    if 'rsi' in df.columns:
        manual_rsi = ta.momentum.RSIIndicator(df['close'], window=14).rsi()
        diff = abs(df['rsi'] - manual_rsi).max()
        if diff > 0.1:
            errors.append(f"RSI: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ {diff}")
        else:
            print("   ‚úÖ RSI - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ RSI
        if df['rsi'].min() < 0 or df['rsi'].max() > 100:
            errors.append("RSI –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã 0-100")
    
    # 2. MACD
    if all(col in df.columns for col in ['macd', 'macd_signal', 'macd_diff']):
        macd_ta = ta.trend.MACD(df['close'], window_slow=26, window_fast=12, window_sign=9)
        
        diff_macd = abs(df['macd'] - macd_ta.macd()).max()
        diff_signal = abs(df['macd_signal'] - macd_ta.macd_signal()).max()
        diff_hist = abs(df['macd_diff'] - macd_ta.macd_diff()).max()
        
        if max(diff_macd, diff_signal, diff_hist) > 0.1:
            errors.append(f"MACD: —Ä–∞–∑–Ω–∏—Ü—ã {diff_macd:.3f}, {diff_signal:.3f}, {diff_hist:.3f}")
        else:
            print("   ‚úÖ MACD - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # 3. Bollinger Bands
    if all(col in df.columns for col in ['bb_high', 'bb_low', 'bb_middle']):
        bb = ta.volatility.BollingerBands(df['close'], window=20, window_dev=2)
        
        diff_high = abs(df['bb_high'] - bb.bollinger_hband()).max()
        diff_low = abs(df['bb_low'] - bb.bollinger_lband()).max()
        diff_middle = abs(df['bb_middle'] - bb.bollinger_mavg()).max()
        
        if max(diff_high, diff_low, diff_middle) > 0.1:
            errors.append(f"Bollinger: —Ä–∞–∑–Ω–∏—Ü—ã {diff_high:.3f}, {diff_low:.3f}, {diff_middle:.3f}")
        else:
            print("   ‚úÖ Bollinger Bands - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # 4. ATR
    if 'atr' in df.columns:
        manual_atr = ta.volatility.AverageTrueRange(df['high'], df['low'], df['close'], window=14).average_true_range()
        diff = abs(df['atr'] - manual_atr).max()
        if diff > 0.1:
            errors.append(f"ATR: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ {diff}")
        else:
            print("   ‚úÖ ATR - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # 5. ADX
    if 'adx' in df.columns:
        adx_indicator = ta.trend.ADXIndicator(df['high'], df['low'], df['close'])
        manual_adx = adx_indicator.adx()
        diff = abs(df['adx'] - manual_adx).max()
        if diff > 0.1:
            errors.append(f"ADX: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ {diff}")
        else:
            print("   ‚úÖ ADX - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    return errors

def validate_microstructure_features(df):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
    errors = []
    
    # 1. HL Spread
    if 'hl_spread' in df.columns:
        manual_spread = (df['high'] - df['low']) / df['close']
        diff = abs(df['hl_spread'] - manual_spread).max()
        if diff > 1e-6:
            errors.append(f"hl_spread: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ {diff}")
        else:
            print("   ‚úÖ hl_spread - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # 2. Price impact
    if 'price_impact' in df.columns:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ price_impact –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
        if df['price_impact'].max() > 10.0:
            errors.append(f"price_impact: max={df['price_impact'].max()} > 10.0")
        else:
            print("   ‚úÖ price_impact - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # 3. Toxicity
    if 'toxicity' in df.columns:
        # toxicity = 1 / (1 + price_impact), –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 1
        if df['toxicity'].min() < 0 or df['toxicity'].max() > 1:
            errors.append(f"toxicity: –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã 0-1")
        else:
            print("   ‚úÖ toxicity - –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö")
    
    return errors

def validate_rally_detection(df):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ rally detection –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ rally detection –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
    errors = []
    
    # 1. Volume Z-score
    if 'volume_zscore' in df.columns:
        vol_mean = df['volume'].rolling(20).mean()
        vol_std = df['volume'].rolling(20).std()
        manual_zscore = (df['volume'] - vol_mean) / (vol_std + 1e-10)
        diff = abs(df['volume_zscore'] - manual_zscore).max()
        if diff > 0.1:
            errors.append(f"volume_zscore: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ {diff}")
        else:
            print("   ‚úÖ volume_zscore - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # 2. Volume spike
    if 'volume_spike' in df.columns:
        # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å 0 –∏–ª–∏ 1
        unique_vals = df['volume_spike'].unique()
        if not set(unique_vals).issubset({0, 1, 0.0, 1.0}):
            errors.append(f"volume_spike: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è {unique_vals}")
        else:
            print("   ‚úÖ volume_spike - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–±–∏–Ω–∞—Ä–Ω—ã–π)")
    
    # 3. Distance from support/resistance
    for period in [20, 50, 100]:
        if f'distance_from_low_{period}' in df.columns:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ
            max_dist = df[f'distance_from_low_{period}'].abs().max()
            if max_dist > 1.0:  # 100%
                errors.append(f"distance_from_low_{period}: —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ {max_dist}")
            else:
                print(f"   ‚úÖ distance_from_low_{period} - –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö")
    
    # 4. OBV
    if 'obv' in df.columns:
        # OBV –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—É–º—É–ª—è—Ç–∏–≤–Ω—ã–º
        if df['obv'].isna().all():
            errors.append("OBV: –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è NaN")
        else:
            print("   ‚úÖ OBV - —Ä–∞—Å—Å—á–∏—Ç–∞–Ω")
    
    return errors

def validate_temporal_features(df):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
    errors = []
    
    # 1. Hour
    if 'hour' in df.columns:
        if df['hour'].min() < 0 or df['hour'].max() > 23:
            errors.append(f"hour: –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã 0-23")
        else:
            print("   ‚úÖ hour - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # 2. Day of week
    if 'dayofweek' in df.columns:
        if df['dayofweek'].min() < 0 or df['dayofweek'].max() > 6:
            errors.append(f"dayofweek: –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã 0-6")
        else:
            print("   ‚úÖ dayofweek - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # 3. –°–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    for col in ['hour_sin', 'hour_cos', 'dow_sin', 'dow_cos']:
        if col in df.columns:
            if df[col].min() < -1.1 or df[col].max() > 1.1:
                errors.append(f"{col}: –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã [-1, 1]")
            else:
                print(f"   ‚úÖ {col} - –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö")
    
    # 4. Sessions
    session_cols = ['asian_session', 'european_session', 'american_session']
    for col in session_cols:
        if col in df.columns:
            unique_vals = df[col].unique()
            if not set(unique_vals).issubset({0, 1, 0.0, 1.0}):
                errors.append(f"{col}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è {unique_vals}")
            else:
                print(f"   ‚úÖ {col} - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–±–∏–Ω–∞—Ä–Ω—ã–π)")
    
    return errors

def validate_target_variables(df):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:")
    errors = []
    
    # 1. Future returns
    for i in range(1, 5):
        col = f'future_return_{i}'
        if col in df.columns:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π (–Ω–µ –±–æ–ª–µ–µ 50% –∑–∞ –ø–µ—Ä–∏–æ–¥)
            if df[col].abs().max() > 0.5:
                errors.append(f"{col}: —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è {df[col].abs().max()}")
            else:
                print(f"   ‚úÖ {col} - –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö")
    
    # 2. TP/SL reached (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–∏–Ω–∞—Ä–Ω—ã–º–∏)
    binary_targets = []
    for direction in ['long', 'short']:
        for tp in ['tp1', 'tp2', 'tp3', 'sl']:
            for suffix in ['hit', 'reached']:
                binary_targets.append(f'{direction}_{tp}_{suffix}')
    
    for col in binary_targets:
        if col in df.columns:
            unique_vals = df[col].unique()
            if not set(unique_vals).issubset({0, 1, 0.0, 1.0}):
                errors.append(f"{col}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è {unique_vals}")
    
    if not errors:
        print("   ‚úÖ –í—Å–µ –±–∏–Ω–∞—Ä–Ω—ã–µ targets –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
    
    # 3. Best direction
    if 'best_direction' in df.columns:
        unique_dirs = df['best_direction'].unique()
        valid_dirs = {'LONG', 'SHORT', 'NEUTRAL', 0, 1, 2}
        if not set(unique_dirs).issubset(valid_dirs):
            errors.append(f"best_direction: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è {unique_dirs}")
        else:
            print("   ‚úÖ best_direction - –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
    
    return errors

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    print("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤\n")
    print("="*60)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print("üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    query = """
    SELECT * FROM raw_market_data 
    WHERE symbol = 'BTCUSDT' 
    ORDER BY datetime DESC 
    LIMIT 1000
    """
    df = pd.read_sql(query, engine)
    df = df.sort_values('datetime').reset_index(drop=True)
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º feature engineering
    print("\nüîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ feature engineering...")
    from data.feature_engineering import FeatureEngineer
    engineer = FeatureEngineer(config)
    df_featured = engineer.create_features(df.copy())
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(df_featured.columns)} –∫–æ–ª–æ–Ω–æ–∫")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    all_errors = []
    
    all_errors.extend(validate_basic_features(df_featured))
    all_errors.extend(validate_technical_indicators(df_featured))
    all_errors.extend(validate_microstructure_features(df_featured))
    all_errors.extend(validate_rally_detection(df_featured))
    all_errors.extend(validate_temporal_features(df_featured))
    all_errors.extend(validate_target_variables(df_featured))
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "="*60)
    if all_errors:
        print(f"‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(all_errors)} –æ—à–∏–±–æ–∫:")
        for error in all_errors:
            print(f"   - {error}")
    else:
        print("‚úÖ –í–°–ï –ò–ù–î–ò–ö–ê–¢–û–†–´ –†–ê–°–°–ß–ò–¢–´–í–ê–Æ–¢–°–Ø –ö–û–†–†–ï–ö–¢–ù–û!")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ main.py
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ main.py:")
    print("   - main.py –∏—Å–ø–æ–ª—å–∑—É–µ—Ç validate_data_structure() –∏–∑ data.constants")
    print("   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç feature_cols –∏ target_cols")
    print("   - –ü–µ—Ä–µ–¥–∞–µ—Ç –∏—Ö –≤ create_unified_data_loaders()")
    print("   - DataLoader –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏")
    
    return len(all_errors) == 0

if __name__ == "__main__":
    main()
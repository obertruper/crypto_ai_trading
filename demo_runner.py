#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ ML –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import yaml
import pandas as pd
import numpy as np
from datetime import datetime
from pathlib import Path
import warnings
warnings.filterwarnings('ignore')

from utils.logger import get_logger

def load_config(config_path: str) -> dict:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    with open(config_path, 'r', encoding='utf-8') as f:
        return yaml.safe_load(f)

def demo_database_connection(config: dict):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    logger = get_logger("DatabaseDemo")
    
    logger.info("üîå –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...")
    
    try:
        import psycopg2
        from sqlalchemy import create_engine
        
        db_config = config['database']
        connection_string = (
            f"postgresql://{db_config['user']}:{db_config['password']}@"
            f"{db_config['host']}:{db_config['port']}/{db_config['database']}"
        )
        
        engine = create_engine(connection_string)
        
        # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        with engine.connect() as conn:
            result = conn.execute("SELECT 1 as test")
            test_value = result.scalar()
            
        if test_value == 1:
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            with engine.connect() as conn:
                symbols_query = """
                SELECT COUNT(DISTINCT symbol) as symbol_count 
                FROM raw_market_data 
                WHERE market_type = 'futures'
                """
                symbol_count = conn.execute(symbols_query).scalar()
                
                records_query = """
                SELECT COUNT(*) as total_records 
                FROM raw_market_data 
                WHERE market_type = 'futures'
                """
                total_records = conn.execute(records_query).scalar()
                
                date_range_query = """
                SELECT MIN(datetime) as min_date, MAX(datetime) as max_date 
                FROM raw_market_data 
                WHERE market_type = 'futures'
                """
                date_result = conn.execute(date_range_query).fetchone()
                
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
            logger.info(f"   - –°–∏–º–≤–æ–ª–æ–≤: {symbol_count}")
            logger.info(f"   - –ó–∞–ø–∏—Å–µ–π: {total_records:,}")
            logger.info(f"   - –ü–µ—Ä–∏–æ–¥: {date_result[0]} - {date_result[1]}")
            
            return True
            
    except ImportError:
        logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è PostgreSQL (psycopg2, sqlalchemy)")
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def demo_feature_engineering():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
    logger = get_logger("FeatureDemo")
    
    logger.info("üõ†Ô∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    dates = pd.date_range('2024-01-01', periods=1000, freq='15min')
    np.random.seed(42)
    
    price_data = {
        'datetime': dates,
        'symbol': ['BTCUSDT'] * len(dates),
        'open': 45000 + np.cumsum(np.random.randn(len(dates)) * 10),
        'high': None,
        'low': None,
        'close': None,
        'volume': np.random.exponential(1000, len(dates)),
        'turnover': None
    }
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è OHLC –¥–∞–Ω–Ω—ã—Ö
    for i in range(len(dates)):
        base_price = price_data['open'][i]
        daily_volatility = 0.02
        
        high = base_price * (1 + np.random.random() * daily_volatility)
        low = base_price * (1 - np.random.random() * daily_volatility)
        close = low + (high - low) * np.random.random()
        
        price_data['high'] = price_data.get('high', []) or []
        price_data['low'] = price_data.get('low', []) or []
        price_data['close'] = price_data.get('close', []) or []
        price_data['turnover'] = price_data.get('turnover', []) or []
        
        if i == 0:
            price_data['high'] = [high]
            price_data['low'] = [low]
            price_data['close'] = [close]
            price_data['turnover'] = [price_data['volume'][i] * close]
        else:
            price_data['high'].append(high)
            price_data['low'].append(low)
            price_data['close'].append(close)
            price_data['turnover'].append(price_data['volume'][i] * close)
    
    df = pd.DataFrame(price_data)
    
    # –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    logger.info("üìà –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")
    
    # Moving averages
    df['sma_20'] = df['close'].rolling(20).mean()
    df['ema_12'] = df['close'].ewm(span=12).mean()
    
    # Returns
    df['returns'] = df['close'].pct_change()
    df['log_returns'] = np.log(df['close'] / df['close'].shift(1))
    
    # Volatility
    df['volatility'] = df['returns'].rolling(20).std()
    
    # Volume indicators
    df['volume_sma'] = df['volume'].rolling(20).mean()
    df['volume_ratio'] = df['volume'] / df['volume_sma']
    
    # Price ratios
    df['high_low_ratio'] = df['high'] / df['low']
    df['close_open_ratio'] = df['close'] / df['open']
    
    # Temporal features
    df['hour'] = df['datetime'].dt.hour
    df['day_of_week'] = df['datetime'].dt.dayofweek
    df['is_weekend'] = (df['day_of_week'] >= 5).astype(int)
    
    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(df.columns)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    logger.info(f"üìä –†–∞–∑–º–µ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞: {len(df)} –∑–∞–ø–∏—Å–µ–π")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    numeric_cols = df.select_dtypes(include=[np.number]).columns
    logger.info(f"üî¢ –ß–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(numeric_cols)}")
    
    return df

def demo_risk_management():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏"""
    logger = get_logger("RiskDemo")
    
    logger.info("‚öñÔ∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏...")
    
    # –°–∏–º—É–ª—è—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è
    initial_capital = 100000
    current_capital = initial_capital
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫–∞
    risk_per_trade = 0.01  # 1% —Ä–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É
    max_positions = 5
    
    # –°–∏–º—É–ª—è—Ü–∏—è —Å–¥–µ–ª–æ–∫
    trades = []
    
    for i in range(10):
        # –°–ª—É—á–∞–π–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–¥–µ–ª–∫–∏
        symbol = np.random.choice(['BTCUSDT', 'ETHUSDT', 'BNBUSDT'])
        entry_price = np.random.uniform(30000, 70000)
        confidence = np.random.uniform(0.6, 0.95)
        atr_value = entry_price * 0.02
        
        # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
        risk_amount = current_capital * risk_per_trade * confidence
        stop_loss_distance = atr_value * 2
        position_size = risk_amount / stop_loss_distance
        
        # –°–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏
        win_probability = confidence
        is_win = np.random.random() < win_probability
        
        if is_win:
            pnl = risk_amount * np.random.uniform(2, 5)  # 2-5x —Ä–∏—Å–∫–∞
            result = "WIN"
        else:
            pnl = -risk_amount
            result = "LOSS"
        
        current_capital += pnl
        
        trade = {
            'id': i + 1,
            'symbol': symbol,
            'entry_price': entry_price,
            'position_size': position_size,
            'risk_amount': risk_amount,
            'confidence': confidence,
            'pnl': pnl,
            'result': result,
            'capital_after': current_capital
        }
        
        trades.append(trade)
        
        logger.info(f"–°–¥–µ–ª–∫–∞ #{i+1}: {symbol} {result} PnL=${pnl:.2f} Capital=${current_capital:.2f}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    trades_df = pd.DataFrame(trades)
    winning_trades = trades_df[trades_df['pnl'] > 0]
    losing_trades = trades_df[trades_df['pnl'] <= 0]
    
    total_return = (current_capital - initial_capital) / initial_capital
    win_rate = len(winning_trades) / len(trades_df)
    profit_factor = abs(winning_trades['pnl'].sum() / losing_trades['pnl'].sum()) if len(losing_trades) > 0 else float('inf')
    
    logger.info(f"üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–º—É–ª—è—Ü–∏–∏:")
    logger.info(f"   - –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {total_return:.2%}")
    logger.info(f"   - Win Rate: {win_rate:.2%}")
    logger.info(f"   - Profit Factor: {profit_factor:.2f}")
    logger.info(f"   - –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {len(trades_df)}")
    
    return trades_df

def demo_signal_generation():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    logger = get_logger("SignalDemo")
    
    logger.info("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤...")
    
    symbols = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT', 'XRPUSDT']
    signals = []
    
    for symbol in symbols:
        # –°–ª—É—á–∞–π–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
        current_price = np.random.uniform(0.5, 70000)
        rsi = np.random.uniform(20, 80)
        volume_ratio = np.random.uniform(0.5, 3.0)
        volatility = np.random.uniform(0.01, 0.08)
        
        # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏ (—Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ)
        tp_probs = np.random.random(4)  # 4 —É—Ä–æ–≤–Ω—è TP
        signal_strength = np.max(tp_probs)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if signal_strength > 0.7 and rsi < 70 and volume_ratio > 1.2:
            side = 'long' if np.random.random() > 0.5 else 'short'
            confidence = signal_strength * 0.8  # –°–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞ —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
            
            # –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω–µ–π
            atr_value = current_price * 0.02
            stop_loss = current_price - atr_value * 2 if side == 'long' else current_price + atr_value * 2
            
            take_profits = []
            tp_levels = [1.2, 2.4, 3.5, 5.8]  # %
            for tp_pct in tp_levels:
                if side == 'long':
                    tp_price = current_price * (1 + tp_pct / 100)
                else:
                    tp_price = current_price * (1 - tp_pct / 100)
                take_profits.append(tp_price)
            
            # –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
            reasons = []
            reasons.append(f"–ú–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç {side} —Å —Å–∏–ª–æ–π {signal_strength:.2%}")
            if rsi < 30:
                reasons.append("RSI –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å")
            elif rsi > 70:
                reasons.append("RSI –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å")
            if volume_ratio > 1.5:
                reasons.append(f"–í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º ({volume_ratio:.1f}x)")
            
            signal = {
                'symbol': symbol,
                'side': side,
                'entry_price': current_price,
                'stop_loss': stop_loss,
                'take_profits': take_profits,
                'confidence': confidence,
                'signal_strength': signal_strength,
                'reasoning': "; ".join(reasons)
            }
            
            signals.append(signal)
            
            logger.info(f"üéØ –°–∏–≥–Ω–∞–ª: {symbol} {side.upper()} @ {current_price:.4f} (conf: {confidence:.2%})")
    
    logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(signals)} –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    return signals

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    logger = get_logger("Demo")
    
    logger.info("=" * 80)
    logger.info("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Crypto AI Trading System")
    logger.info("=" * 80)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = load_config("config/config.yaml")
    
    try:
        # 1. –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
        db_success = demo_database_connection(config)
        
        # 2. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        logger.info("\n" + "=" * 50)
        featured_data = demo_feature_engineering()
        
        # 3. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏
        logger.info("\n" + "=" * 50)
        trades_data = demo_risk_management()
        
        # 4. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        logger.info("\n" + "=" * 50)
        signals_data = demo_signal_generation()
        
        # –°–≤–æ–¥–∫–∞
        logger.info("\n" + "=" * 80)
        logger.info("üìã –°–≤–æ–¥–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:")
        logger.info(f"   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: {'–£—Å–ø–µ—à–Ω–æ' if db_success else '–û—à–∏–±–∫–∞'}")
        logger.info(f"   ‚úÖ –ü—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {len(featured_data.columns) if 'featured_data' in locals() else 0}")
        logger.info(f"   ‚úÖ –°–¥–µ–ª–æ–∫ —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–æ: {len(trades_data) if 'trades_data' in locals() else 0}")
        logger.info(f"   ‚úÖ –°–∏–≥–Ω–∞–ª–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(signals_data) if 'signals_data' in locals() else 0}")
        
        logger.info("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        logger.info("üí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ML –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        
    except Exception as e:
        logger.log_error(e, "demo")
        logger.critical("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏!")
        raise

if __name__ == "__main__":
    main()
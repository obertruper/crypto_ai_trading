#!/bin/bash

# Pre-commit hook для автоматической синхронизации перед коммитом
# Проверяет актуальность с удаленным репозиторием

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo "🔍 Проверка синхронизации с GitHub..."

# Получаем последние изменения
git fetch origin main --quiet

# Проверяем, есть ли расхождения
LOCAL=$(git rev-parse HEAD)
REMOTE=$(git rev-parse origin/main)

if [ "$LOCAL" != "$REMOTE" ]; then
    echo -e "${YELLOW}⚠️  Ваша ветка расходится с origin/main${NC}"
    echo -e "${YELLOW}Рекомендуется сначала синхронизироваться:${NC}"
    echo -e "${GREEN}./scripts/git_sync.sh${NC}"
    echo ""
    read -p "Продолжить коммит без синхронизации? (y/N): " choice
    case "$choice" in 
        y|Y ) 
            echo -e "${YELLOW}Продолжаем без синхронизации...${NC}"
            ;;
        * )
            echo -e "${RED}Коммит отменен. Сначала синхронизируйтесь.${NC}"
            exit 1
            ;;
    esac
fi

# Проверяем размер файлов
LARGE_FILES=$(find . -type f -size +50M -not -path "./.git/*" -not -path "./data/processed/*" -not -path "./venv_crypto/*" -not -path "./models_saved/*" -not -path "./cache/*" -not -path "./*.sql" 2>/dev/null)

if [ ! -z "$LARGE_FILES" ]; then
    echo -e "${RED}❌ Обнаружены большие файлы (>50MB):${NC}"
    echo "$LARGE_FILES"
    echo -e "${YELLOW}Добавьте их в .gitignore${NC}"
    exit 1
fi

echo -e "${GREEN}✅ Проверка пройдена${NC}"
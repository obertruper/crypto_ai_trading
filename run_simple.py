"""
–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import psycopg2
import yaml
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
from db_connection import get_db_config, load_data_simple
from data.feature_engineering import FeatureEngineer
from models.patchtst import PatchTST
from trading.risk_manager import RiskManager
from trading.backtester import Backtester
from utils.logger import get_logger

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    
    logger = get_logger("CryptoAI")
    logger.info("="*80)
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Crypto AI Trading System")
    logger.info("="*80)
    
    # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_path = Path("config/config.yaml")
    with open(config_path, 'r') as f:
        config = yaml.safe_load(f)
    
    # 2. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    logger.info("\nüìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î...")
    
    # –ë–µ—Ä–µ–º —Ç–æ–ø-5 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –¥–µ–º–æ
    symbols = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT', 'ADAUSDT']
    df = load_data_simple(symbols=symbols, days=90)
    
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df):,} –∑–∞–ø–∏—Å–µ–π –¥–ª—è {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # 3. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    logger.info("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")
    feature_engineer = FeatureEngineer(config)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
    features_list = []
    for symbol in symbols:
        symbol_data = df[df['symbol'] == symbol].copy()
        if len(symbol_data) > 100:  # –ú–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            features = feature_engineer.create_features(symbol_data)
            features_list.append(features)
            logger.info(f"  {symbol}: {len(features)} –∑–∞–ø–∏—Å–µ–π, {features.shape[1]} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    all_features = pd.concat(features_list, ignore_index=True)
    logger.info(f"\n‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {all_features.shape}")
    
    # 4. –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ train/test
    train_end = df['datetime'].max() - timedelta(days=30)
    train_data = all_features[all_features['datetime'] <= train_end]
    test_data = all_features[all_features['datetime'] > train_end]
    
    logger.info(f"\nüìà –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:")
    logger.info(f"  Train: {len(train_data):,} –∑–∞–ø–∏—Å–µ–π –¥–æ {train_end}")
    logger.info(f"  Test: {len(test_data):,} –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ {train_end}")
    
    # 5. –î–µ–º–æ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞ (–±–µ–∑ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏)
    logger.info("\nüí∞ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞...")
    
    risk_manager = RiskManager(config)
    backtester = Backtester(config)
    
    # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ RSI
    def simple_rsi_signals(data):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ RSI"""
        signals = []
        
        for _, row in data.iterrows():
            if 'rsi' in row and not pd.isna(row['rsi']):
                # –ü–æ–∫—É–ø–∫–∞ –ø—Ä–∏ RSI < 30
                if row['rsi'] < 30:
                    signals.append({
                        'datetime': row['datetime'],
                        'symbol': row['symbol'],
                        'side': 'long',
                        'price': row['close'],
                        'confidence': 0.7
                    })
                # –ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–∏ RSI > 70
                elif row['rsi'] > 70:
                    signals.append({
                        'datetime': row['datetime'],
                        'symbol': row['symbol'],
                        'side': 'short',
                        'price': row['close'],
                        'confidence': 0.7
                    })
        
        return signals
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
    test_signals = simple_rsi_signals(test_data)
    logger.info(f"  –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(test_signals)} —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
    
    # 6. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if test_signals:
        logger.info("\nüìä –ü—Ä–∏–º–µ—Ä—ã —Å–∏–≥–Ω–∞–ª–æ–≤:")
        for signal in test_signals[:5]:
            logger.info(f"  {signal['datetime']} | {signal['symbol']} | "
                       f"{signal['side']} @ {signal['price']:.2f}")
    
    # 7. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω—ã–º
    logger.info("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º:")
    for symbol in symbols:
        symbol_data = test_data[test_data['symbol'] == symbol]
        if len(symbol_data) > 0:
            returns = symbol_data['close'].pct_change().dropna()
            logger.info(f"  {symbol}:")
            logger.info(f"    - –ó–∞–ø–∏—Å–µ–π: {len(symbol_data)}")
            logger.info(f"    - –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${symbol_data['close'].mean():.2f}")
            logger.info(f"    - –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {returns.std() * 100:.2f}%")
            logger.info(f"    - –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞ –ø–µ—Ä–∏–æ–¥: {((symbol_data['close'].iloc[-1] / symbol_data['close'].iloc[0]) - 1) * 100:.2f}%")
    
    logger.info("\n‚úÖ –î–µ–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    logger.info("="*80)
    
    return all_features

if __name__ == "__main__":
    data = main()